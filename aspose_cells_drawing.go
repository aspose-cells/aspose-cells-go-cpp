// +build windows

// Copyright (c) 2001-2024 Aspose Pty Ltd. All Rights Reserved.
// Powered by Aspose.Cells.
package asposecells

// #cgo CXXFLAGS: -std=c++11
// #cgo CFLAGS: -I.
// #cgo LDFLAGS: -Wl,-rpath,"${SRCDIR}/lib/win_x86_64" -L"${SRCDIR}/lib/win_x86_64" -lAspose.Cells.CWrapper
// #include <AsposeCellsCWrapper.h>
import "C"
import (
	"fmt"  
	"errors"
	"runtime"
	"unsafe" 
)

/**************Enum AutoShapeType *****************/

// Represents all built-in auto shape type.
type AutoShapeType int32

const(
AutoShapeType_NotPrimitive AutoShapeType = 0 


AutoShapeType_Rectangle AutoShapeType = 1 


AutoShapeType_RoundedRectangle AutoShapeType = 2 


AutoShapeType_Oval AutoShapeType = 3 


AutoShapeType_Diamond AutoShapeType = 4 


AutoShapeType_IsoscelesTriangle AutoShapeType = 5 


AutoShapeType_RightTriangle AutoShapeType = 6 


AutoShapeType_Parallelogram AutoShapeType = 7 


AutoShapeType_Trapezoid AutoShapeType = 8 


AutoShapeType_Hexagon AutoShapeType = 9 


AutoShapeType_Octagon AutoShapeType = 10 


AutoShapeType_Cross AutoShapeType = 11 


AutoShapeType_Star5 AutoShapeType = 12 


AutoShapeType_RightArrow AutoShapeType = 13 


AutoShapeType_HomePlate AutoShapeType = 15 


AutoShapeType_Cube AutoShapeType = 16 


AutoShapeType_Balloon AutoShapeType = 17 


AutoShapeType_Seal AutoShapeType = 18 


AutoShapeType_Arc AutoShapeType = 19 


AutoShapeType_Line AutoShapeType = 20 


AutoShapeType_Plaque AutoShapeType = 21 


AutoShapeType_Can AutoShapeType = 22 


AutoShapeType_Donut AutoShapeType = 23 


AutoShapeType_TextSimple AutoShapeType = 24 


AutoShapeType_TextOctagon AutoShapeType = 25 


AutoShapeType_TextHexagon AutoShapeType = 26 


AutoShapeType_TextCurve AutoShapeType = 27 


AutoShapeType_TextWave AutoShapeType = 28 


AutoShapeType_TextRing AutoShapeType = 29 


AutoShapeType_TextOnCurve AutoShapeType = 30 


AutoShapeType_msosptTextOnRing AutoShapeType = 31 


AutoShapeType_StraightConnector AutoShapeType = 32 


AutoShapeType_BentConnector2 AutoShapeType = 33 


AutoShapeType_ElbowConnector AutoShapeType = 34 


AutoShapeType_BentConnector4 AutoShapeType = 35 


AutoShapeType_BentConnector5 AutoShapeType = 36 


AutoShapeType_CurvedConnector2 AutoShapeType = 37 


AutoShapeType_CurvedConnector AutoShapeType = 38 


AutoShapeType_CurvedConnector4 AutoShapeType = 39 


AutoShapeType_CurvedConnector5 AutoShapeType = 40 


AutoShapeType_LineCalloutNoBorder2 AutoShapeType = 41 


AutoShapeType_LineCalloutNoBorder3 AutoShapeType = 42 


AutoShapeType_LineCalloutNoBorder4 AutoShapeType = 43 


AutoShapeType_LineCalloutWithAccentBar2 AutoShapeType = 44 


AutoShapeType_LineCalloutWithAccentBar3 AutoShapeType = 45 


AutoShapeType_LineCalloutWithAccentBar4 AutoShapeType = 46 


AutoShapeType_LineCalloutWithBorder2 AutoShapeType = 47 


AutoShapeType_LineCalloutWithBorder3 AutoShapeType = 48 


AutoShapeType_LineCalloutWithBorder4 AutoShapeType = 49 


AutoShapeType_LineCalloutWithBorderAndAccentBar2 AutoShapeType = 50 


AutoShapeType_LineCalloutWithBorderAndAccentBar3 AutoShapeType = 51 


AutoShapeType_LineCalloutWithBorderAndAccentBar4 AutoShapeType = 52 


AutoShapeType_DownRibbon AutoShapeType = 53 


AutoShapeType_UpRibbon AutoShapeType = 54 


AutoShapeType_Chevron AutoShapeType = 55 


AutoShapeType_RegularPentagon AutoShapeType = 56 


AutoShapeType_NoSymbol AutoShapeType = 57 


AutoShapeType_Star8 AutoShapeType = 58 


AutoShapeType_Star16 AutoShapeType = 59 


AutoShapeType_Star32 AutoShapeType = 60 


AutoShapeType_RectangularCallout AutoShapeType = 61 


AutoShapeType_RoundedRectangularCallout AutoShapeType = 62 


AutoShapeType_OvalCallout AutoShapeType = 63 


AutoShapeType_Wave AutoShapeType = 64 


AutoShapeType_FoldedCorner AutoShapeType = 65 


AutoShapeType_LeftArrow AutoShapeType = 66 


AutoShapeType_DownArrow AutoShapeType = 67 


AutoShapeType_UpArrow AutoShapeType = 68 


AutoShapeType_LeftRightArrow AutoShapeType = 69 


AutoShapeType_UpDownArrow AutoShapeType = 70 


AutoShapeType_Explosion1 AutoShapeType = 71 


AutoShapeType_Explosion2 AutoShapeType = 72 


AutoShapeType_LightningBolt AutoShapeType = 73 


AutoShapeType_Heart AutoShapeType = 74 


AutoShapeType_PictureFrame AutoShapeType = 75 


AutoShapeType_QuadArrow AutoShapeType = 76 


AutoShapeType_LeftArrowCallout AutoShapeType = 77 


AutoShapeType_RightArrowCallout AutoShapeType = 78 


AutoShapeType_UpArrowCallout AutoShapeType = 79 


AutoShapeType_DownArrowCallout AutoShapeType = 80 


AutoShapeType_LeftRightArrowCallout AutoShapeType = 81 


AutoShapeType_UpDownArrowCallout AutoShapeType = 82 


AutoShapeType_QuadArrowCallout AutoShapeType = 83 


AutoShapeType_Bevel AutoShapeType = 84 


AutoShapeType_LeftBracket AutoShapeType = 85 


AutoShapeType_RightBracket AutoShapeType = 86 


AutoShapeType_LeftBrace AutoShapeType = 87 


AutoShapeType_RightBrace AutoShapeType = 88 


AutoShapeType_LeftUpArrow AutoShapeType = 89 


AutoShapeType_BentUpArrow AutoShapeType = 90 


AutoShapeType_BentArrow AutoShapeType = 91 


AutoShapeType_Star24 AutoShapeType = 92 


AutoShapeType_StripedRightArrow AutoShapeType = 93 


AutoShapeType_NotchedRightArrow AutoShapeType = 94 


AutoShapeType_BlockArc AutoShapeType = 95 


AutoShapeType_SmileyFace AutoShapeType = 96 


AutoShapeType_VerticalScroll AutoShapeType = 97 


AutoShapeType_HorizontalScroll AutoShapeType = 98 


AutoShapeType_CircularArrow AutoShapeType = 99 

// A value that SHOULD NOT be used.
AutoShapeType_NotchedCircularArrow AutoShapeType = 100 


AutoShapeType_UTurnArrow AutoShapeType = 101 


AutoShapeType_CurvedRightArrow AutoShapeType = 102 


AutoShapeType_CurvedLeftArrow AutoShapeType = 103 


AutoShapeType_CurvedUpArrow AutoShapeType = 104 


AutoShapeType_CurvedDownArrow AutoShapeType = 105 


AutoShapeType_CloudCallout AutoShapeType = 106 


AutoShapeType_CurvedDownRibbon AutoShapeType = 107 


AutoShapeType_CurvedUpRibbon AutoShapeType = 108 


AutoShapeType_FlowChartProcess AutoShapeType = 109 


AutoShapeType_FlowChartDecision AutoShapeType = 110 


AutoShapeType_FlowChartData AutoShapeType = 111 


AutoShapeType_FlowChartPredefinedProcess AutoShapeType = 112 


AutoShapeType_FlowChartInternalStorage AutoShapeType = 113 


AutoShapeType_FlowChartDocument AutoShapeType = 114 


AutoShapeType_FlowChartMultidocument AutoShapeType = 115 


AutoShapeType_FlowChartTerminator AutoShapeType = 116 


AutoShapeType_FlowChartPreparation AutoShapeType = 117 


AutoShapeType_FlowChartManualInput AutoShapeType = 118 


AutoShapeType_FlowChartManualOperation AutoShapeType = 119 


AutoShapeType_FlowChartConnector AutoShapeType = 120 


AutoShapeType_FlowChartCard AutoShapeType = 121 


AutoShapeType_FlowChartPunchedTape AutoShapeType = 122 


AutoShapeType_FlowChartSummingJunction AutoShapeType = 123 


AutoShapeType_FlowChartOr AutoShapeType = 124 


AutoShapeType_FlowChartCollate AutoShapeType = 125 


AutoShapeType_FlowChartSort AutoShapeType = 126 


AutoShapeType_FlowChartExtract AutoShapeType = 127 


AutoShapeType_FlowChartMerge AutoShapeType = 128 


AutoShapeType_FlowChartOfflineStorage AutoShapeType = 129 


AutoShapeType_FlowChartStoredData AutoShapeType = 130 


AutoShapeType_FlowChartSequentialAccessStorage AutoShapeType = 131 


AutoShapeType_FlowChartMagneticDisk AutoShapeType = 132 


AutoShapeType_FlowChartDirectAccessStorage AutoShapeType = 133 


AutoShapeType_FlowChartDisplay AutoShapeType = 134 


AutoShapeType_FlowChartDelay AutoShapeType = 135 

// A plain text shape.
AutoShapeType_TextPlainText AutoShapeType = 136 

// An octagonal text shape.
AutoShapeType_TextStop AutoShapeType = 137 

// A triangular text shape pointing upwards.
AutoShapeType_TextTriangle AutoShapeType = 138 

// A triangular text shape pointing downwards.
AutoShapeType_TextTriangleInverted AutoShapeType = 139 

// A chevron text shape pointing upwards.
AutoShapeType_TextChevron AutoShapeType = 140 

// A chevron text shape pointing downwards.
AutoShapeType_TextChevronInverted AutoShapeType = 141 

// A circular text shape, as if reading an inscription on the inside of a ring.
AutoShapeType_TextRingInside AutoShapeType = 142 

// A circular text shape, as if reading an inscription on the outside of a ring.
AutoShapeType_TextRingOutside AutoShapeType = 143 

// An upward arching curved text shape.
AutoShapeType_TextArchUpCurve AutoShapeType = 144 

// A downward arching curved text shape.
AutoShapeType_TextArchDownCurve AutoShapeType = 145 

// A circular text shape.
AutoShapeType_TextCircleCurve AutoShapeType = 146 

// A text shape that resembles a button.
AutoShapeType_TextButtonCurve AutoShapeType = 147 

// An upward arching text shape.
AutoShapeType_TextArchUpPour AutoShapeType = 148 

// A downward arching text shape.
AutoShapeType_TextArchDownPour AutoShapeType = 149 

// A circular text shape.
AutoShapeType_TextCirclePour AutoShapeType = 150 

// A text shape that resembles a button.
AutoShapeType_TextButtonPour AutoShapeType = 151 

// An upward curving text shape.
AutoShapeType_TextCurveUp AutoShapeType = 152 

// A downward curving text shape.
AutoShapeType_TextCurveDown AutoShapeType = 153 

// A cascading text shape pointed upwards.
AutoShapeType_TextCascadeUp AutoShapeType = 154 

// A cascading text shape pointed downwards.
AutoShapeType_TextCascadeDown AutoShapeType = 155 

// A wavy text shape.
AutoShapeType_TextWave1 AutoShapeType = 156 

// A wavy text shape.
AutoShapeType_TextWave2 AutoShapeType = 157 

// A wavy text shape.
AutoShapeType_TextDoubleWave1 AutoShapeType = 158 

// A wavy text shape.
AutoShapeType_TextDoubleWave2 AutoShapeType = 159 

// A text shape that expands vertically in the middle.
AutoShapeType_TextInflate AutoShapeType = 160 

// A text shape that shrinks vertically in the middle.
AutoShapeType_TextDeflate AutoShapeType = 161 

// A text shape that expands downward in the middle.
AutoShapeType_TextInflateBottom AutoShapeType = 162 

// A text shape that shrinks upwards in the middle.
AutoShapeType_TextDeflateBottom AutoShapeType = 163 

// A text shape that expands upward in the middle.
AutoShapeType_TextInflateTop AutoShapeType = 164 

// A text shape that shrinks downward in the middle.
AutoShapeType_TextDeflateTop AutoShapeType = 165 

// A text shape where lower lines expand upward. Upper lines shrink to compensate.
AutoShapeType_TextDeflateInflate AutoShapeType = 166 

// A text shape where lines in the center expand vertically. Upper and lower lines shrink to compensate.
AutoShapeType_TextDeflateInflateDeflate AutoShapeType = 167 

// A text shape that shrinks vertically on the right side.
AutoShapeType_TextFadeRight AutoShapeType = 168 

// A text shape that shrinks vertically on the left side.
AutoShapeType_TextFadeLeft AutoShapeType = 169 

// A text shape that shrinks horizontally on top.
AutoShapeType_TextFadeUp AutoShapeType = 170 

// A text shape that shrinks horizontally on bottom.
AutoShapeType_TextFadeDown AutoShapeType = 171 

// An upward slanted text shape.
AutoShapeType_TextSlantUp AutoShapeType = 172 

// A downward slanted text shape.
AutoShapeType_TextSlantDown AutoShapeType = 173 

// A text shape that is curved upwards as if being read on the side of a can.
AutoShapeType_TextCanUp AutoShapeType = 174 

// A text shape that is curved downwards as if being read on the side of a can.
AutoShapeType_TextCanDown AutoShapeType = 175 


AutoShapeType_FlowChartAlternateProcess AutoShapeType = 176 


AutoShapeType_FlowChartOffpageConnector AutoShapeType = 177 


AutoShapeType_LineCalloutNoBorder1 AutoShapeType = 178 


AutoShapeType_LineCalloutWithAccentBar1 AutoShapeType = 179 


AutoShapeType_LineCalloutWithBorder1 AutoShapeType = 180 


AutoShapeType_LineCalloutWithBorderAndAccentBar1 AutoShapeType = 181 


AutoShapeType_LeftRightUpArrow AutoShapeType = 182 


AutoShapeType_Sun AutoShapeType = 183 


AutoShapeType_Moon AutoShapeType = 184 

// A shape enclosed in brackets.
AutoShapeType_DoubleBracket AutoShapeType = 185 

// A shape enclosed in braces.
AutoShapeType_DoubleBrace AutoShapeType = 186 


AutoShapeType_Star4 AutoShapeType = 187 


AutoShapeType_DoubleWave AutoShapeType = 188 


AutoShapeType_BlankActionButton AutoShapeType = 189 


AutoShapeType_HomeActionButton AutoShapeType = 190 


AutoShapeType_HelpActionButton AutoShapeType = 191 


AutoShapeType_InformationActionButton AutoShapeType = 192 


AutoShapeType_ForwardNextActionButton AutoShapeType = 193 


AutoShapeType_BackPreviousActionButton AutoShapeType = 194 


AutoShapeType_EndActionButton AutoShapeType = 195 


AutoShapeType_BeginningActionButton AutoShapeType = 196 


AutoShapeType_ReturnActionButton AutoShapeType = 197 


AutoShapeType_DocumentActionButton AutoShapeType = 198 


AutoShapeType_SoundActionButton AutoShapeType = 199 


AutoShapeType_MovieActionButton AutoShapeType = 200 

// This value SHOULD NOT be used.
AutoShapeType_HostControl AutoShapeType = 201 


AutoShapeType_TextBox AutoShapeType = 202 


AutoShapeType_Heptagon AutoShapeType = 2049 


AutoShapeType_Decagon AutoShapeType = 2050 


AutoShapeType_Dodecagon AutoShapeType = 2051 


AutoShapeType_Star6 AutoShapeType = 2052 


AutoShapeType_Star7 AutoShapeType = 2053 


AutoShapeType_Star10 AutoShapeType = 2054 


AutoShapeType_Star12 AutoShapeType = 2055 


AutoShapeType_RoundSingleCornerRectangle AutoShapeType = 2056 


AutoShapeType_RoundSameSideCornerRectangle AutoShapeType = 2057 


AutoShapeType_RoundDiagonalCornerRectangle AutoShapeType = 2058 


AutoShapeType_SnipRoundSingleCornerRectangle AutoShapeType = 2059 


AutoShapeType_SnipSingleCornerRectangle AutoShapeType = 2060 


AutoShapeType_SnipSameSideCornerRectangle AutoShapeType = 2061 


AutoShapeType_SnipDiagonalCornerRectangle AutoShapeType = 2062 


AutoShapeType_Teardrop AutoShapeType = 2063 


AutoShapeType_Pie AutoShapeType = 2064 


AutoShapeType_HalfFrame AutoShapeType = 2066 


AutoShapeType_L_Shape AutoShapeType = 2067 


AutoShapeType_DiagonalStripe AutoShapeType = 2068 


AutoShapeType_Chord AutoShapeType = 2069 


AutoShapeType_Cloud AutoShapeType = 2070 


AutoShapeType_MathPlus AutoShapeType = 2071 


AutoShapeType_MathMinus AutoShapeType = 2072 


AutoShapeType_MathMultiply AutoShapeType = 2073 


AutoShapeType_MathDivide AutoShapeType = 2074 


AutoShapeType_MathEqual AutoShapeType = 2075 


AutoShapeType_MathNotEqual AutoShapeType = 2076 


AutoShapeType_LineInv AutoShapeType = 2077 


AutoShapeType_NonIsoscelesTrapezoid AutoShapeType = 2078 


AutoShapeType_PieWedge AutoShapeType = 2079 


AutoShapeType_LeftCircularArrow AutoShapeType = 2080 


AutoShapeType_LeftRightCircularArrow AutoShapeType = 2081 


AutoShapeType_SwooshArrow AutoShapeType = 2082 


AutoShapeType_LeftRightRibbon AutoShapeType = 2083 


AutoShapeType_TextNoShape AutoShapeType = 2084 


AutoShapeType_Gear6 AutoShapeType = 2097 


AutoShapeType_Gear9 AutoShapeType = 2098 


AutoShapeType_Funnel AutoShapeType = 2099 


AutoShapeType_CornerTabs AutoShapeType = 2100 


AutoShapeType_SquareTabs AutoShapeType = 2101 


AutoShapeType_PlaqueTabs AutoShapeType = 2102 


AutoShapeType_ChartX AutoShapeType = 2103 


AutoShapeType_ChartStar AutoShapeType = 2104 


AutoShapeType_ChartPlus AutoShapeType = 2105 


AutoShapeType_Frame AutoShapeType = 2106 


AutoShapeType_Model3D AutoShapeType = 2107 

// There is no such type in Excel
AutoShapeType_RoundCallout AutoShapeType = 2108 

// There is no such type in Excel
AutoShapeType_TextArchLeftPour AutoShapeType = 2109 

// There is no such type in Excel
AutoShapeType_TextArchRightPour AutoShapeType = 2110 

// There is no such type in Excel
AutoShapeType_TextArchLeftCurve AutoShapeType = 2111 

// There is no such type in Excel
AutoShapeType_TextArchRightCurve AutoShapeType = 2112 


AutoShapeType_Unknown AutoShapeType = 4095 
)

func Int32ToAutoShapeType(value int32)(AutoShapeType ,error){
	switch value {
		case 0:  return AutoShapeType_NotPrimitive, nil  
		case 1:  return AutoShapeType_Rectangle, nil  
		case 2:  return AutoShapeType_RoundedRectangle, nil  
		case 3:  return AutoShapeType_Oval, nil  
		case 4:  return AutoShapeType_Diamond, nil  
		case 5:  return AutoShapeType_IsoscelesTriangle, nil  
		case 6:  return AutoShapeType_RightTriangle, nil  
		case 7:  return AutoShapeType_Parallelogram, nil  
		case 8:  return AutoShapeType_Trapezoid, nil  
		case 9:  return AutoShapeType_Hexagon, nil  
		case 10:  return AutoShapeType_Octagon, nil  
		case 11:  return AutoShapeType_Cross, nil  
		case 12:  return AutoShapeType_Star5, nil  
		case 13:  return AutoShapeType_RightArrow, nil  
		case 15:  return AutoShapeType_HomePlate, nil  
		case 16:  return AutoShapeType_Cube, nil  
		case 17:  return AutoShapeType_Balloon, nil  
		case 18:  return AutoShapeType_Seal, nil  
		case 19:  return AutoShapeType_Arc, nil  
		case 20:  return AutoShapeType_Line, nil  
		case 21:  return AutoShapeType_Plaque, nil  
		case 22:  return AutoShapeType_Can, nil  
		case 23:  return AutoShapeType_Donut, nil  
		case 24:  return AutoShapeType_TextSimple, nil  
		case 25:  return AutoShapeType_TextOctagon, nil  
		case 26:  return AutoShapeType_TextHexagon, nil  
		case 27:  return AutoShapeType_TextCurve, nil  
		case 28:  return AutoShapeType_TextWave, nil  
		case 29:  return AutoShapeType_TextRing, nil  
		case 30:  return AutoShapeType_TextOnCurve, nil  
		case 31:  return AutoShapeType_msosptTextOnRing, nil  
		case 32:  return AutoShapeType_StraightConnector, nil  
		case 33:  return AutoShapeType_BentConnector2, nil  
		case 34:  return AutoShapeType_ElbowConnector, nil  
		case 35:  return AutoShapeType_BentConnector4, nil  
		case 36:  return AutoShapeType_BentConnector5, nil  
		case 37:  return AutoShapeType_CurvedConnector2, nil  
		case 38:  return AutoShapeType_CurvedConnector, nil  
		case 39:  return AutoShapeType_CurvedConnector4, nil  
		case 40:  return AutoShapeType_CurvedConnector5, nil  
		case 41:  return AutoShapeType_LineCalloutNoBorder2, nil  
		case 42:  return AutoShapeType_LineCalloutNoBorder3, nil  
		case 43:  return AutoShapeType_LineCalloutNoBorder4, nil  
		case 44:  return AutoShapeType_LineCalloutWithAccentBar2, nil  
		case 45:  return AutoShapeType_LineCalloutWithAccentBar3, nil  
		case 46:  return AutoShapeType_LineCalloutWithAccentBar4, nil  
		case 47:  return AutoShapeType_LineCalloutWithBorder2, nil  
		case 48:  return AutoShapeType_LineCalloutWithBorder3, nil  
		case 49:  return AutoShapeType_LineCalloutWithBorder4, nil  
		case 50:  return AutoShapeType_LineCalloutWithBorderAndAccentBar2, nil  
		case 51:  return AutoShapeType_LineCalloutWithBorderAndAccentBar3, nil  
		case 52:  return AutoShapeType_LineCalloutWithBorderAndAccentBar4, nil  
		case 53:  return AutoShapeType_DownRibbon, nil  
		case 54:  return AutoShapeType_UpRibbon, nil  
		case 55:  return AutoShapeType_Chevron, nil  
		case 56:  return AutoShapeType_RegularPentagon, nil  
		case 57:  return AutoShapeType_NoSymbol, nil  
		case 58:  return AutoShapeType_Star8, nil  
		case 59:  return AutoShapeType_Star16, nil  
		case 60:  return AutoShapeType_Star32, nil  
		case 61:  return AutoShapeType_RectangularCallout, nil  
		case 62:  return AutoShapeType_RoundedRectangularCallout, nil  
		case 63:  return AutoShapeType_OvalCallout, nil  
		case 64:  return AutoShapeType_Wave, nil  
		case 65:  return AutoShapeType_FoldedCorner, nil  
		case 66:  return AutoShapeType_LeftArrow, nil  
		case 67:  return AutoShapeType_DownArrow, nil  
		case 68:  return AutoShapeType_UpArrow, nil  
		case 69:  return AutoShapeType_LeftRightArrow, nil  
		case 70:  return AutoShapeType_UpDownArrow, nil  
		case 71:  return AutoShapeType_Explosion1, nil  
		case 72:  return AutoShapeType_Explosion2, nil  
		case 73:  return AutoShapeType_LightningBolt, nil  
		case 74:  return AutoShapeType_Heart, nil  
		case 75:  return AutoShapeType_PictureFrame, nil  
		case 76:  return AutoShapeType_QuadArrow, nil  
		case 77:  return AutoShapeType_LeftArrowCallout, nil  
		case 78:  return AutoShapeType_RightArrowCallout, nil  
		case 79:  return AutoShapeType_UpArrowCallout, nil  
		case 80:  return AutoShapeType_DownArrowCallout, nil  
		case 81:  return AutoShapeType_LeftRightArrowCallout, nil  
		case 82:  return AutoShapeType_UpDownArrowCallout, nil  
		case 83:  return AutoShapeType_QuadArrowCallout, nil  
		case 84:  return AutoShapeType_Bevel, nil  
		case 85:  return AutoShapeType_LeftBracket, nil  
		case 86:  return AutoShapeType_RightBracket, nil  
		case 87:  return AutoShapeType_LeftBrace, nil  
		case 88:  return AutoShapeType_RightBrace, nil  
		case 89:  return AutoShapeType_LeftUpArrow, nil  
		case 90:  return AutoShapeType_BentUpArrow, nil  
		case 91:  return AutoShapeType_BentArrow, nil  
		case 92:  return AutoShapeType_Star24, nil  
		case 93:  return AutoShapeType_StripedRightArrow, nil  
		case 94:  return AutoShapeType_NotchedRightArrow, nil  
		case 95:  return AutoShapeType_BlockArc, nil  
		case 96:  return AutoShapeType_SmileyFace, nil  
		case 97:  return AutoShapeType_VerticalScroll, nil  
		case 98:  return AutoShapeType_HorizontalScroll, nil  
		case 99:  return AutoShapeType_CircularArrow, nil  
		case 100:  return AutoShapeType_NotchedCircularArrow, nil  
		case 101:  return AutoShapeType_UTurnArrow, nil  
		case 102:  return AutoShapeType_CurvedRightArrow, nil  
		case 103:  return AutoShapeType_CurvedLeftArrow, nil  
		case 104:  return AutoShapeType_CurvedUpArrow, nil  
		case 105:  return AutoShapeType_CurvedDownArrow, nil  
		case 106:  return AutoShapeType_CloudCallout, nil  
		case 107:  return AutoShapeType_CurvedDownRibbon, nil  
		case 108:  return AutoShapeType_CurvedUpRibbon, nil  
		case 109:  return AutoShapeType_FlowChartProcess, nil  
		case 110:  return AutoShapeType_FlowChartDecision, nil  
		case 111:  return AutoShapeType_FlowChartData, nil  
		case 112:  return AutoShapeType_FlowChartPredefinedProcess, nil  
		case 113:  return AutoShapeType_FlowChartInternalStorage, nil  
		case 114:  return AutoShapeType_FlowChartDocument, nil  
		case 115:  return AutoShapeType_FlowChartMultidocument, nil  
		case 116:  return AutoShapeType_FlowChartTerminator, nil  
		case 117:  return AutoShapeType_FlowChartPreparation, nil  
		case 118:  return AutoShapeType_FlowChartManualInput, nil  
		case 119:  return AutoShapeType_FlowChartManualOperation, nil  
		case 120:  return AutoShapeType_FlowChartConnector, nil  
		case 121:  return AutoShapeType_FlowChartCard, nil  
		case 122:  return AutoShapeType_FlowChartPunchedTape, nil  
		case 123:  return AutoShapeType_FlowChartSummingJunction, nil  
		case 124:  return AutoShapeType_FlowChartOr, nil  
		case 125:  return AutoShapeType_FlowChartCollate, nil  
		case 126:  return AutoShapeType_FlowChartSort, nil  
		case 127:  return AutoShapeType_FlowChartExtract, nil  
		case 128:  return AutoShapeType_FlowChartMerge, nil  
		case 129:  return AutoShapeType_FlowChartOfflineStorage, nil  
		case 130:  return AutoShapeType_FlowChartStoredData, nil  
		case 131:  return AutoShapeType_FlowChartSequentialAccessStorage, nil  
		case 132:  return AutoShapeType_FlowChartMagneticDisk, nil  
		case 133:  return AutoShapeType_FlowChartDirectAccessStorage, nil  
		case 134:  return AutoShapeType_FlowChartDisplay, nil  
		case 135:  return AutoShapeType_FlowChartDelay, nil  
		case 136:  return AutoShapeType_TextPlainText, nil  
		case 137:  return AutoShapeType_TextStop, nil  
		case 138:  return AutoShapeType_TextTriangle, nil  
		case 139:  return AutoShapeType_TextTriangleInverted, nil  
		case 140:  return AutoShapeType_TextChevron, nil  
		case 141:  return AutoShapeType_TextChevronInverted, nil  
		case 142:  return AutoShapeType_TextRingInside, nil  
		case 143:  return AutoShapeType_TextRingOutside, nil  
		case 144:  return AutoShapeType_TextArchUpCurve, nil  
		case 145:  return AutoShapeType_TextArchDownCurve, nil  
		case 146:  return AutoShapeType_TextCircleCurve, nil  
		case 147:  return AutoShapeType_TextButtonCurve, nil  
		case 148:  return AutoShapeType_TextArchUpPour, nil  
		case 149:  return AutoShapeType_TextArchDownPour, nil  
		case 150:  return AutoShapeType_TextCirclePour, nil  
		case 151:  return AutoShapeType_TextButtonPour, nil  
		case 152:  return AutoShapeType_TextCurveUp, nil  
		case 153:  return AutoShapeType_TextCurveDown, nil  
		case 154:  return AutoShapeType_TextCascadeUp, nil  
		case 155:  return AutoShapeType_TextCascadeDown, nil  
		case 156:  return AutoShapeType_TextWave1, nil  
		case 157:  return AutoShapeType_TextWave2, nil  
		case 158:  return AutoShapeType_TextDoubleWave1, nil  
		case 159:  return AutoShapeType_TextDoubleWave2, nil  
		case 160:  return AutoShapeType_TextInflate, nil  
		case 161:  return AutoShapeType_TextDeflate, nil  
		case 162:  return AutoShapeType_TextInflateBottom, nil  
		case 163:  return AutoShapeType_TextDeflateBottom, nil  
		case 164:  return AutoShapeType_TextInflateTop, nil  
		case 165:  return AutoShapeType_TextDeflateTop, nil  
		case 166:  return AutoShapeType_TextDeflateInflate, nil  
		case 167:  return AutoShapeType_TextDeflateInflateDeflate, nil  
		case 168:  return AutoShapeType_TextFadeRight, nil  
		case 169:  return AutoShapeType_TextFadeLeft, nil  
		case 170:  return AutoShapeType_TextFadeUp, nil  
		case 171:  return AutoShapeType_TextFadeDown, nil  
		case 172:  return AutoShapeType_TextSlantUp, nil  
		case 173:  return AutoShapeType_TextSlantDown, nil  
		case 174:  return AutoShapeType_TextCanUp, nil  
		case 175:  return AutoShapeType_TextCanDown, nil  
		case 176:  return AutoShapeType_FlowChartAlternateProcess, nil  
		case 177:  return AutoShapeType_FlowChartOffpageConnector, nil  
		case 178:  return AutoShapeType_LineCalloutNoBorder1, nil  
		case 179:  return AutoShapeType_LineCalloutWithAccentBar1, nil  
		case 180:  return AutoShapeType_LineCalloutWithBorder1, nil  
		case 181:  return AutoShapeType_LineCalloutWithBorderAndAccentBar1, nil  
		case 182:  return AutoShapeType_LeftRightUpArrow, nil  
		case 183:  return AutoShapeType_Sun, nil  
		case 184:  return AutoShapeType_Moon, nil  
		case 185:  return AutoShapeType_DoubleBracket, nil  
		case 186:  return AutoShapeType_DoubleBrace, nil  
		case 187:  return AutoShapeType_Star4, nil  
		case 188:  return AutoShapeType_DoubleWave, nil  
		case 189:  return AutoShapeType_BlankActionButton, nil  
		case 190:  return AutoShapeType_HomeActionButton, nil  
		case 191:  return AutoShapeType_HelpActionButton, nil  
		case 192:  return AutoShapeType_InformationActionButton, nil  
		case 193:  return AutoShapeType_ForwardNextActionButton, nil  
		case 194:  return AutoShapeType_BackPreviousActionButton, nil  
		case 195:  return AutoShapeType_EndActionButton, nil  
		case 196:  return AutoShapeType_BeginningActionButton, nil  
		case 197:  return AutoShapeType_ReturnActionButton, nil  
		case 198:  return AutoShapeType_DocumentActionButton, nil  
		case 199:  return AutoShapeType_SoundActionButton, nil  
		case 200:  return AutoShapeType_MovieActionButton, nil  
		case 201:  return AutoShapeType_HostControl, nil  
		case 202:  return AutoShapeType_TextBox, nil  
		case 2049:  return AutoShapeType_Heptagon, nil  
		case 2050:  return AutoShapeType_Decagon, nil  
		case 2051:  return AutoShapeType_Dodecagon, nil  
		case 2052:  return AutoShapeType_Star6, nil  
		case 2053:  return AutoShapeType_Star7, nil  
		case 2054:  return AutoShapeType_Star10, nil  
		case 2055:  return AutoShapeType_Star12, nil  
		case 2056:  return AutoShapeType_RoundSingleCornerRectangle, nil  
		case 2057:  return AutoShapeType_RoundSameSideCornerRectangle, nil  
		case 2058:  return AutoShapeType_RoundDiagonalCornerRectangle, nil  
		case 2059:  return AutoShapeType_SnipRoundSingleCornerRectangle, nil  
		case 2060:  return AutoShapeType_SnipSingleCornerRectangle, nil  
		case 2061:  return AutoShapeType_SnipSameSideCornerRectangle, nil  
		case 2062:  return AutoShapeType_SnipDiagonalCornerRectangle, nil  
		case 2063:  return AutoShapeType_Teardrop, nil  
		case 2064:  return AutoShapeType_Pie, nil  
		case 2066:  return AutoShapeType_HalfFrame, nil  
		case 2067:  return AutoShapeType_L_Shape, nil  
		case 2068:  return AutoShapeType_DiagonalStripe, nil  
		case 2069:  return AutoShapeType_Chord, nil  
		case 2070:  return AutoShapeType_Cloud, nil  
		case 2071:  return AutoShapeType_MathPlus, nil  
		case 2072:  return AutoShapeType_MathMinus, nil  
		case 2073:  return AutoShapeType_MathMultiply, nil  
		case 2074:  return AutoShapeType_MathDivide, nil  
		case 2075:  return AutoShapeType_MathEqual, nil  
		case 2076:  return AutoShapeType_MathNotEqual, nil  
		case 2077:  return AutoShapeType_LineInv, nil  
		case 2078:  return AutoShapeType_NonIsoscelesTrapezoid, nil  
		case 2079:  return AutoShapeType_PieWedge, nil  
		case 2080:  return AutoShapeType_LeftCircularArrow, nil  
		case 2081:  return AutoShapeType_LeftRightCircularArrow, nil  
		case 2082:  return AutoShapeType_SwooshArrow, nil  
		case 2083:  return AutoShapeType_LeftRightRibbon, nil  
		case 2084:  return AutoShapeType_TextNoShape, nil  
		case 2097:  return AutoShapeType_Gear6, nil  
		case 2098:  return AutoShapeType_Gear9, nil  
		case 2099:  return AutoShapeType_Funnel, nil  
		case 2100:  return AutoShapeType_CornerTabs, nil  
		case 2101:  return AutoShapeType_SquareTabs, nil  
		case 2102:  return AutoShapeType_PlaqueTabs, nil  
		case 2103:  return AutoShapeType_ChartX, nil  
		case 2104:  return AutoShapeType_ChartStar, nil  
		case 2105:  return AutoShapeType_ChartPlus, nil  
		case 2106:  return AutoShapeType_Frame, nil  
		case 2107:  return AutoShapeType_Model3D, nil  
		case 2108:  return AutoShapeType_RoundCallout, nil  
		case 2109:  return AutoShapeType_TextArchLeftPour, nil  
		case 2110:  return AutoShapeType_TextArchRightPour, nil  
		case 2111:  return AutoShapeType_TextArchLeftCurve, nil  
		case 2112:  return AutoShapeType_TextArchRightCurve, nil  
		case 4095:  return AutoShapeType_Unknown, nil  
		default:
			return 0 ,fmt.Errorf("invalid AutoShapeType value: %d", value)
	}
}

/**************Enum BevelPresetType *****************/

// Represents a preset for a type of bevel which can be applied to a shape in 3D.
type BevelPresetType int32

const(
// No bevel
BevelPresetType_None BevelPresetType = 0 

// Angle
BevelPresetType_Angle BevelPresetType = 1 

// Art deco
BevelPresetType_ArtDeco BevelPresetType = 2 

// Circle
BevelPresetType_Circle BevelPresetType = 3 

// Convex
BevelPresetType_Convex BevelPresetType = 4 

// Cool slant
BevelPresetType_CoolSlant BevelPresetType = 5 

// Cross
BevelPresetType_Cross BevelPresetType = 6 

// Divot
BevelPresetType_Divot BevelPresetType = 7 

// Hard edge
BevelPresetType_HardEdge BevelPresetType = 8 

// Relaxed inset
BevelPresetType_RelaxedInset BevelPresetType = 9 

// Riblet
BevelPresetType_Riblet BevelPresetType = 10 

// Slope
BevelPresetType_Slope BevelPresetType = 11 

// Soft round
BevelPresetType_SoftRound BevelPresetType = 12 
)

func Int32ToBevelPresetType(value int32)(BevelPresetType ,error){
	switch value {
		case 0:  return BevelPresetType_None, nil  
		case 1:  return BevelPresetType_Angle, nil  
		case 2:  return BevelPresetType_ArtDeco, nil  
		case 3:  return BevelPresetType_Circle, nil  
		case 4:  return BevelPresetType_Convex, nil  
		case 5:  return BevelPresetType_CoolSlant, nil  
		case 6:  return BevelPresetType_Cross, nil  
		case 7:  return BevelPresetType_Divot, nil  
		case 8:  return BevelPresetType_HardEdge, nil  
		case 9:  return BevelPresetType_RelaxedInset, nil  
		case 10:  return BevelPresetType_Riblet, nil  
		case 11:  return BevelPresetType_Slope, nil  
		case 12:  return BevelPresetType_SoftRound, nil  
		default:
			return 0 ,fmt.Errorf("invalid BevelPresetType value: %d", value)
	}
}

/**************Enum BevelType *****************/

// Represents a preset for a type of bevel which can be applied to a shape in 3D.
type BevelType int32

const(
// No bevel
BevelType_None BevelType = 0 

// Angle
BevelType_Angle BevelType = 1 

// Art deco
BevelType_ArtDeco BevelType = 2 

// Circle
BevelType_Circle BevelType = 3 

// Convex
BevelType_Convex BevelType = 4 

// Cool slant
BevelType_CoolSlant BevelType = 5 

// Cross
BevelType_Cross BevelType = 6 

// Divot
BevelType_Divot BevelType = 7 

// Hard edge
BevelType_HardEdge BevelType = 8 

// Relaxed inset
BevelType_RelaxedInset BevelType = 9 

// Riblet
BevelType_Riblet BevelType = 10 

// Slope
BevelType_Slope BevelType = 11 

// Soft round
BevelType_SoftRound BevelType = 12 
)

func Int32ToBevelType(value int32)(BevelType ,error){
	switch value {
		case 0:  return BevelType_None, nil  
		case 1:  return BevelType_Angle, nil  
		case 2:  return BevelType_ArtDeco, nil  
		case 3:  return BevelType_Circle, nil  
		case 4:  return BevelType_Convex, nil  
		case 5:  return BevelType_CoolSlant, nil  
		case 6:  return BevelType_Cross, nil  
		case 7:  return BevelType_Divot, nil  
		case 8:  return BevelType_HardEdge, nil  
		case 9:  return BevelType_RelaxedInset, nil  
		case 10:  return BevelType_Riblet, nil  
		case 11:  return BevelType_Slope, nil  
		case 12:  return BevelType_SoftRound, nil  
		default:
			return 0 ,fmt.Errorf("invalid BevelType value: %d", value)
	}
}

/**************Enum CheckValueType *****************/

// Represents the check value type of the check box.
type CheckValueType int32

const(
// UnChecked
CheckValueType_UnChecked CheckValueType = 0 

// Checked
CheckValueType_Checked CheckValueType = 1 

// Mixed
CheckValueType_Mixed CheckValueType = 2 
)

func Int32ToCheckValueType(value int32)(CheckValueType ,error){
	switch value {
		case 0:  return CheckValueType_UnChecked, nil  
		case 1:  return CheckValueType_Checked, nil  
		case 2:  return CheckValueType_Mixed, nil  
		default:
			return 0 ,fmt.Errorf("invalid CheckValueType value: %d", value)
	}
}

/**************Enum DataLabelShapeType *****************/

// Specifies the preset shape geometry that is to be used for a chart.
type DataLabelShapeType int32

const(
// Represents the rectangle shape.
DataLabelShapeType_Rect DataLabelShapeType = 0 

// Represents the round rectangle shape.
DataLabelShapeType_RoundRect DataLabelShapeType = 1 

// Represents the ellipse shape.
DataLabelShapeType_Ellipse DataLabelShapeType = 2 

// Represents the right arrow callout shape.
DataLabelShapeType_RightArrowCallout DataLabelShapeType = 3 

// Represents the down arrow callout shape.
DataLabelShapeType_DownArrowCallout DataLabelShapeType = 4 

// Represents the left arrow callout shape.
DataLabelShapeType_LeftArrowCallout DataLabelShapeType = 5 

// Represents the up arrow callout shape.
DataLabelShapeType_UpArrowCallout DataLabelShapeType = 6 

// Represents the wedge rectangle callout shape.
DataLabelShapeType_WedgeRectCallout DataLabelShapeType = 7 

// Represents the wedge round rectangle callout shape.
DataLabelShapeType_WedgeRoundRectCallout DataLabelShapeType = 8 

// Represents the wedge ellipse callout shape.
DataLabelShapeType_WedgeEllipseCallout DataLabelShapeType = 9 

// Represents the line callout shape.
DataLabelShapeType_LineCallout DataLabelShapeType = 10 

// Represents the bent line callout  shape.
DataLabelShapeType_BentLineCallout DataLabelShapeType = 11 

// Represents the line with accent bar callout shape.
DataLabelShapeType_LineWithAccentBarCallout DataLabelShapeType = 12 

// Represents the bent line with accent bar callout shape.
DataLabelShapeType_BentLineWithAccentBarCallout DataLabelShapeType = 13 

// This type is only used for special file processing
DataLabelShapeType_Line DataLabelShapeType = 14 
)

func Int32ToDataLabelShapeType(value int32)(DataLabelShapeType ,error){
	switch value {
		case 0:  return DataLabelShapeType_Rect, nil  
		case 1:  return DataLabelShapeType_RoundRect, nil  
		case 2:  return DataLabelShapeType_Ellipse, nil  
		case 3:  return DataLabelShapeType_RightArrowCallout, nil  
		case 4:  return DataLabelShapeType_DownArrowCallout, nil  
		case 5:  return DataLabelShapeType_LeftArrowCallout, nil  
		case 6:  return DataLabelShapeType_UpArrowCallout, nil  
		case 7:  return DataLabelShapeType_WedgeRectCallout, nil  
		case 8:  return DataLabelShapeType_WedgeRoundRectCallout, nil  
		case 9:  return DataLabelShapeType_WedgeEllipseCallout, nil  
		case 10:  return DataLabelShapeType_LineCallout, nil  
		case 11:  return DataLabelShapeType_BentLineCallout, nil  
		case 12:  return DataLabelShapeType_LineWithAccentBarCallout, nil  
		case 13:  return DataLabelShapeType_BentLineWithAccentBarCallout, nil  
		case 14:  return DataLabelShapeType_Line, nil  
		default:
			return 0 ,fmt.Errorf("invalid DataLabelShapeType value: %d", value)
	}
}

/**************Enum FillPattern *****************/

// Enumerates shape fill pattern types.
type FillPattern int32

const(
// Represents no background.
FillPattern_None FillPattern = 0 

// Represents solid pattern.
FillPattern_Solid FillPattern = 1 

// Represents 5% gray pattern.
FillPattern_Gray5 FillPattern = 2 

// Represents 10% gray pattern.
FillPattern_Gray10 FillPattern = 3 

// Represents 20% gray pattern.
FillPattern_Gray20 FillPattern = 4 

// Represents 30% gray pattern.
FillPattern_Gray30 FillPattern = 5 

// Represents 40% gray pattern.
FillPattern_Gray40 FillPattern = 6 

// Represents 50% gray pattern.
FillPattern_Gray50 FillPattern = 7 

// Represents 60% gray pattern.
FillPattern_Gray60 FillPattern = 8 

// Represents 70% gray pattern.
FillPattern_Gray70 FillPattern = 9 

// Represents 75% gray pattern.
FillPattern_Gray75 FillPattern = 10 

// Represents 80% gray pattern.
FillPattern_Gray80 FillPattern = 11 

// Represents 90% gray pattern.
FillPattern_Gray90 FillPattern = 12 

// Represents 25% gray pattern.
FillPattern_Gray25 FillPattern = 13 

// Represents light downward diagonal pattern.
FillPattern_LightDownwardDiagonal FillPattern = 14 

// Represents light upward diagonal pattern.
FillPattern_LightUpwardDiagonal FillPattern = 15 

// Represents dark downward diagonal pattern.
FillPattern_DarkDownwardDiagonal FillPattern = 16 

// Represents dark upward diagonal pattern.
FillPattern_DarkUpwardDiagonal FillPattern = 17 

// Represents wide downward diagonal pattern.
FillPattern_WideDownwardDiagonal FillPattern = 18 

// Represents wide upward diagonal pattern.
FillPattern_WideUpwardDiagonal FillPattern = 19 

// Represents light vertical pattern.
FillPattern_LightVertical FillPattern = 20 

// Represents light horizontal pattern.
FillPattern_LightHorizontal FillPattern = 21 

// Represents narrow vertical pattern.
FillPattern_NarrowVertical FillPattern = 22 

// Represents narrow horizontal pattern.
FillPattern_NarrowHorizontal FillPattern = 23 

// Represents dark vertical pattern.
FillPattern_DarkVertical FillPattern = 24 

// Represents dark horizontal pattern.
FillPattern_DarkHorizontal FillPattern = 25 

// Represents dashed downward diagonal pattern.
FillPattern_DashedDownwardDiagonal FillPattern = 26 

// Represents dashed upward diagonal pattern.
FillPattern_DashedUpwardDiagonal FillPattern = 27 

// Represents dashed vertical pattern.
FillPattern_DashedVertical FillPattern = 28 

// Represents dashed horizontal pattern.
FillPattern_DashedHorizontal FillPattern = 29 

// Represents small confetti pattern.
FillPattern_SmallConfetti FillPattern = 30 

// Represents large confetti pattern.
FillPattern_LargeConfetti FillPattern = 31 

// Represents zig zag pattern.
FillPattern_ZigZag FillPattern = 32 

// Represents wave pattern.
FillPattern_Wave FillPattern = 33 

// Represents diagonal brick pattern.
FillPattern_DiagonalBrick FillPattern = 34 

// Represents horizontal brick pattern.
FillPattern_HorizontalBrick FillPattern = 35 

// Represents weave pattern.
FillPattern_Weave FillPattern = 36 

// Represents plaid pattern.
FillPattern_Plaid FillPattern = 37 

// Represents divot pattern.
FillPattern_Divot FillPattern = 38 

// Represents dotted grid pattern.
FillPattern_DottedGrid FillPattern = 39 

// Represents dotted diamond pattern.
FillPattern_DottedDiamond FillPattern = 40 

// Represents shingle pattern.
FillPattern_Shingle FillPattern = 41 

// Represents trellis pattern.
FillPattern_Trellis FillPattern = 42 

// Represents sphere pattern.
FillPattern_Sphere FillPattern = 43 

// Represents small grid pattern.
FillPattern_SmallGrid FillPattern = 44 

// Represents large grid pattern.
FillPattern_LargeGrid FillPattern = 45 

// Represents small checker board pattern.
FillPattern_SmallCheckerBoard FillPattern = 46 

// Represents large checker board pattern.
FillPattern_LargeCheckerBoard FillPattern = 47 

// Represents outlined diamond pattern.
FillPattern_OutlinedDiamond FillPattern = 48 

// Represents solid diamond pattern.
FillPattern_SolidDiamond FillPattern = 49 

// Represents unknown pattern.
FillPattern_Unknown FillPattern = 50 
)

func Int32ToFillPattern(value int32)(FillPattern ,error){
	switch value {
		case 0:  return FillPattern_None, nil  
		case 1:  return FillPattern_Solid, nil  
		case 2:  return FillPattern_Gray5, nil  
		case 3:  return FillPattern_Gray10, nil  
		case 4:  return FillPattern_Gray20, nil  
		case 5:  return FillPattern_Gray30, nil  
		case 6:  return FillPattern_Gray40, nil  
		case 7:  return FillPattern_Gray50, nil  
		case 8:  return FillPattern_Gray60, nil  
		case 9:  return FillPattern_Gray70, nil  
		case 10:  return FillPattern_Gray75, nil  
		case 11:  return FillPattern_Gray80, nil  
		case 12:  return FillPattern_Gray90, nil  
		case 13:  return FillPattern_Gray25, nil  
		case 14:  return FillPattern_LightDownwardDiagonal, nil  
		case 15:  return FillPattern_LightUpwardDiagonal, nil  
		case 16:  return FillPattern_DarkDownwardDiagonal, nil  
		case 17:  return FillPattern_DarkUpwardDiagonal, nil  
		case 18:  return FillPattern_WideDownwardDiagonal, nil  
		case 19:  return FillPattern_WideUpwardDiagonal, nil  
		case 20:  return FillPattern_LightVertical, nil  
		case 21:  return FillPattern_LightHorizontal, nil  
		case 22:  return FillPattern_NarrowVertical, nil  
		case 23:  return FillPattern_NarrowHorizontal, nil  
		case 24:  return FillPattern_DarkVertical, nil  
		case 25:  return FillPattern_DarkHorizontal, nil  
		case 26:  return FillPattern_DashedDownwardDiagonal, nil  
		case 27:  return FillPattern_DashedUpwardDiagonal, nil  
		case 28:  return FillPattern_DashedVertical, nil  
		case 29:  return FillPattern_DashedHorizontal, nil  
		case 30:  return FillPattern_SmallConfetti, nil  
		case 31:  return FillPattern_LargeConfetti, nil  
		case 32:  return FillPattern_ZigZag, nil  
		case 33:  return FillPattern_Wave, nil  
		case 34:  return FillPattern_DiagonalBrick, nil  
		case 35:  return FillPattern_HorizontalBrick, nil  
		case 36:  return FillPattern_Weave, nil  
		case 37:  return FillPattern_Plaid, nil  
		case 38:  return FillPattern_Divot, nil  
		case 39:  return FillPattern_DottedGrid, nil  
		case 40:  return FillPattern_DottedDiamond, nil  
		case 41:  return FillPattern_Shingle, nil  
		case 42:  return FillPattern_Trellis, nil  
		case 43:  return FillPattern_Sphere, nil  
		case 44:  return FillPattern_SmallGrid, nil  
		case 45:  return FillPattern_LargeGrid, nil  
		case 46:  return FillPattern_SmallCheckerBoard, nil  
		case 47:  return FillPattern_LargeCheckerBoard, nil  
		case 48:  return FillPattern_OutlinedDiamond, nil  
		case 49:  return FillPattern_SolidDiamond, nil  
		case 50:  return FillPattern_Unknown, nil  
		default:
			return 0 ,fmt.Errorf("invalid FillPattern value: %d", value)
	}
}

/**************Enum FillPictureType *****************/

// Represents the picture fill type.
type FillPictureType int32

const(
// Stretch
FillPictureType_Stretch FillPictureType = 0 

// Stack
FillPictureType_Stack FillPictureType = 1 

// StackAndScale
FillPictureType_StackAndScale FillPictureType = 2 
)

func Int32ToFillPictureType(value int32)(FillPictureType ,error){
	switch value {
		case 0:  return FillPictureType_Stretch, nil  
		case 1:  return FillPictureType_Stack, nil  
		case 2:  return FillPictureType_StackAndScale, nil  
		default:
			return 0 ,fmt.Errorf("invalid FillPictureType value: %d", value)
	}
}

/**************Enum FillType *****************/

// Fill format type.
type FillType int32

const(
// Represents automatic formatting type.
FillType_Automatic FillType = 0 

// Represents none formatting type.
FillType_None FillType = 1 

// Solid fill format.
FillType_Solid FillType = 2 

// Gradient fill format.
FillType_Gradient FillType = 3 

// Texture fill format(includes picture fill).
FillType_Texture FillType = 4 

// Pattern fill format.
FillType_Pattern FillType = 5 

// Inherit the fill properties of the group.
FillType_Group FillType = 6 
)

func Int32ToFillType(value int32)(FillType ,error){
	switch value {
		case 0:  return FillType_Automatic, nil  
		case 1:  return FillType_None, nil  
		case 2:  return FillType_Solid, nil  
		case 3:  return FillType_Gradient, nil  
		case 4:  return FillType_Texture, nil  
		case 5:  return FillType_Pattern, nil  
		case 6:  return FillType_Group, nil  
		default:
			return 0 ,fmt.Errorf("invalid FillType value: %d", value)
	}
}

/**************Enum FormatSetType *****************/

// Fill format set type.
type FormatSetType int32

const(
// No Fill format.
FormatSetType_None FormatSetType = 0 

// Gradient fill format.
FormatSetType_IsGradientSet FormatSetType = 1 

// Texture fill format.
FormatSetType_IsTextureSet FormatSetType = 2 

// Pattern fill format.
FormatSetType_IsPatternSet FormatSetType = 3 
)

func Int32ToFormatSetType(value int32)(FormatSetType ,error){
	switch value {
		case 0:  return FormatSetType_None, nil  
		case 1:  return FormatSetType_IsGradientSet, nil  
		case 2:  return FormatSetType_IsTextureSet, nil  
		case 3:  return FormatSetType_IsPatternSet, nil  
		default:
			return 0 ,fmt.Errorf("invalid FormatSetType value: %d", value)
	}
}

/**************Enum GradientColorType *****************/

// Represents the gradient color type for the specified fill.
type GradientColorType int32

const(
// No gradient color
GradientColorType_None GradientColorType = 0 

// One gradient color
GradientColorType_OneColor GradientColorType = 1 

// Preset gradient colors
GradientColorType_PresetColors GradientColorType = 2 

// Two gradient colors
GradientColorType_TwoColors GradientColorType = 3 
)

func Int32ToGradientColorType(value int32)(GradientColorType ,error){
	switch value {
		case 0:  return GradientColorType_None, nil  
		case 1:  return GradientColorType_OneColor, nil  
		case 2:  return GradientColorType_PresetColors, nil  
		case 3:  return GradientColorType_TwoColors, nil  
		default:
			return 0 ,fmt.Errorf("invalid GradientColorType value: %d", value)
	}
}

/**************Enum GradientDirectionType *****************/

// Represents all direction type of gradient.
type GradientDirectionType int32

const(
// FromUpperLeftCorner
GradientDirectionType_FromUpperLeftCorner GradientDirectionType = 0 

// FromUpperRightCorner
GradientDirectionType_FromUpperRightCorner GradientDirectionType = 1 

// FromLowerLeftCorner
GradientDirectionType_FromLowerLeftCorner GradientDirectionType = 2 

// FromLowerRightCorner
GradientDirectionType_FromLowerRightCorner GradientDirectionType = 3 

// FromCenter
GradientDirectionType_FromCenter GradientDirectionType = 4 

// Unknown
GradientDirectionType_Unknown GradientDirectionType = 5 
)

func Int32ToGradientDirectionType(value int32)(GradientDirectionType ,error){
	switch value {
		case 0:  return GradientDirectionType_FromUpperLeftCorner, nil  
		case 1:  return GradientDirectionType_FromUpperRightCorner, nil  
		case 2:  return GradientDirectionType_FromLowerLeftCorner, nil  
		case 3:  return GradientDirectionType_FromLowerRightCorner, nil  
		case 4:  return GradientDirectionType_FromCenter, nil  
		case 5:  return GradientDirectionType_Unknown, nil  
		default:
			return 0 ,fmt.Errorf("invalid GradientDirectionType value: %d", value)
	}
}

/**************Enum GradientFillType *****************/

// Represents all Gradient fill type.
type GradientFillType int32

const(
// Linear
GradientFillType_Linear GradientFillType = 0 

// Radial
GradientFillType_Radial GradientFillType = 1 

// Rectangle
GradientFillType_Rectangle GradientFillType = 2 

// Path
GradientFillType_Path GradientFillType = 3 
)

func Int32ToGradientFillType(value int32)(GradientFillType ,error){
	switch value {
		case 0:  return GradientFillType_Linear, nil  
		case 1:  return GradientFillType_Radial, nil  
		case 2:  return GradientFillType_Rectangle, nil  
		case 3:  return GradientFillType_Path, nil  
		default:
			return 0 ,fmt.Errorf("invalid GradientFillType value: %d", value)
	}
}

/**************Enum GradientPresetType *****************/

// Represents gradient preset color type.
type GradientPresetType int32

const(
// Brass preset color
GradientPresetType_Brass GradientPresetType = 0 

// Calm Water preset color
GradientPresetType_CalmWater GradientPresetType = 1 

// Chrome preset color
GradientPresetType_Chrome GradientPresetType = 2 

// Chrome II preset color
GradientPresetType_ChromeII GradientPresetType = 3 

// Daybreak preset color
GradientPresetType_Daybreak GradientPresetType = 4 

// Desert preset color
GradientPresetType_Desert GradientPresetType = 5 

// Early Sunset preset color
GradientPresetType_EarlySunset GradientPresetType = 6 

// Fire preset color
GradientPresetType_Fire GradientPresetType = 7 

// Fog preset color
GradientPresetType_Fog GradientPresetType = 8 

// Gold preset color
GradientPresetType_Gold GradientPresetType = 9 

// Gold II preset color
GradientPresetType_GoldII GradientPresetType = 10 

// Horizon preset color
GradientPresetType_Horizon GradientPresetType = 11 

// Late Sunset preset color
GradientPresetType_LateSunset GradientPresetType = 12 

// Mahogany preset color
GradientPresetType_Mahogany GradientPresetType = 13 

// Moss preset color
GradientPresetType_Moss GradientPresetType = 14 

// Nightfall preset color
GradientPresetType_Nightfall GradientPresetType = 15 

// Ocean preset color
GradientPresetType_Ocean GradientPresetType = 16 

// Parchment preset color
GradientPresetType_Parchment GradientPresetType = 17 

// Peacock preset color
GradientPresetType_Peacock GradientPresetType = 18 

// Rainbow preset color
GradientPresetType_Rainbow GradientPresetType = 19 

// Rainbow II preset color
GradientPresetType_RainbowII GradientPresetType = 20 

// Sapphire preset color
GradientPresetType_Sapphire GradientPresetType = 21 

// Silver preset color
GradientPresetType_Silver GradientPresetType = 22 

// Wheat preset color
GradientPresetType_Wheat GradientPresetType = 23 

// Unknown preset color.
// Only for the preset color (which is not same as any known preset color) in the template workbook.
GradientPresetType_Unknown GradientPresetType = 24 
)

func Int32ToGradientPresetType(value int32)(GradientPresetType ,error){
	switch value {
		case 0:  return GradientPresetType_Brass, nil  
		case 1:  return GradientPresetType_CalmWater, nil  
		case 2:  return GradientPresetType_Chrome, nil  
		case 3:  return GradientPresetType_ChromeII, nil  
		case 4:  return GradientPresetType_Daybreak, nil  
		case 5:  return GradientPresetType_Desert, nil  
		case 6:  return GradientPresetType_EarlySunset, nil  
		case 7:  return GradientPresetType_Fire, nil  
		case 8:  return GradientPresetType_Fog, nil  
		case 9:  return GradientPresetType_Gold, nil  
		case 10:  return GradientPresetType_GoldII, nil  
		case 11:  return GradientPresetType_Horizon, nil  
		case 12:  return GradientPresetType_LateSunset, nil  
		case 13:  return GradientPresetType_Mahogany, nil  
		case 14:  return GradientPresetType_Moss, nil  
		case 15:  return GradientPresetType_Nightfall, nil  
		case 16:  return GradientPresetType_Ocean, nil  
		case 17:  return GradientPresetType_Parchment, nil  
		case 18:  return GradientPresetType_Peacock, nil  
		case 19:  return GradientPresetType_Rainbow, nil  
		case 20:  return GradientPresetType_RainbowII, nil  
		case 21:  return GradientPresetType_Sapphire, nil  
		case 22:  return GradientPresetType_Silver, nil  
		case 23:  return GradientPresetType_Wheat, nil  
		case 24:  return GradientPresetType_Unknown, nil  
		default:
			return 0 ,fmt.Errorf("invalid GradientPresetType value: %d", value)
	}
}

/**************Enum GradientStyleType *****************/

// Represents gradient shading style.
type GradientStyleType int32

const(
// Diagonal down shading style
GradientStyleType_DiagonalDown GradientStyleType = 0 

// Diagonal up shading style
GradientStyleType_DiagonalUp GradientStyleType = 1 

// From center shading style
GradientStyleType_FromCenter GradientStyleType = 2 

// From corner shading style
GradientStyleType_FromCorner GradientStyleType = 3 

// Horizontal shading style
GradientStyleType_Horizontal GradientStyleType = 4 

// Vertical shading style
GradientStyleType_Vertical GradientStyleType = 5 

// Unknown shading style.Only for the shading style(which is not for any member of the GradientStyleType) in the template file.
GradientStyleType_Unknown GradientStyleType = 6 
)

func Int32ToGradientStyleType(value int32)(GradientStyleType ,error){
	switch value {
		case 0:  return GradientStyleType_DiagonalDown, nil  
		case 1:  return GradientStyleType_DiagonalUp, nil  
		case 2:  return GradientStyleType_FromCenter, nil  
		case 3:  return GradientStyleType_FromCorner, nil  
		case 4:  return GradientStyleType_Horizontal, nil  
		case 5:  return GradientStyleType_Vertical, nil  
		case 6:  return GradientStyleType_Unknown, nil  
		default:
			return 0 ,fmt.Errorf("invalid GradientStyleType value: %d", value)
	}
}

/**************Enum ImageType *****************/

// Specifies the type (format) of an image.
type ImageType int32

const(
// An unknown image type.
ImageType_Unknown ImageType = 0 

// Windows Enhanced Metafile.
ImageType_Emf ImageType = 2 

// Windows Metafile.
ImageType_Wmf ImageType = 3 

// Macintosh PICT.
ImageType_Pict ImageType = 4 

// JPEG JFIF.
ImageType_Jpeg ImageType = 5 

// Portable Network Graphics.
ImageType_Png ImageType = 6 

// Windows Bitmap
ImageType_Bmp ImageType = 7 

// Gif
ImageType_Gif ImageType = 66 

// Tiff
ImageType_Tiff ImageType = 67 

// Svg
ImageType_Svg ImageType = 68 

// Svm
ImageType_Svm ImageType = 69 

// glTF
ImageType_Gltf ImageType = 70 

// Windows Enhanced Metafile which is more compatible with Office.
ImageType_OfficeCompatibleEmf ImageType = 71 

// Weppy image format
ImageType_WebP ImageType = 72 
)

func Int32ToImageType(value int32)(ImageType ,error){
	switch value {
		case 0:  return ImageType_Unknown, nil  
		case 2:  return ImageType_Emf, nil  
		case 3:  return ImageType_Wmf, nil  
		case 4:  return ImageType_Pict, nil  
		case 5:  return ImageType_Jpeg, nil  
		case 6:  return ImageType_Png, nil  
		case 7:  return ImageType_Bmp, nil  
		case 66:  return ImageType_Gif, nil  
		case 67:  return ImageType_Tiff, nil  
		case 68:  return ImageType_Svg, nil  
		case 69:  return ImageType_Svm, nil  
		case 70:  return ImageType_Gltf, nil  
		case 71:  return ImageType_OfficeCompatibleEmf, nil  
		case 72:  return ImageType_WebP, nil  
		default:
			return 0 ,fmt.Errorf("invalid ImageType value: %d", value)
	}
}

/**************Enum LightRigDirectionType *****************/

// Represents the light rig direction type.
type LightRigDirectionType int32

const(
// Bottom
LightRigDirectionType_Bottom LightRigDirectionType = 0 

// Bottom left.
LightRigDirectionType_BottomLeft LightRigDirectionType = 1 

// Bottom Right.
LightRigDirectionType_BottomRight LightRigDirectionType = 2 

// Left.
LightRigDirectionType_Left LightRigDirectionType = 3 

// Right.
LightRigDirectionType_Right LightRigDirectionType = 4 

// Top.
LightRigDirectionType_Top LightRigDirectionType = 5 

// Top left.
LightRigDirectionType_TopLeft LightRigDirectionType = 6 

// Top Right.
LightRigDirectionType_TopRight LightRigDirectionType = 7 
)

func Int32ToLightRigDirectionType(value int32)(LightRigDirectionType ,error){
	switch value {
		case 0:  return LightRigDirectionType_Bottom, nil  
		case 1:  return LightRigDirectionType_BottomLeft, nil  
		case 2:  return LightRigDirectionType_BottomRight, nil  
		case 3:  return LightRigDirectionType_Left, nil  
		case 4:  return LightRigDirectionType_Right, nil  
		case 5:  return LightRigDirectionType_Top, nil  
		case 6:  return LightRigDirectionType_TopLeft, nil  
		case 7:  return LightRigDirectionType_TopRight, nil  
		default:
			return 0 ,fmt.Errorf("invalid LightRigDirectionType value: %d", value)
	}
}

/**************Enum LightRigType *****************/

// Represents a preset light right that can be applied to a shape
type LightRigType int32

const(
// Balanced
LightRigType_Balanced LightRigType = 0 

// Bright room
LightRigType_BrightRoom LightRigType = 1 

// Chilly
LightRigType_Chilly LightRigType = 2 

// Contrasting
LightRigType_Contrasting LightRigType = 3 

// Flat
LightRigType_Flat LightRigType = 4 

// Flood
LightRigType_Flood LightRigType = 5 

// Freezing
LightRigType_Freezing LightRigType = 6 

// Glow
LightRigType_Glow LightRigType = 7 

// Harsh
LightRigType_Harsh LightRigType = 8 

// LegacyFlat1
LightRigType_LegacyFlat1 LightRigType = 9 

// LegacyFlat2
LightRigType_LegacyFlat2 LightRigType = 10 

// LegacyFlat3
LightRigType_LegacyFlat3 LightRigType = 11 

// LegacyFlat4
LightRigType_LegacyFlat4 LightRigType = 12 

// LegacyHarsh1
LightRigType_LegacyHarsh1 LightRigType = 13 

// LegacyHarsh2
LightRigType_LegacyHarsh2 LightRigType = 14 

// LegacyHarsh3
LightRigType_LegacyHarsh3 LightRigType = 15 

// LegacyHarsh4
LightRigType_LegacyHarsh4 LightRigType = 16 

// LegacyNormal1
LightRigType_LegacyNormal1 LightRigType = 17 

// LegacyNormal2
LightRigType_LegacyNormal2 LightRigType = 18 

// LegacyNormal3
LightRigType_LegacyNormal3 LightRigType = 19 

// LegacyNormal4
LightRigType_LegacyNormal4 LightRigType = 20 

// Morning
LightRigType_Morning LightRigType = 21 

// Soft
LightRigType_Soft LightRigType = 22 

// Sunrise
LightRigType_Sunrise LightRigType = 23 

// Sunset
LightRigType_Sunset LightRigType = 24 

// Three point
LightRigType_ThreePoint LightRigType = 25 

// Two point
LightRigType_TwoPoint LightRigType = 26 

// No light rig.
LightRigType_None LightRigType = 27 
)

func Int32ToLightRigType(value int32)(LightRigType ,error){
	switch value {
		case 0:  return LightRigType_Balanced, nil  
		case 1:  return LightRigType_BrightRoom, nil  
		case 2:  return LightRigType_Chilly, nil  
		case 3:  return LightRigType_Contrasting, nil  
		case 4:  return LightRigType_Flat, nil  
		case 5:  return LightRigType_Flood, nil  
		case 6:  return LightRigType_Freezing, nil  
		case 7:  return LightRigType_Glow, nil  
		case 8:  return LightRigType_Harsh, nil  
		case 9:  return LightRigType_LegacyFlat1, nil  
		case 10:  return LightRigType_LegacyFlat2, nil  
		case 11:  return LightRigType_LegacyFlat3, nil  
		case 12:  return LightRigType_LegacyFlat4, nil  
		case 13:  return LightRigType_LegacyHarsh1, nil  
		case 14:  return LightRigType_LegacyHarsh2, nil  
		case 15:  return LightRigType_LegacyHarsh3, nil  
		case 16:  return LightRigType_LegacyHarsh4, nil  
		case 17:  return LightRigType_LegacyNormal1, nil  
		case 18:  return LightRigType_LegacyNormal2, nil  
		case 19:  return LightRigType_LegacyNormal3, nil  
		case 20:  return LightRigType_LegacyNormal4, nil  
		case 21:  return LightRigType_Morning, nil  
		case 22:  return LightRigType_Soft, nil  
		case 23:  return LightRigType_Sunrise, nil  
		case 24:  return LightRigType_Sunset, nil  
		case 25:  return LightRigType_ThreePoint, nil  
		case 26:  return LightRigType_TwoPoint, nil  
		case 27:  return LightRigType_None, nil  
		default:
			return 0 ,fmt.Errorf("invalid LightRigType value: %d", value)
	}
}

/**************Enum LineCapType *****************/

// Represents the caps of a line
type LineCapType int32

const(
// Square protrudes by half line width.
LineCapType_Square LineCapType = 0 

// Rounded ends.
LineCapType_Round LineCapType = 1 

// Line ends at end point.
LineCapType_Flat LineCapType = 2 

// None cap
LineCapType_None LineCapType = 3 
)

func Int32ToLineCapType(value int32)(LineCapType ,error){
	switch value {
		case 0:  return LineCapType_Square, nil  
		case 1:  return LineCapType_Round, nil  
		case 2:  return LineCapType_Flat, nil  
		case 3:  return LineCapType_None, nil  
		default:
			return 0 ,fmt.Errorf("invalid LineCapType value: %d", value)
	}
}

/**************Enum LineJoinType *****************/

// Represents the join styles of a line.
type LineJoinType int32

const(
// Round joint
LineJoinType_Round LineJoinType = 0 

// Bevel joint
LineJoinType_Bevel LineJoinType = 1 

// Miter joint
LineJoinType_Miter LineJoinType = 2 

// None joint
LineJoinType_None LineJoinType = 3 
)

func Int32ToLineJoinType(value int32)(LineJoinType ,error){
	switch value {
		case 0:  return LineJoinType_Round, nil  
		case 1:  return LineJoinType_Bevel, nil  
		case 2:  return LineJoinType_Miter, nil  
		case 3:  return LineJoinType_None, nil  
		default:
			return 0 ,fmt.Errorf("invalid LineJoinType value: %d", value)
	}
}

/**************Enum LineType *****************/

// Enumerates the type of <see cref="Picture"/> border or <see cref="Chart"/> line.
type LineType int32

const(
// Represents a dark gray line.
LineType_DarkGray LineType = 6 

// Represent a dash line.
LineType_Dash LineType = 1 

// Represents a dash-dot line
LineType_DashDot LineType = 3 

// Represents a dash-dot-dot line.
LineType_DashDotDot LineType = 4 

// Represents a dotted line.
LineType_Dot LineType = 2 

// Represents a light gray line.
LineType_LightGray LineType = 8 

// Represents a medium gray line.
LineType_MediumGray LineType = 7 

// Represent a solid line.
LineType_Solid LineType = 0 
)

func Int32ToLineType(value int32)(LineType ,error){
	switch value {
		case 6:  return LineType_DarkGray, nil  
		case 1:  return LineType_Dash, nil  
		case 3:  return LineType_DashDot, nil  
		case 4:  return LineType_DashDotDot, nil  
		case 2:  return LineType_Dot, nil  
		case 8:  return LineType_LightGray, nil  
		case 7:  return LineType_MediumGray, nil  
		case 0:  return LineType_Solid, nil  
		default:
			return 0 ,fmt.Errorf("invalid LineType value: %d", value)
	}
}

/**************Enum MirrorType *****************/

// Represents mirror type of texture fill
type MirrorType int32

const(
// None
MirrorType_None MirrorType = 0 

// Horizonal
MirrorType_Horizonal MirrorType = 1 

// Vertical
MirrorType_Vertical MirrorType = 2 

// Both
MirrorType_Both MirrorType = 3 
)

func Int32ToMirrorType(value int32)(MirrorType ,error){
	switch value {
		case 0:  return MirrorType_None, nil  
		case 1:  return MirrorType_Horizonal, nil  
		case 2:  return MirrorType_Vertical, nil  
		case 3:  return MirrorType_Both, nil  
		default:
			return 0 ,fmt.Errorf("invalid MirrorType value: %d", value)
	}
}

/**************Enum MsoArrowheadLength *****************/

// Enumerates the line end width of the shape border line.
type MsoArrowheadLength int32

const(
// Short line end length
MsoArrowheadLength_Short MsoArrowheadLength = 0 

// Medium line end length
MsoArrowheadLength_Medium MsoArrowheadLength = 1 

// Long line end length
MsoArrowheadLength_Long MsoArrowheadLength = 2 
)

func Int32ToMsoArrowheadLength(value int32)(MsoArrowheadLength ,error){
	switch value {
		case 0:  return MsoArrowheadLength_Short, nil  
		case 1:  return MsoArrowheadLength_Medium, nil  
		case 2:  return MsoArrowheadLength_Long, nil  
		default:
			return 0 ,fmt.Errorf("invalid MsoArrowheadLength value: %d", value)
	}
}

/**************Enum MsoArrowheadStyle *****************/

// Enumerates the line end type of the shape border line.
type MsoArrowheadStyle int32

const(
// No line end type.
MsoArrowheadStyle_None MsoArrowheadStyle = 0 

// Arrow line end type.
MsoArrowheadStyle_Arrow MsoArrowheadStyle = 1 

// Arrow Stealth line end type.
MsoArrowheadStyle_ArrowStealth MsoArrowheadStyle = 2 

// Arrow Diamond Line end type.
MsoArrowheadStyle_ArrowDiamond MsoArrowheadStyle = 3 

// Arrow Oval line end type.
MsoArrowheadStyle_ArrowOval MsoArrowheadStyle = 4 

// Arrow Open line end type.
MsoArrowheadStyle_ArrowOpen MsoArrowheadStyle = 5 
)

func Int32ToMsoArrowheadStyle(value int32)(MsoArrowheadStyle ,error){
	switch value {
		case 0:  return MsoArrowheadStyle_None, nil  
		case 1:  return MsoArrowheadStyle_Arrow, nil  
		case 2:  return MsoArrowheadStyle_ArrowStealth, nil  
		case 3:  return MsoArrowheadStyle_ArrowDiamond, nil  
		case 4:  return MsoArrowheadStyle_ArrowOval, nil  
		case 5:  return MsoArrowheadStyle_ArrowOpen, nil  
		default:
			return 0 ,fmt.Errorf("invalid MsoArrowheadStyle value: %d", value)
	}
}

/**************Enum MsoArrowheadWidth *****************/

// Enumerates the line end width of the shape border line.
type MsoArrowheadWidth int32

const(
// Short line end width.
MsoArrowheadWidth_Narrow MsoArrowheadWidth = 0 

// Medium line end width.
MsoArrowheadWidth_Medium MsoArrowheadWidth = 1 

// Wide line end width.
MsoArrowheadWidth_Wide MsoArrowheadWidth = 2 
)

func Int32ToMsoArrowheadWidth(value int32)(MsoArrowheadWidth ,error){
	switch value {
		case 0:  return MsoArrowheadWidth_Narrow, nil  
		case 1:  return MsoArrowheadWidth_Medium, nil  
		case 2:  return MsoArrowheadWidth_Wide, nil  
		default:
			return 0 ,fmt.Errorf("invalid MsoArrowheadWidth value: %d", value)
	}
}

/**************Enum MsoDrawingType *****************/

// Represents office drawing objects type.
type MsoDrawingType int32

const(
// Group
MsoDrawingType_Group MsoDrawingType = 0 

// Line
MsoDrawingType_Line MsoDrawingType = 1 

// Rectangle
MsoDrawingType_Rectangle MsoDrawingType = 2 

// Oval
MsoDrawingType_Oval MsoDrawingType = 3 

// Arc
MsoDrawingType_Arc MsoDrawingType = 4 

// Chart
MsoDrawingType_Chart MsoDrawingType = 5 

// TextBox
MsoDrawingType_TextBox MsoDrawingType = 6 

// Button
MsoDrawingType_Button MsoDrawingType = 7 

// Picture
MsoDrawingType_Picture MsoDrawingType = 8 

// Polygon
MsoDrawingType_Polygon MsoDrawingType = 9 

// CheckBox
MsoDrawingType_CheckBox MsoDrawingType = 11 

// RadioButton
MsoDrawingType_RadioButton MsoDrawingType = 12 

// Label
MsoDrawingType_Label MsoDrawingType = 14 

// DialogBox
MsoDrawingType_Dialog_Box MsoDrawingType = 15 

// Spinner
MsoDrawingType_Spinner MsoDrawingType = 16 

// ScrollBar
MsoDrawingType_ScrollBar MsoDrawingType = 17 

// ListBox
MsoDrawingType_ListBox MsoDrawingType = 18 

// GroupBox
MsoDrawingType_GroupBox MsoDrawingType = 19 

// ComboBox
MsoDrawingType_ComboBox MsoDrawingType = 20 

// Comment
MsoDrawingType_Comment MsoDrawingType = 25 

// OleObject
MsoDrawingType_OleObject MsoDrawingType = 24 

// Only for preserving the drawing object in the template file.
MsoDrawingType_CellsDrawing MsoDrawingType = 30 

// Only for preserving the drawing object in the xlsx file.
MsoDrawingType_Unknown MsoDrawingType = 29 

// Slicer
MsoDrawingType_Slicer MsoDrawingType = 31 

// Web extension
MsoDrawingType_WebExtension MsoDrawingType = 32 

// Smart Art
MsoDrawingType_SmartArt MsoDrawingType = 33 

// Custom xml shape ,such as Ink.
MsoDrawingType_CustomXml MsoDrawingType = 34 

// Timeline
MsoDrawingType_Timeline MsoDrawingType = 35 

// 3D Model
MsoDrawingType_Model3D MsoDrawingType = 36 
)

func Int32ToMsoDrawingType(value int32)(MsoDrawingType ,error){
	switch value {
		case 0:  return MsoDrawingType_Group, nil  
		case 1:  return MsoDrawingType_Line, nil  
		case 2:  return MsoDrawingType_Rectangle, nil  
		case 3:  return MsoDrawingType_Oval, nil  
		case 4:  return MsoDrawingType_Arc, nil  
		case 5:  return MsoDrawingType_Chart, nil  
		case 6:  return MsoDrawingType_TextBox, nil  
		case 7:  return MsoDrawingType_Button, nil  
		case 8:  return MsoDrawingType_Picture, nil  
		case 9:  return MsoDrawingType_Polygon, nil  
		case 11:  return MsoDrawingType_CheckBox, nil  
		case 12:  return MsoDrawingType_RadioButton, nil  
		case 14:  return MsoDrawingType_Label, nil  
		case 15:  return MsoDrawingType_Dialog_Box, nil  
		case 16:  return MsoDrawingType_Spinner, nil  
		case 17:  return MsoDrawingType_ScrollBar, nil  
		case 18:  return MsoDrawingType_ListBox, nil  
		case 19:  return MsoDrawingType_GroupBox, nil  
		case 20:  return MsoDrawingType_ComboBox, nil  
		case 25:  return MsoDrawingType_Comment, nil  
		case 24:  return MsoDrawingType_OleObject, nil  
		case 30:  return MsoDrawingType_CellsDrawing, nil  
		case 29:  return MsoDrawingType_Unknown, nil  
		case 31:  return MsoDrawingType_Slicer, nil  
		case 32:  return MsoDrawingType_WebExtension, nil  
		case 33:  return MsoDrawingType_SmartArt, nil  
		case 34:  return MsoDrawingType_CustomXml, nil  
		case 35:  return MsoDrawingType_Timeline, nil  
		case 36:  return MsoDrawingType_Model3D, nil  
		default:
			return 0 ,fmt.Errorf("invalid MsoDrawingType value: %d", value)
	}
}

/**************Enum MsoLineDashStyle *****************/

// Represents style of dash drawing lines.
type MsoLineDashStyle int32

const(
// Represent a dash line.
MsoLineDashStyle_Dash MsoLineDashStyle = 0 

// Represents a dash-dot line.
MsoLineDashStyle_DashDot MsoLineDashStyle = 1 

// Represents a dash-dot-dot line.
MsoLineDashStyle_DashDotDot MsoLineDashStyle = 2 

// Represents a long dash-short dash line.
MsoLineDashStyle_DashLongDash MsoLineDashStyle = 3 

// Represents a long dash-short dash-dot line.
MsoLineDashStyle_DashLongDashDot MsoLineDashStyle = 4 

// Represents a round-dot line.
MsoLineDashStyle_RoundDot MsoLineDashStyle = 5 

// Represent a solid line.
MsoLineDashStyle_Solid MsoLineDashStyle = 6 

// Represents a square-dot line.
MsoLineDashStyle_SquareDot MsoLineDashStyle = 7 

// Custom dash style.
MsoLineDashStyle_Custom MsoLineDashStyle = 8 
)

func Int32ToMsoLineDashStyle(value int32)(MsoLineDashStyle ,error){
	switch value {
		case 0:  return MsoLineDashStyle_Dash, nil  
		case 1:  return MsoLineDashStyle_DashDot, nil  
		case 2:  return MsoLineDashStyle_DashDotDot, nil  
		case 3:  return MsoLineDashStyle_DashLongDash, nil  
		case 4:  return MsoLineDashStyle_DashLongDashDot, nil  
		case 5:  return MsoLineDashStyle_RoundDot, nil  
		case 6:  return MsoLineDashStyle_Solid, nil  
		case 7:  return MsoLineDashStyle_SquareDot, nil  
		case 8:  return MsoLineDashStyle_Custom, nil  
		default:
			return 0 ,fmt.Errorf("invalid MsoLineDashStyle value: %d", value)
	}
}

/**************Enum MsoLineStyle *****************/

// Represents style of drawing lines.
type MsoLineStyle int32

const(
// Single line (of width lineWidth)
MsoLineStyle_Single MsoLineStyle = 0 

// Three lines, thin, thick, thin
MsoLineStyle_ThickBetweenThin MsoLineStyle = 1 

// Double lines, one thin, one thick
MsoLineStyle_ThinThick MsoLineStyle = 2 

// Double lines, one thick, one thin
MsoLineStyle_ThickThin MsoLineStyle = 3 

// Double lines of equal width
MsoLineStyle_ThinThin MsoLineStyle = 4 
)

func Int32ToMsoLineStyle(value int32)(MsoLineStyle ,error){
	switch value {
		case 0:  return MsoLineStyle_Single, nil  
		case 1:  return MsoLineStyle_ThickBetweenThin, nil  
		case 2:  return MsoLineStyle_ThinThick, nil  
		case 3:  return MsoLineStyle_ThickThin, nil  
		case 4:  return MsoLineStyle_ThinThin, nil  
		default:
			return 0 ,fmt.Errorf("invalid MsoLineStyle value: %d", value)
	}
}

/**************Enum MsoPresetTextEffect *****************/

// Represents preset text effect type of WordArt.
type MsoPresetTextEffect int32

const(
// TextEffect1
MsoPresetTextEffect_TextEffect1 MsoPresetTextEffect = 0 

// TextEffect2
MsoPresetTextEffect_TextEffect2 MsoPresetTextEffect = 1 

// TextEffect3
MsoPresetTextEffect_TextEffect3 MsoPresetTextEffect = 2 

// TextEffect4
MsoPresetTextEffect_TextEffect4 MsoPresetTextEffect = 3 

// TextEffect5
MsoPresetTextEffect_TextEffect5 MsoPresetTextEffect = 4 

// TextEffect6
MsoPresetTextEffect_TextEffect6 MsoPresetTextEffect = 5 

// TextEffect7
MsoPresetTextEffect_TextEffect7 MsoPresetTextEffect = 6 

// TextEffect8
MsoPresetTextEffect_TextEffect8 MsoPresetTextEffect = 7 

// TextEffect9
MsoPresetTextEffect_TextEffect9 MsoPresetTextEffect = 8 

// TextEffect10
MsoPresetTextEffect_TextEffect10 MsoPresetTextEffect = 9 

// TextEffect11
MsoPresetTextEffect_TextEffect11 MsoPresetTextEffect = 10 

// TextEffect12
MsoPresetTextEffect_TextEffect12 MsoPresetTextEffect = 11 

// TextEffect13
MsoPresetTextEffect_TextEffect13 MsoPresetTextEffect = 12 

// TextEffect14
MsoPresetTextEffect_TextEffect14 MsoPresetTextEffect = 13 

// TextEffect15
MsoPresetTextEffect_TextEffect15 MsoPresetTextEffect = 14 

// TextEffect16
MsoPresetTextEffect_TextEffect16 MsoPresetTextEffect = 15 

// TextEffect17
MsoPresetTextEffect_TextEffect17 MsoPresetTextEffect = 16 

// TextEffect18
MsoPresetTextEffect_TextEffect18 MsoPresetTextEffect = 17 

// TextEffect19
MsoPresetTextEffect_TextEffect19 MsoPresetTextEffect = 18 

// TextEffect20
MsoPresetTextEffect_TextEffect20 MsoPresetTextEffect = 19 

// TextEffect21
MsoPresetTextEffect_TextEffect21 MsoPresetTextEffect = 20 

// TextEffect22
MsoPresetTextEffect_TextEffect22 MsoPresetTextEffect = 21 

// TextEffect23
MsoPresetTextEffect_TextEffect23 MsoPresetTextEffect = 22 

// TextEffect24
MsoPresetTextEffect_TextEffect24 MsoPresetTextEffect = 23 

// TextEffect25
MsoPresetTextEffect_TextEffect25 MsoPresetTextEffect = 24 

// TextEffect26
MsoPresetTextEffect_TextEffect26 MsoPresetTextEffect = 25 

// TextEffect27
MsoPresetTextEffect_TextEffect27 MsoPresetTextEffect = 26 

// TextEffect28
MsoPresetTextEffect_TextEffect28 MsoPresetTextEffect = 27 

// TextEffect29
MsoPresetTextEffect_TextEffect29 MsoPresetTextEffect = 28 

// TextEffect30
MsoPresetTextEffect_TextEffect30 MsoPresetTextEffect = 29 
)

func Int32ToMsoPresetTextEffect(value int32)(MsoPresetTextEffect ,error){
	switch value {
		case 0:  return MsoPresetTextEffect_TextEffect1, nil  
		case 1:  return MsoPresetTextEffect_TextEffect2, nil  
		case 2:  return MsoPresetTextEffect_TextEffect3, nil  
		case 3:  return MsoPresetTextEffect_TextEffect4, nil  
		case 4:  return MsoPresetTextEffect_TextEffect5, nil  
		case 5:  return MsoPresetTextEffect_TextEffect6, nil  
		case 6:  return MsoPresetTextEffect_TextEffect7, nil  
		case 7:  return MsoPresetTextEffect_TextEffect8, nil  
		case 8:  return MsoPresetTextEffect_TextEffect9, nil  
		case 9:  return MsoPresetTextEffect_TextEffect10, nil  
		case 10:  return MsoPresetTextEffect_TextEffect11, nil  
		case 11:  return MsoPresetTextEffect_TextEffect12, nil  
		case 12:  return MsoPresetTextEffect_TextEffect13, nil  
		case 13:  return MsoPresetTextEffect_TextEffect14, nil  
		case 14:  return MsoPresetTextEffect_TextEffect15, nil  
		case 15:  return MsoPresetTextEffect_TextEffect16, nil  
		case 16:  return MsoPresetTextEffect_TextEffect17, nil  
		case 17:  return MsoPresetTextEffect_TextEffect18, nil  
		case 18:  return MsoPresetTextEffect_TextEffect19, nil  
		case 19:  return MsoPresetTextEffect_TextEffect20, nil  
		case 20:  return MsoPresetTextEffect_TextEffect21, nil  
		case 21:  return MsoPresetTextEffect_TextEffect22, nil  
		case 22:  return MsoPresetTextEffect_TextEffect23, nil  
		case 23:  return MsoPresetTextEffect_TextEffect24, nil  
		case 24:  return MsoPresetTextEffect_TextEffect25, nil  
		case 25:  return MsoPresetTextEffect_TextEffect26, nil  
		case 26:  return MsoPresetTextEffect_TextEffect27, nil  
		case 27:  return MsoPresetTextEffect_TextEffect28, nil  
		case 28:  return MsoPresetTextEffect_TextEffect29, nil  
		case 29:  return MsoPresetTextEffect_TextEffect30, nil  
		default:
			return 0 ,fmt.Errorf("invalid MsoPresetTextEffect value: %d", value)
	}
}

/**************Enum MsoPresetTextEffectShape *****************/

// Represents preset text effect shape type of WordArt.
type MsoPresetTextEffectShape int32

const(
// PlainText
MsoPresetTextEffectShape_PlainText MsoPresetTextEffectShape = 136 

// Stop
MsoPresetTextEffectShape_Stop MsoPresetTextEffectShape = 137 

// TriangleUp
MsoPresetTextEffectShape_TriangleUp MsoPresetTextEffectShape = 138 

// TriangleDown
MsoPresetTextEffectShape_TriangleDown MsoPresetTextEffectShape = 139 

// ChevronUp
MsoPresetTextEffectShape_ChevronUp MsoPresetTextEffectShape = 140 

// ChevronDown
MsoPresetTextEffectShape_ChevronDown MsoPresetTextEffectShape = 141 

// RingInside
MsoPresetTextEffectShape_RingInside MsoPresetTextEffectShape = 142 

// RingOutside
MsoPresetTextEffectShape_RingOutside MsoPresetTextEffectShape = 143 

// ArchUpCurve
MsoPresetTextEffectShape_ArchUpCurve MsoPresetTextEffectShape = 144 

// ArchDownCurve
MsoPresetTextEffectShape_ArchDownCurve MsoPresetTextEffectShape = 145 

// CircleCurve
MsoPresetTextEffectShape_CircleCurve MsoPresetTextEffectShape = 146 

// ButtonCurve
MsoPresetTextEffectShape_ButtonCurve MsoPresetTextEffectShape = 147 

// ArchUpPour
MsoPresetTextEffectShape_ArchUpPour MsoPresetTextEffectShape = 148 

// ArchDownPour
MsoPresetTextEffectShape_ArchDownPour MsoPresetTextEffectShape = 149 

// CirclePour
MsoPresetTextEffectShape_CirclePour MsoPresetTextEffectShape = 150 

// ButtonPour
MsoPresetTextEffectShape_ButtonPour MsoPresetTextEffectShape = 151 

// CurveUp
MsoPresetTextEffectShape_CurveUp MsoPresetTextEffectShape = 152 

// CurveDown
MsoPresetTextEffectShape_CurveDown MsoPresetTextEffectShape = 153 

// CanUp
MsoPresetTextEffectShape_CanUp MsoPresetTextEffectShape = 174 

// CanDown
MsoPresetTextEffectShape_CanDown MsoPresetTextEffectShape = 175 

// Wave1
MsoPresetTextEffectShape_Wave1 MsoPresetTextEffectShape = 156 

// Wave2
MsoPresetTextEffectShape_Wave2 MsoPresetTextEffectShape = 157 

// DoubleWave1
MsoPresetTextEffectShape_DoubleWave1 MsoPresetTextEffectShape = 158 

// DoubleWave2
MsoPresetTextEffectShape_DoubleWave2 MsoPresetTextEffectShape = 159 

// Inflate
MsoPresetTextEffectShape_Inflate MsoPresetTextEffectShape = 160 

// Deflate
MsoPresetTextEffectShape_Deflate MsoPresetTextEffectShape = 161 

// InflateBottom
MsoPresetTextEffectShape_InflateBottom MsoPresetTextEffectShape = 162 

// DeflateBottom
MsoPresetTextEffectShape_DeflateBottom MsoPresetTextEffectShape = 163 

// InflateTop
MsoPresetTextEffectShape_InflateTop MsoPresetTextEffectShape = 164 

// DeflateTop
MsoPresetTextEffectShape_DeflateTop MsoPresetTextEffectShape = 165 

// DeflateInflate
MsoPresetTextEffectShape_DeflateInflate MsoPresetTextEffectShape = 166 

// DeflateInflateDeflate
MsoPresetTextEffectShape_DeflateInflateDeflate MsoPresetTextEffectShape = 167 

// FadeRight
MsoPresetTextEffectShape_FadeRight MsoPresetTextEffectShape = 168 

// FadeLeft
MsoPresetTextEffectShape_FadeLeft MsoPresetTextEffectShape = 169 

// FadeUp
MsoPresetTextEffectShape_FadeUp MsoPresetTextEffectShape = 170 

// FadeDown
MsoPresetTextEffectShape_FadeDown MsoPresetTextEffectShape = 171 

// SlantUp
MsoPresetTextEffectShape_SlantUp MsoPresetTextEffectShape = 172 

// SlantDown
MsoPresetTextEffectShape_SlantDown MsoPresetTextEffectShape = 173 

// CascadeUp
MsoPresetTextEffectShape_CascadeUp MsoPresetTextEffectShape = 154 

// CascadeDown
MsoPresetTextEffectShape_CascadeDown MsoPresetTextEffectShape = 155 

// Mixed
MsoPresetTextEffectShape_Mixed MsoPresetTextEffectShape = 255 
)

func Int32ToMsoPresetTextEffectShape(value int32)(MsoPresetTextEffectShape ,error){
	switch value {
		case 136:  return MsoPresetTextEffectShape_PlainText, nil  
		case 137:  return MsoPresetTextEffectShape_Stop, nil  
		case 138:  return MsoPresetTextEffectShape_TriangleUp, nil  
		case 139:  return MsoPresetTextEffectShape_TriangleDown, nil  
		case 140:  return MsoPresetTextEffectShape_ChevronUp, nil  
		case 141:  return MsoPresetTextEffectShape_ChevronDown, nil  
		case 142:  return MsoPresetTextEffectShape_RingInside, nil  
		case 143:  return MsoPresetTextEffectShape_RingOutside, nil  
		case 144:  return MsoPresetTextEffectShape_ArchUpCurve, nil  
		case 145:  return MsoPresetTextEffectShape_ArchDownCurve, nil  
		case 146:  return MsoPresetTextEffectShape_CircleCurve, nil  
		case 147:  return MsoPresetTextEffectShape_ButtonCurve, nil  
		case 148:  return MsoPresetTextEffectShape_ArchUpPour, nil  
		case 149:  return MsoPresetTextEffectShape_ArchDownPour, nil  
		case 150:  return MsoPresetTextEffectShape_CirclePour, nil  
		case 151:  return MsoPresetTextEffectShape_ButtonPour, nil  
		case 152:  return MsoPresetTextEffectShape_CurveUp, nil  
		case 153:  return MsoPresetTextEffectShape_CurveDown, nil  
		case 174:  return MsoPresetTextEffectShape_CanUp, nil  
		case 175:  return MsoPresetTextEffectShape_CanDown, nil  
		case 156:  return MsoPresetTextEffectShape_Wave1, nil  
		case 157:  return MsoPresetTextEffectShape_Wave2, nil  
		case 158:  return MsoPresetTextEffectShape_DoubleWave1, nil  
		case 159:  return MsoPresetTextEffectShape_DoubleWave2, nil  
		case 160:  return MsoPresetTextEffectShape_Inflate, nil  
		case 161:  return MsoPresetTextEffectShape_Deflate, nil  
		case 162:  return MsoPresetTextEffectShape_InflateBottom, nil  
		case 163:  return MsoPresetTextEffectShape_DeflateBottom, nil  
		case 164:  return MsoPresetTextEffectShape_InflateTop, nil  
		case 165:  return MsoPresetTextEffectShape_DeflateTop, nil  
		case 166:  return MsoPresetTextEffectShape_DeflateInflate, nil  
		case 167:  return MsoPresetTextEffectShape_DeflateInflateDeflate, nil  
		case 168:  return MsoPresetTextEffectShape_FadeRight, nil  
		case 169:  return MsoPresetTextEffectShape_FadeLeft, nil  
		case 170:  return MsoPresetTextEffectShape_FadeUp, nil  
		case 171:  return MsoPresetTextEffectShape_FadeDown, nil  
		case 172:  return MsoPresetTextEffectShape_SlantUp, nil  
		case 173:  return MsoPresetTextEffectShape_SlantDown, nil  
		case 154:  return MsoPresetTextEffectShape_CascadeUp, nil  
		case 155:  return MsoPresetTextEffectShape_CascadeDown, nil  
		case 255:  return MsoPresetTextEffectShape_Mixed, nil  
		default:
			return 0 ,fmt.Errorf("invalid MsoPresetTextEffectShape value: %d", value)
	}
}

/**************Enum PlacementType *****************/

// Represents the way the drawing object is attached to the cells below it.
type PlacementType int32

const(
// Don't move or size with cells.
PlacementType_FreeFloating PlacementType = 0 

// Move but don't size with cells.
PlacementType_Move PlacementType = 1 

// Move and size with cells.
PlacementType_MoveAndSize PlacementType = 2 
)

func Int32ToPlacementType(value int32)(PlacementType ,error){
	switch value {
		case 0:  return PlacementType_FreeFloating, nil  
		case 1:  return PlacementType_Move, nil  
		case 2:  return PlacementType_MoveAndSize, nil  
		default:
			return 0 ,fmt.Errorf("invalid PlacementType value: %d", value)
	}
}

/**************Enum PresetCameraType *****************/

// Represent different algorithmic methods for setting all camera properties, including position.
type PresetCameraType int32

const(
PresetCameraType_IsometricBottomDown PresetCameraType = 0 


PresetCameraType_IsometricBottomUp PresetCameraType = 1 


PresetCameraType_IsometricLeftDown PresetCameraType = 2 


PresetCameraType_IsometricLeftUp PresetCameraType = 3 


PresetCameraType_IsometricOffAxis1Left PresetCameraType = 4 


PresetCameraType_IsometricOffAxis1Right PresetCameraType = 5 


PresetCameraType_IsometricOffAxis1Top PresetCameraType = 6 


PresetCameraType_IsometricOffAxis2Left PresetCameraType = 7 


PresetCameraType_IsometricOffAxis2Right PresetCameraType = 8 


PresetCameraType_IsometricOffAxis2Top PresetCameraType = 9 


PresetCameraType_IsometricOffAxis3Bottom PresetCameraType = 10 


PresetCameraType_IsometricOffAxis3Left PresetCameraType = 11 


PresetCameraType_IsometricOffAxis3Right PresetCameraType = 12 


PresetCameraType_IsometricOffAxis4Bottom PresetCameraType = 13 


PresetCameraType_IsometricOffAxis4Left PresetCameraType = 14 


PresetCameraType_IsometricOffAxis4Right PresetCameraType = 15 


PresetCameraType_IsometricRightDown PresetCameraType = 16 


PresetCameraType_IsometricRightUp PresetCameraType = 17 


PresetCameraType_IsometricTopDown PresetCameraType = 18 


PresetCameraType_IsometricTopUp PresetCameraType = 19 


PresetCameraType_LegacyObliqueBottom PresetCameraType = 20 


PresetCameraType_LegacyObliqueBottomLeft PresetCameraType = 21 


PresetCameraType_LegacyObliqueBottomRight PresetCameraType = 22 


PresetCameraType_LegacyObliqueFront PresetCameraType = 23 


PresetCameraType_LegacyObliqueLeft PresetCameraType = 24 


PresetCameraType_LegacyObliqueRight PresetCameraType = 25 


PresetCameraType_LegacyObliqueTop PresetCameraType = 26 


PresetCameraType_LegacyObliqueTopLeft PresetCameraType = 27 


PresetCameraType_LegacyObliqueTopRight PresetCameraType = 28 


PresetCameraType_LegacyPerspectiveBottom PresetCameraType = 29 


PresetCameraType_LegacyPerspectiveBottomLeft PresetCameraType = 30 


PresetCameraType_LegacyPerspectiveBottomRight PresetCameraType = 31 


PresetCameraType_LegacyPerspectiveFront PresetCameraType = 32 


PresetCameraType_LegacyPerspectiveLeft PresetCameraType = 33 


PresetCameraType_LegacyPerspectiveRight PresetCameraType = 34 


PresetCameraType_LegacyPerspectiveTop PresetCameraType = 35 


PresetCameraType_LegacyPerspectiveTopLeft PresetCameraType = 36 


PresetCameraType_LegacyPerspectiveTopRight PresetCameraType = 37 


PresetCameraType_ObliqueBottom PresetCameraType = 38 


PresetCameraType_ObliqueBottomLeft PresetCameraType = 39 


PresetCameraType_ObliqueBottomRight PresetCameraType = 40 


PresetCameraType_ObliqueLeft PresetCameraType = 41 


PresetCameraType_ObliqueRight PresetCameraType = 42 


PresetCameraType_ObliqueTop PresetCameraType = 43 


PresetCameraType_ObliqueTopLeft PresetCameraType = 44 


PresetCameraType_ObliqueTopRight PresetCameraType = 45 


PresetCameraType_OrthographicFront PresetCameraType = 46 


PresetCameraType_PerspectiveAbove PresetCameraType = 47 


PresetCameraType_PerspectiveAboveLeftFacing PresetCameraType = 48 


PresetCameraType_PerspectiveAboveRightFacing PresetCameraType = 49 


PresetCameraType_PerspectiveBelow PresetCameraType = 50 


PresetCameraType_PerspectiveContrastingLeftFacing PresetCameraType = 51 


PresetCameraType_PerspectiveContrastingRightFacing PresetCameraType = 52 


PresetCameraType_PerspectiveFront PresetCameraType = 53 


PresetCameraType_PerspectiveHeroicExtremeLeftFacing PresetCameraType = 54 


PresetCameraType_PerspectiveHeroicExtremeRightFacing PresetCameraType = 55 


PresetCameraType_PerspectiveHeroicLeftFacing PresetCameraType = 56 


PresetCameraType_PerspectiveHeroicRightFacing PresetCameraType = 57 


PresetCameraType_PerspectiveLeft PresetCameraType = 58 


PresetCameraType_PerspectiveRelaxed PresetCameraType = 59 


PresetCameraType_PerspectiveRelaxedModerately PresetCameraType = 60 


PresetCameraType_PerspectiveRight PresetCameraType = 61 
)

func Int32ToPresetCameraType(value int32)(PresetCameraType ,error){
	switch value {
		case 0:  return PresetCameraType_IsometricBottomDown, nil  
		case 1:  return PresetCameraType_IsometricBottomUp, nil  
		case 2:  return PresetCameraType_IsometricLeftDown, nil  
		case 3:  return PresetCameraType_IsometricLeftUp, nil  
		case 4:  return PresetCameraType_IsometricOffAxis1Left, nil  
		case 5:  return PresetCameraType_IsometricOffAxis1Right, nil  
		case 6:  return PresetCameraType_IsometricOffAxis1Top, nil  
		case 7:  return PresetCameraType_IsometricOffAxis2Left, nil  
		case 8:  return PresetCameraType_IsometricOffAxis2Right, nil  
		case 9:  return PresetCameraType_IsometricOffAxis2Top, nil  
		case 10:  return PresetCameraType_IsometricOffAxis3Bottom, nil  
		case 11:  return PresetCameraType_IsometricOffAxis3Left, nil  
		case 12:  return PresetCameraType_IsometricOffAxis3Right, nil  
		case 13:  return PresetCameraType_IsometricOffAxis4Bottom, nil  
		case 14:  return PresetCameraType_IsometricOffAxis4Left, nil  
		case 15:  return PresetCameraType_IsometricOffAxis4Right, nil  
		case 16:  return PresetCameraType_IsometricRightDown, nil  
		case 17:  return PresetCameraType_IsometricRightUp, nil  
		case 18:  return PresetCameraType_IsometricTopDown, nil  
		case 19:  return PresetCameraType_IsometricTopUp, nil  
		case 20:  return PresetCameraType_LegacyObliqueBottom, nil  
		case 21:  return PresetCameraType_LegacyObliqueBottomLeft, nil  
		case 22:  return PresetCameraType_LegacyObliqueBottomRight, nil  
		case 23:  return PresetCameraType_LegacyObliqueFront, nil  
		case 24:  return PresetCameraType_LegacyObliqueLeft, nil  
		case 25:  return PresetCameraType_LegacyObliqueRight, nil  
		case 26:  return PresetCameraType_LegacyObliqueTop, nil  
		case 27:  return PresetCameraType_LegacyObliqueTopLeft, nil  
		case 28:  return PresetCameraType_LegacyObliqueTopRight, nil  
		case 29:  return PresetCameraType_LegacyPerspectiveBottom, nil  
		case 30:  return PresetCameraType_LegacyPerspectiveBottomLeft, nil  
		case 31:  return PresetCameraType_LegacyPerspectiveBottomRight, nil  
		case 32:  return PresetCameraType_LegacyPerspectiveFront, nil  
		case 33:  return PresetCameraType_LegacyPerspectiveLeft, nil  
		case 34:  return PresetCameraType_LegacyPerspectiveRight, nil  
		case 35:  return PresetCameraType_LegacyPerspectiveTop, nil  
		case 36:  return PresetCameraType_LegacyPerspectiveTopLeft, nil  
		case 37:  return PresetCameraType_LegacyPerspectiveTopRight, nil  
		case 38:  return PresetCameraType_ObliqueBottom, nil  
		case 39:  return PresetCameraType_ObliqueBottomLeft, nil  
		case 40:  return PresetCameraType_ObliqueBottomRight, nil  
		case 41:  return PresetCameraType_ObliqueLeft, nil  
		case 42:  return PresetCameraType_ObliqueRight, nil  
		case 43:  return PresetCameraType_ObliqueTop, nil  
		case 44:  return PresetCameraType_ObliqueTopLeft, nil  
		case 45:  return PresetCameraType_ObliqueTopRight, nil  
		case 46:  return PresetCameraType_OrthographicFront, nil  
		case 47:  return PresetCameraType_PerspectiveAbove, nil  
		case 48:  return PresetCameraType_PerspectiveAboveLeftFacing, nil  
		case 49:  return PresetCameraType_PerspectiveAboveRightFacing, nil  
		case 50:  return PresetCameraType_PerspectiveBelow, nil  
		case 51:  return PresetCameraType_PerspectiveContrastingLeftFacing, nil  
		case 52:  return PresetCameraType_PerspectiveContrastingRightFacing, nil  
		case 53:  return PresetCameraType_PerspectiveFront, nil  
		case 54:  return PresetCameraType_PerspectiveHeroicExtremeLeftFacing, nil  
		case 55:  return PresetCameraType_PerspectiveHeroicExtremeRightFacing, nil  
		case 56:  return PresetCameraType_PerspectiveHeroicLeftFacing, nil  
		case 57:  return PresetCameraType_PerspectiveHeroicRightFacing, nil  
		case 58:  return PresetCameraType_PerspectiveLeft, nil  
		case 59:  return PresetCameraType_PerspectiveRelaxed, nil  
		case 60:  return PresetCameraType_PerspectiveRelaxedModerately, nil  
		case 61:  return PresetCameraType_PerspectiveRight, nil  
		default:
			return 0 ,fmt.Errorf("invalid PresetCameraType value: %d", value)
	}
}

/**************Enum PresetMaterialType *****************/

// Describes surface appearance of a shape.
type PresetMaterialType int32

const(
// Clear
PresetMaterialType_Clear PresetMaterialType = 0 

// Dark edge
PresetMaterialType_DarkEdge PresetMaterialType = 1 

// Flat
PresetMaterialType_Flat PresetMaterialType = 2 

// Legacy matte
PresetMaterialType_LegacyMatte PresetMaterialType = 3 

// Legacy metal
PresetMaterialType_LegacyMetal PresetMaterialType = 4 

// Legacy plastic
PresetMaterialType_LegacyPlastic PresetMaterialType = 5 

// Legacy wireframe
PresetMaterialType_LegacyWireframe PresetMaterialType = 6 

// Matte
PresetMaterialType_Matte PresetMaterialType = 7 

// Metal
PresetMaterialType_Metal PresetMaterialType = 8 

// Plastic
PresetMaterialType_Plastic PresetMaterialType = 9 

// Powder
PresetMaterialType_Powder PresetMaterialType = 10 

// Soft edge
PresetMaterialType_SoftEdge PresetMaterialType = 11 

// Soft metal
PresetMaterialType_SoftMetal PresetMaterialType = 12 

// Translucent powder
PresetMaterialType_TranslucentPowder PresetMaterialType = 13 

// Warm matte
PresetMaterialType_WarmMatte PresetMaterialType = 14 
)

func Int32ToPresetMaterialType(value int32)(PresetMaterialType ,error){
	switch value {
		case 0:  return PresetMaterialType_Clear, nil  
		case 1:  return PresetMaterialType_DarkEdge, nil  
		case 2:  return PresetMaterialType_Flat, nil  
		case 3:  return PresetMaterialType_LegacyMatte, nil  
		case 4:  return PresetMaterialType_LegacyMetal, nil  
		case 5:  return PresetMaterialType_LegacyPlastic, nil  
		case 6:  return PresetMaterialType_LegacyWireframe, nil  
		case 7:  return PresetMaterialType_Matte, nil  
		case 8:  return PresetMaterialType_Metal, nil  
		case 9:  return PresetMaterialType_Plastic, nil  
		case 10:  return PresetMaterialType_Powder, nil  
		case 11:  return PresetMaterialType_SoftEdge, nil  
		case 12:  return PresetMaterialType_SoftMetal, nil  
		case 13:  return PresetMaterialType_TranslucentPowder, nil  
		case 14:  return PresetMaterialType_WarmMatte, nil  
		default:
			return 0 ,fmt.Errorf("invalid PresetMaterialType value: %d", value)
	}
}

/**************Enum PresetShadowType *****************/

// Represents preset shadow type.
type PresetShadowType int32

const(
// No shadow.
PresetShadowType_NoShadow PresetShadowType = 0 

// Custom shadow.
PresetShadowType_Custom PresetShadowType = 1 

// Outer shadow offset diagonal bottom right.
PresetShadowType_OffsetDiagonalBottomRight PresetShadowType = 2 

// Outer shadow offset bottom.
PresetShadowType_OffsetBottom PresetShadowType = 3 

// Outer shadow offset diagonal bottom left.
PresetShadowType_OffsetDiagonalBottomLeft PresetShadowType = 4 

// Outer shadow offset right.
PresetShadowType_OffsetRight PresetShadowType = 5 

// Outer shadow offset center.
PresetShadowType_OffsetCenter PresetShadowType = 6 

// Outer shadow offset left.
PresetShadowType_OffsetLeft PresetShadowType = 7 

// Outer shadow offset diagonal top right.
PresetShadowType_OffsetDiagonalTopRight PresetShadowType = 8 

// Outer shadow offset top.
PresetShadowType_OffsetTop PresetShadowType = 9 

// Outer shadow offset diagonal top left.
PresetShadowType_OffsetDiagonalTopLeft PresetShadowType = 10 

// Inner shadow inside diagonal top Left.
PresetShadowType_InsideDiagonalTopLeft PresetShadowType = 11 

// Inner shadow inside top.
PresetShadowType_InsideTop PresetShadowType = 12 

// Inner shadow inside diagonal top right.
PresetShadowType_InsideDiagonalTopRight PresetShadowType = 13 

// Inner shadow inside left.
PresetShadowType_InsideLeft PresetShadowType = 14 

// Inner shadow inside center.
PresetShadowType_InsideCenter PresetShadowType = 15 

// Inner shadow inside right.
PresetShadowType_InsideRight PresetShadowType = 16 

// Inner shadow inside diagonal bottom left.
PresetShadowType_InsideDiagonalBottomLeft PresetShadowType = 17 

// Inner shadow inside bottom.
PresetShadowType_InsideBottom PresetShadowType = 18 

// Inner shadow inside diagonal bottom right.
PresetShadowType_InsideDiagonalBottomRight PresetShadowType = 19 

// Outer shadow perspective diagonal upper left.
PresetShadowType_PerspectiveDiagonalUpperLeft PresetShadowType = 20 

// Outer shadow perspective diagonal upper right.
PresetShadowType_PerspectiveDiagonalUpperRight PresetShadowType = 21 

// Outer shadow below.
PresetShadowType_Below PresetShadowType = 22 

// Outer shadow perspective diagonal lower left.
PresetShadowType_PerspectiveDiagonalLowerLeft PresetShadowType = 23 

// Outer shadow perspective diagonal lower right.
PresetShadowType_PerspectiveDiagonalLowerRight PresetShadowType = 24 
)

func Int32ToPresetShadowType(value int32)(PresetShadowType ,error){
	switch value {
		case 0:  return PresetShadowType_NoShadow, nil  
		case 1:  return PresetShadowType_Custom, nil  
		case 2:  return PresetShadowType_OffsetDiagonalBottomRight, nil  
		case 3:  return PresetShadowType_OffsetBottom, nil  
		case 4:  return PresetShadowType_OffsetDiagonalBottomLeft, nil  
		case 5:  return PresetShadowType_OffsetRight, nil  
		case 6:  return PresetShadowType_OffsetCenter, nil  
		case 7:  return PresetShadowType_OffsetLeft, nil  
		case 8:  return PresetShadowType_OffsetDiagonalTopRight, nil  
		case 9:  return PresetShadowType_OffsetTop, nil  
		case 10:  return PresetShadowType_OffsetDiagonalTopLeft, nil  
		case 11:  return PresetShadowType_InsideDiagonalTopLeft, nil  
		case 12:  return PresetShadowType_InsideTop, nil  
		case 13:  return PresetShadowType_InsideDiagonalTopRight, nil  
		case 14:  return PresetShadowType_InsideLeft, nil  
		case 15:  return PresetShadowType_InsideCenter, nil  
		case 16:  return PresetShadowType_InsideRight, nil  
		case 17:  return PresetShadowType_InsideDiagonalBottomLeft, nil  
		case 18:  return PresetShadowType_InsideBottom, nil  
		case 19:  return PresetShadowType_InsideDiagonalBottomRight, nil  
		case 20:  return PresetShadowType_PerspectiveDiagonalUpperLeft, nil  
		case 21:  return PresetShadowType_PerspectiveDiagonalUpperRight, nil  
		case 22:  return PresetShadowType_Below, nil  
		case 23:  return PresetShadowType_PerspectiveDiagonalLowerLeft, nil  
		case 24:  return PresetShadowType_PerspectiveDiagonalLowerRight, nil  
		default:
			return 0 ,fmt.Errorf("invalid PresetShadowType value: %d", value)
	}
}

/**************Enum PresetThemeGradientType *****************/

// Represents the preset theme gradient type.
type PresetThemeGradientType int32

const(
// Light gradient
PresetThemeGradientType_LightGradient PresetThemeGradientType = 0 

// Top spotlight
PresetThemeGradientType_TopSpotlight PresetThemeGradientType = 1 

// Medium gradient
PresetThemeGradientType_MediumGradient PresetThemeGradientType = 2 

// Bottom spotlight
PresetThemeGradientType_BottomSpotlight PresetThemeGradientType = 3 

// Radial gradient
PresetThemeGradientType_RadialGradient PresetThemeGradientType = 4 
)

func Int32ToPresetThemeGradientType(value int32)(PresetThemeGradientType ,error){
	switch value {
		case 0:  return PresetThemeGradientType_LightGradient, nil  
		case 1:  return PresetThemeGradientType_TopSpotlight, nil  
		case 2:  return PresetThemeGradientType_MediumGradient, nil  
		case 3:  return PresetThemeGradientType_BottomSpotlight, nil  
		case 4:  return PresetThemeGradientType_RadialGradient, nil  
		default:
			return 0 ,fmt.Errorf("invalid PresetThemeGradientType value: %d", value)
	}
}

/**************Enum PresetWordArtStyle *****************/

// Represents the preset WordArt styles.
type PresetWordArtStyle int32

const(
// Fill - Black, Text 1, Shadow
PresetWordArtStyle_WordArtStyle1 PresetWordArtStyle = 1 

// Fill - Blue, Accent 1, Shadow
PresetWordArtStyle_WordArtStyle2 PresetWordArtStyle = 2 

// Fill - Orange, Accent 2, Outline - Accent 2
PresetWordArtStyle_WordArtStyle3 PresetWordArtStyle = 3 

// Fill - White, Outline - Accent 1, Shadow
PresetWordArtStyle_WordArtStyle4 PresetWordArtStyle = 4 

// Fill - Gold, Accent 4, Soft Bevel
PresetWordArtStyle_WordArtStyle5 PresetWordArtStyle = 5 

// Gradient Fill - Gray
PresetWordArtStyle_WordArtStyle6 PresetWordArtStyle = 6 

// Gradient Fill - Blue, Accent 1, Reflection
PresetWordArtStyle_WordArtStyle7 PresetWordArtStyle = 7 

// Gradient Fill - Gold, Accent 4, Outline - Accent 4
PresetWordArtStyle_WordArtStyle8 PresetWordArtStyle = 8 

// Fill - White, Outline - Accent 1, Glow - Accent 1
PresetWordArtStyle_WordArtStyle9 PresetWordArtStyle = 9 

// Fill - Gray-50%, Accent 3, Sharp Bevel
PresetWordArtStyle_WordArtStyle10 PresetWordArtStyle = 10 

// Fill - Black, Text 1, Outline - Background 1, Hard Shadow - Background 1
PresetWordArtStyle_WordArtStyle11 PresetWordArtStyle = 11 

// Fill - Black, Text 1, Outline - Background 1, Hard Shadow - Accent 1
PresetWordArtStyle_WordArtStyle12 PresetWordArtStyle = 12 

// Fill - Blue, Accent 1, Outline - Background 1, Hard Shadow - Accent 1
PresetWordArtStyle_WordArtStyle13 PresetWordArtStyle = 13 

// Fill - White, Outline - Accent 2, Hard Shadow - Accent 2
PresetWordArtStyle_WordArtStyle14 PresetWordArtStyle = 14 

// Fill - Gray-25%, Background 2, Inner Shadow
PresetWordArtStyle_WordArtStyle15 PresetWordArtStyle = 15 

// Pattern Fill - White, Text 2, Dark Upward Diagonal, Shadow
PresetWordArtStyle_WordArtStyle16 PresetWordArtStyle = 16 

// Pattern Fill - Gray-50%, Accent 3, Narrow Horizontal, Inner Shadow
PresetWordArtStyle_WordArtStyle17 PresetWordArtStyle = 17 

// Fill - Blue, Accent 1, 50%, Hard Shadow - Accent 1
PresetWordArtStyle_WordArtStyle18 PresetWordArtStyle = 18 

// Pattern Fill - Blue, Accent 1, Light Downward Diagonal, Outline - Accent 1
PresetWordArtStyle_WordArtStyle19 PresetWordArtStyle = 19 

// Pattern Fill - Blue-Gray, Text 2, Dark Upward Diagonal, Hard Shadow - Text 2
PresetWordArtStyle_WordArtStyle20 PresetWordArtStyle = 20 
)

func Int32ToPresetWordArtStyle(value int32)(PresetWordArtStyle ,error){
	switch value {
		case 1:  return PresetWordArtStyle_WordArtStyle1, nil  
		case 2:  return PresetWordArtStyle_WordArtStyle2, nil  
		case 3:  return PresetWordArtStyle_WordArtStyle3, nil  
		case 4:  return PresetWordArtStyle_WordArtStyle4, nil  
		case 5:  return PresetWordArtStyle_WordArtStyle5, nil  
		case 6:  return PresetWordArtStyle_WordArtStyle6, nil  
		case 7:  return PresetWordArtStyle_WordArtStyle7, nil  
		case 8:  return PresetWordArtStyle_WordArtStyle8, nil  
		case 9:  return PresetWordArtStyle_WordArtStyle9, nil  
		case 10:  return PresetWordArtStyle_WordArtStyle10, nil  
		case 11:  return PresetWordArtStyle_WordArtStyle11, nil  
		case 12:  return PresetWordArtStyle_WordArtStyle12, nil  
		case 13:  return PresetWordArtStyle_WordArtStyle13, nil  
		case 14:  return PresetWordArtStyle_WordArtStyle14, nil  
		case 15:  return PresetWordArtStyle_WordArtStyle15, nil  
		case 16:  return PresetWordArtStyle_WordArtStyle16, nil  
		case 17:  return PresetWordArtStyle_WordArtStyle17, nil  
		case 18:  return PresetWordArtStyle_WordArtStyle18, nil  
		case 19:  return PresetWordArtStyle_WordArtStyle19, nil  
		case 20:  return PresetWordArtStyle_WordArtStyle20, nil  
		default:
			return 0 ,fmt.Errorf("invalid PresetWordArtStyle value: %d", value)
	}
}

/**************Enum RectangleAlignmentType *****************/

// Represents how to position two rectangles relative to each other.
type RectangleAlignmentType int32

const(
// Bottom
RectangleAlignmentType_Bottom RectangleAlignmentType = 0 

// BottomLeft
RectangleAlignmentType_BottomLeft RectangleAlignmentType = 1 

// BottomRight
RectangleAlignmentType_BottomRight RectangleAlignmentType = 2 

// Center
RectangleAlignmentType_Center RectangleAlignmentType = 3 

// Left
RectangleAlignmentType_Left RectangleAlignmentType = 4 

// Right
RectangleAlignmentType_Right RectangleAlignmentType = 5 

// Top
RectangleAlignmentType_Top RectangleAlignmentType = 6 

// TopLeft
RectangleAlignmentType_TopLeft RectangleAlignmentType = 7 

// TopRight
RectangleAlignmentType_TopRight RectangleAlignmentType = 8 
)

func Int32ToRectangleAlignmentType(value int32)(RectangleAlignmentType ,error){
	switch value {
		case 0:  return RectangleAlignmentType_Bottom, nil  
		case 1:  return RectangleAlignmentType_BottomLeft, nil  
		case 2:  return RectangleAlignmentType_BottomRight, nil  
		case 3:  return RectangleAlignmentType_Center, nil  
		case 4:  return RectangleAlignmentType_Left, nil  
		case 5:  return RectangleAlignmentType_Right, nil  
		case 6:  return RectangleAlignmentType_Top, nil  
		case 7:  return RectangleAlignmentType_TopLeft, nil  
		case 8:  return RectangleAlignmentType_TopRight, nil  
		default:
			return 0 ,fmt.Errorf("invalid RectangleAlignmentType value: %d", value)
	}
}

/**************Enum ReflectionEffectType *****************/

// Represents the effect type of reflection.
type ReflectionEffectType int32

const(
// No reflection effect.
ReflectionEffectType_None ReflectionEffectType = 0 

// Custom reflection effect.
ReflectionEffectType_Custom ReflectionEffectType = 1 

// Tight reflection, touching.
ReflectionEffectType_TightReflectionTouching ReflectionEffectType = 2 

// Half reflection, touching.
ReflectionEffectType_HalfReflectionTouching ReflectionEffectType = 3 

// Full reflection, touching.
ReflectionEffectType_FullReflectionTouching ReflectionEffectType = 4 

// Tight reflection, 4 pt offset.
ReflectionEffectType_TightReflection4PtOffset ReflectionEffectType = 5 

// Half reflection, 4 pt offset.
ReflectionEffectType_HalfReflection4PtOffset ReflectionEffectType = 6 

// Full reflection, 4 pt offset.
ReflectionEffectType_FullReflection4PtOffset ReflectionEffectType = 7 

// Tight reflection, 8 pt offset.
ReflectionEffectType_TightReflection8PtOffset ReflectionEffectType = 8 

// Half reflection, 8 pt offset.
ReflectionEffectType_HalfReflection8PtOffset ReflectionEffectType = 9 

// Full reflection, 8 pt offset.
ReflectionEffectType_FullReflection8PtOffset ReflectionEffectType = 10 
)

func Int32ToReflectionEffectType(value int32)(ReflectionEffectType ,error){
	switch value {
		case 0:  return ReflectionEffectType_None, nil  
		case 1:  return ReflectionEffectType_Custom, nil  
		case 2:  return ReflectionEffectType_TightReflectionTouching, nil  
		case 3:  return ReflectionEffectType_HalfReflectionTouching, nil  
		case 4:  return ReflectionEffectType_FullReflectionTouching, nil  
		case 5:  return ReflectionEffectType_TightReflection4PtOffset, nil  
		case 6:  return ReflectionEffectType_HalfReflection4PtOffset, nil  
		case 7:  return ReflectionEffectType_FullReflection4PtOffset, nil  
		case 8:  return ReflectionEffectType_TightReflection8PtOffset, nil  
		case 9:  return ReflectionEffectType_HalfReflection8PtOffset, nil  
		case 10:  return ReflectionEffectType_FullReflection8PtOffset, nil  
		default:
			return 0 ,fmt.Errorf("invalid ReflectionEffectType value: %d", value)
	}
}

/**************Enum SelectionType *****************/

// The selection type of list box.
type SelectionType int32

const(
// Sigle selection type.
SelectionType_Single SelectionType = 0 

// Multiple selection type.
SelectionType_Multi SelectionType = 1 

// Extend selection type.
SelectionType_Extend SelectionType = 2 
)

func Int32ToSelectionType(value int32)(SelectionType ,error){
	switch value {
		case 0:  return SelectionType_Single, nil  
		case 1:  return SelectionType_Multi, nil  
		case 2:  return SelectionType_Extend, nil  
		default:
			return 0 ,fmt.Errorf("invalid SelectionType value: %d", value)
	}
}

/**************Enum ShapeAnchorType *****************/

// Represents the anchor type.
type ShapeAnchorType int32

const(
// Represents a two cell anchor placeholder
ShapeAnchorType_TwoCellAnchor ShapeAnchorType = 0 

// Represents a one cell anchor placeholder
ShapeAnchorType_OneCellAnchor ShapeAnchorType = 1 
)

func Int32ToShapeAnchorType(value int32)(ShapeAnchorType ,error){
	switch value {
		case 0:  return ShapeAnchorType_TwoCellAnchor, nil  
		case 1:  return ShapeAnchorType_OneCellAnchor, nil  
		default:
			return 0 ,fmt.Errorf("invalid ShapeAnchorType value: %d", value)
	}
}

/**************Enum ShapeLockType *****************/

// Represents type of the property to be locked.
type ShapeLockType int32

const(
// Group
ShapeLockType_Group ShapeLockType = 0 

// AdjustHandles
ShapeLockType_AdjustHandles ShapeLockType = 1 

// Text
ShapeLockType_Text ShapeLockType = 2 

// Points
ShapeLockType_Points ShapeLockType = 3 

// Crop
ShapeLockType_Crop ShapeLockType = 4 

// Selection
ShapeLockType_Selection ShapeLockType = 5 

// Move
ShapeLockType_Move ShapeLockType = 6 

// AspectRatio
ShapeLockType_AspectRatio ShapeLockType = 7 

// Rotation
ShapeLockType_Rotation ShapeLockType = 8 

// Ungroup
ShapeLockType_Ungroup ShapeLockType = 9 

// Resize
ShapeLockType_Resize ShapeLockType = 10 

// ShapeType
ShapeLockType_ShapeType ShapeLockType = 11 

// Arrowhead
ShapeLockType_Arrowhead ShapeLockType = 12 
)

func Int32ToShapeLockType(value int32)(ShapeLockType ,error){
	switch value {
		case 0:  return ShapeLockType_Group, nil  
		case 1:  return ShapeLockType_AdjustHandles, nil  
		case 2:  return ShapeLockType_Text, nil  
		case 3:  return ShapeLockType_Points, nil  
		case 4:  return ShapeLockType_Crop, nil  
		case 5:  return ShapeLockType_Selection, nil  
		case 6:  return ShapeLockType_Move, nil  
		case 7:  return ShapeLockType_AspectRatio, nil  
		case 8:  return ShapeLockType_Rotation, nil  
		case 9:  return ShapeLockType_Ungroup, nil  
		case 10:  return ShapeLockType_Resize, nil  
		case 11:  return ShapeLockType_ShapeType, nil  
		case 12:  return ShapeLockType_Arrowhead, nil  
		default:
			return 0 ,fmt.Errorf("invalid ShapeLockType value: %d", value)
	}
}

/**************Enum ShapePathType *****************/

// Represents path segment type.
type ShapePathType int32

const(
// Straight line segment
ShapePathType_LineTo ShapePathType = 0 

// Cubic Bezier curve
ShapePathType_CubicBezierCurveTo ShapePathType = 1 

// Start a new path
ShapePathType_MoveTo ShapePathType = 2 

// If the starting POINT and the end POINT are not the same, a single
// straight line is drawn to connect the starting POINT and ending POINT of the path.
ShapePathType_Close ShapePathType = 3 

// The end of the current path
ShapePathType_End ShapePathType = 4 

// Escape
ShapePathType_Escape ShapePathType = 5 

// An arc
ShapePathType_ArcTo ShapePathType = 6 

// Unknown
ShapePathType_Unknown ShapePathType = 7 
)

func Int32ToShapePathType(value int32)(ShapePathType ,error){
	switch value {
		case 0:  return ShapePathType_LineTo, nil  
		case 1:  return ShapePathType_CubicBezierCurveTo, nil  
		case 2:  return ShapePathType_MoveTo, nil  
		case 3:  return ShapePathType_Close, nil  
		case 4:  return ShapePathType_End, nil  
		case 5:  return ShapePathType_Escape, nil  
		case 6:  return ShapePathType_ArcTo, nil  
		case 7:  return ShapePathType_Unknown, nil  
		default:
			return 0 ,fmt.Errorf("invalid ShapePathType value: %d", value)
	}
}

/**************Enum SignatureType *****************/

// Specifies the signature type.
type SignatureType int32

const(
// The default value , the corresponding ProviderId value is fixed to {0000000000-0000-0000-0000-0000000000}.
SignatureType_Default SignatureType = 0 

// The corresponding ProviderId value is usually {000CD6A4-0000-0000-C000-000000000046}.
SignatureType_Stamp SignatureType = 1 

// The corresponding ProviderId value usually needs to be set by the user. it should be obtained from the documentation shipped with the provider.
SignatureType_Custom SignatureType = 3 
)

func Int32ToSignatureType(value int32)(SignatureType ,error){
	switch value {
		case 0:  return SignatureType_Default, nil  
		case 1:  return SignatureType_Stamp, nil  
		case 3:  return SignatureType_Custom, nil  
		default:
			return 0 ,fmt.Errorf("invalid SignatureType value: %d", value)
	}
}

/**************Enum TextOverflowType *****************/

// Represents the way the text vertical or horizontal overflow.
type TextOverflowType int32

const(
// Pay attention to top and bottom barriers.
// Provide no indication that there is text which is not visible.
TextOverflowType_Clip TextOverflowType = 0 

// Pay attention to top and bottom barriers.
// Use an ellipsis to denote that there is text which is not visible.
// Only for vertical overflow.
TextOverflowType_Ellipsis TextOverflowType = 1 

// Overflow the text and pay no attention to top and bottom barriers.
TextOverflowType_Overflow TextOverflowType = 2 
)

func Int32ToTextOverflowType(value int32)(TextOverflowType ,error){
	switch value {
		case 0:  return TextOverflowType_Clip, nil  
		case 1:  return TextOverflowType_Ellipsis, nil  
		case 2:  return TextOverflowType_Overflow, nil  
		default:
			return 0 ,fmt.Errorf("invalid TextOverflowType value: %d", value)
	}
}

/**************Enum TextureType *****************/

// Represents the preset texture type.
type TextureType int32

const(
// Represents Blue Tissue Paper texture type.
TextureType_BlueTissuePaper TextureType = 0 

// Represents Bouquet texture type.
TextureType_Bouquet TextureType = 1 

// Represents Brown Marble texture type.
TextureType_BrownMarble TextureType = 2 

// Represents Canvas texture type.
TextureType_Canvas TextureType = 3 

// Represents Cork texture type.
TextureType_Cork TextureType = 4 

// Represents Denim texture type.
TextureType_Denim TextureType = 5 

// Represents Fish Fossil texture type.
TextureType_FishFossil TextureType = 6 

// Represents Granite texture type.
TextureType_Granite TextureType = 7 

// Represents Green Marble texture type.
TextureType_GreenMarble TextureType = 8 

// Represents Medium Wood texture type.
TextureType_MediumWood TextureType = 9 

// Represents Newsprint texture type.
TextureType_Newsprint TextureType = 10 

// Represents Oak texture type.
TextureType_Oak TextureType = 11 

// Represents Paper Bag texture type.
TextureType_PaperBag TextureType = 12 

// Represents Papyrus texture type.
TextureType_Papyrus TextureType = 13 

// Represents Parchment texture type.
TextureType_Parchment TextureType = 14 

// Represents Pink Tissue Paper texture type.
TextureType_PinkTissuePaper TextureType = 15 

// Represents Purple Mesh texture type.
TextureType_PurpleMesh TextureType = 16 

// Represents Recycled Paper texture type.
TextureType_RecycledPaper TextureType = 17 

// Represents Sand texture type.
TextureType_Sand TextureType = 18 

// Represents Stationery texture type.
TextureType_Stationery TextureType = 19 

// Represents Walnut Droplets texture type.
TextureType_Walnut TextureType = 20 

// Represents Water Droplets texture type.
TextureType_WaterDroplets TextureType = 21 

// Represents White Marble texture type.
TextureType_WhiteMarble TextureType = 22 

// Represents Woven Mat texture type.
TextureType_WovenMat TextureType = 23 

// Represents Unknown texture type.
TextureType_Unknown TextureType = 24 
)

func Int32ToTextureType(value int32)(TextureType ,error){
	switch value {
		case 0:  return TextureType_BlueTissuePaper, nil  
		case 1:  return TextureType_Bouquet, nil  
		case 2:  return TextureType_BrownMarble, nil  
		case 3:  return TextureType_Canvas, nil  
		case 4:  return TextureType_Cork, nil  
		case 5:  return TextureType_Denim, nil  
		case 6:  return TextureType_FishFossil, nil  
		case 7:  return TextureType_Granite, nil  
		case 8:  return TextureType_GreenMarble, nil  
		case 9:  return TextureType_MediumWood, nil  
		case 10:  return TextureType_Newsprint, nil  
		case 11:  return TextureType_Oak, nil  
		case 12:  return TextureType_PaperBag, nil  
		case 13:  return TextureType_Papyrus, nil  
		case 14:  return TextureType_Parchment, nil  
		case 15:  return TextureType_PinkTissuePaper, nil  
		case 16:  return TextureType_PurpleMesh, nil  
		case 17:  return TextureType_RecycledPaper, nil  
		case 18:  return TextureType_Sand, nil  
		case 19:  return TextureType_Stationery, nil  
		case 20:  return TextureType_Walnut, nil  
		case 21:  return TextureType_WaterDroplets, nil  
		case 22:  return TextureType_WhiteMarble, nil  
		case 23:  return TextureType_WovenMat, nil  
		case 24:  return TextureType_Unknown, nil  
		default:
			return 0 ,fmt.Errorf("invalid TextureType value: %d", value)
	}
}

/**************Enum WeightType *****************/

// Enumerates the weight types for a picture border or a chart line.
type WeightType int32

const(
// Represents the weight of hair line.
WeightType_HairLine WeightType = -1 

// Represents the weight of medium line.
WeightType_MediumLine WeightType = 1 

// Represents the weight of single line.
WeightType_SingleLine WeightType = 0 

// Represents the weight of wide line.
WeightType_WideLine WeightType = 2 
)

func Int32ToWeightType(value int32)(WeightType ,error){
	switch value {
		case -1:  return WeightType_HairLine, nil  
		case 1:  return WeightType_MediumLine, nil  
		case 0:  return WeightType_SingleLine, nil  
		case 2:  return WeightType_WideLine, nil  
		default:
			return 0 ,fmt.Errorf("invalid WeightType value: %d", value)
	}
}
// Class ArcShape 

// Represents the arc shape.
type ArcShape struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewArcShape(src *Shape) ( *ArcShape, error) {
	arcshape := &ArcShape{}
	CGoReturnPtr := C.New_ArcShape(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		arcshape.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(arcshape, DeleteArcShape)
		return arcshape, nil
	} else {
		arcshape.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return arcshape, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *ArcShape) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.ArcShape_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *ArcShape) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.ArcShape_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ArcShape) SetMacroName(value string)  error {
	CGoReturnPtr := C.ArcShape_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *ArcShape) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.ArcShape_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *ArcShape) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.ArcShape_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *ArcShape) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.ArcShape_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *ArcShape) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *ArcShape) GetName()  (string,  error)  {
	CGoReturnPtr := C.ArcShape_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ArcShape) SetName(value string)  error {
	CGoReturnPtr := C.ArcShape_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *ArcShape) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.ArcShape_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ArcShape) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.ArcShape_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *ArcShape) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.ArcShape_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ArcShape) SetTitle(value string)  error {
	CGoReturnPtr := C.ArcShape_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *ArcShape) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.ArcShape_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *ArcShape) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.ArcShape_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *ArcShape) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.ArcShape_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *ArcShape) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.ArcShape_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *ArcShape) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.ArcShape_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *ArcShape) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.ArcShape_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ArcShape) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.ArcShape_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *ArcShape) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.ArcShape_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *ArcShape) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.ArcShape_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *ArcShape) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.ArcShape_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ArcShape) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.ArcShape_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *ArcShape) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.ArcShape_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ArcShape) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.ArcShape_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *ArcShape) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.ArcShape_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *ArcShape) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.ArcShape_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *ArcShape) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.ArcShape_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ArcShape) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.ArcShape_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *ArcShape) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.ArcShape_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *ArcShape) RemoveHyperlink()  error {
	CGoReturnPtr := C.ArcShape_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *ArcShape) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.ArcShape_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *ArcShape) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.ArcShape_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *ArcShape) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.ArcShape_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *ArcShape) GetId()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *ArcShape) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.ArcShape_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *ArcShape) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *ArcShape) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.ArcShape_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *ArcShape) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.ArcShape_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *ArcShape) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.ArcShape_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *ArcShape) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.ArcShape_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *ArcShape) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.ArcShape_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *ArcShape) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.ArcShape_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ArcShape) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.ArcShape_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *ArcShape) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.ArcShape_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ArcShape) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.ArcShape_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *ArcShape) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.ArcShape_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *ArcShape) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.ArcShape_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.ArcShape_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *ArcShape) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.ArcShape_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.ArcShape_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *ArcShape) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.ArcShape_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.ArcShape_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *ArcShape) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *ArcShape) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *ArcShape) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *ArcShape) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *ArcShape) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *ArcShape) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *ArcShape) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *ArcShape) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *ArcShape) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetRight(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *ArcShape) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetBottom(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *ArcShape) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetWidth(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *ArcShape) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.ArcShape_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ArcShape) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.ArcShape_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *ArcShape) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.ArcShape_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ArcShape) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.ArcShape_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *ArcShape) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.ArcShape_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ArcShape) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.ArcShape_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *ArcShape) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetHeight(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *ArcShape) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.ArcShape_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ArcShape) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.ArcShape_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *ArcShape) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.ArcShape_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ArcShape) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.ArcShape_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *ArcShape) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.ArcShape_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ArcShape) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.ArcShape_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *ArcShape) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetLeft(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *ArcShape) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.ArcShape_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ArcShape) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.ArcShape_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *ArcShape) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.ArcShape_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ArcShape) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.ArcShape_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *ArcShape) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetTop(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *ArcShape) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.ArcShape_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ArcShape) SetTopInch(value float64)  error {
	CGoReturnPtr := C.ArcShape_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *ArcShape) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.ArcShape_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ArcShape) SetTopCM(value float64)  error {
	CGoReturnPtr := C.ArcShape_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *ArcShape) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *ArcShape) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *ArcShape) GetX()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetX(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *ArcShape) GetY()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetY(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *ArcShape) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *ArcShape) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *ArcShape) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *ArcShape) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *ArcShape) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *ArcShape) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.ArcShape_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *ArcShape) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.ArcShape_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *ArcShape) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.ArcShape_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *ArcShape) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.ArcShape_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ArcShape) SetHasLine(value bool)  error {
	CGoReturnPtr := C.ArcShape_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *ArcShape) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.ArcShape_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ArcShape) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.ArcShape_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *ArcShape) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.ArcShape_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ArcShape) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.ArcShape_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *ArcShape) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.ArcShape_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ArcShape) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.ArcShape_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *ArcShape) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.ArcShape_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *ArcShape) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.ArcShape_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *ArcShape) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.ArcShape_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ArcShape) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.ArcShape_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *ArcShape) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.ArcShape_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ArcShape) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.ArcShape_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *ArcShape) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.ArcShape_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ArcShape) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.ArcShape_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *ArcShape) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.ArcShape_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *ArcShape) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.ArcShape_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *ArcShape) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.ArcShape_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *ArcShape) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.ArcShape_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *ArcShape) UpdateSelectedValue()  error {
	CGoReturnPtr := C.ArcShape_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *ArcShape) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.ArcShape_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.ArcShape_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *ArcShape) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.ArcShape_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *ArcShape) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.ArcShape_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *ArcShape) SetFont(value *Font)  error {
	CGoReturnPtr := C.ArcShape_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *ArcShape) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.ArcShape_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *ArcShape) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.ArcShape_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *ArcShape) GetText()  (string,  error)  {
	CGoReturnPtr := C.ArcShape_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ArcShape) SetText(value string)  error {
	CGoReturnPtr := C.ArcShape_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *ArcShape) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.ArcShape_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *ArcShape) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.ArcShape_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ArcShape) SetHtmlText(value string)  error {
	CGoReturnPtr := C.ArcShape_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *ArcShape) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.ArcShape_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *ArcShape) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.ArcShape_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *ArcShape) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.ArcShape_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.ArcShape_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *ArcShape) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.ArcShape_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.ArcShape_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *ArcShape) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.ArcShape_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ArcShape) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.ArcShape_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *ArcShape) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.ArcShape_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.ArcShape_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *ArcShape) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.ArcShape_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.ArcShape_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *ArcShape) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.ArcShape_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.ArcShape_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *ArcShape) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.ArcShape_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ArcShape) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.ArcShape_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *ArcShape) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.ArcShape_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *ArcShape) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.ArcShape_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *ArcShape) RemoveActiveXControl()  error {
	CGoReturnPtr := C.ArcShape_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *ArcShape) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.ArcShape_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *ArcShape) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.ArcShape_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *ArcShape) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.ArcShape_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *ArcShape) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.ArcShape_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *ArcShape) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.ArcShape_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ArcShape) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.ArcShape_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *ArcShape) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.ArcShape_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *ArcShape) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.ArcShape_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteArcShape(arcshape *ArcShape){
	runtime.SetFinalizer(arcshape, nil)
	C.Delete_ArcShape(arcshape.ptr)
	arcshape.ptr = nil
}

// Class Area 

// Encapsulates the object that represents an area format.
type Area struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *Area) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.Area_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets or sets the background <see cref="Color"/> of the <see cref="Area"/>.
// Returns:
//   Color  
func (instance *Area) GetBackgroundColor()  (*Color,  error)  {
	CGoReturnPtr := C.Area_GetBackgroundColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Color{}
	result.ptr = CGoReturnPtr.return_value 

	return result, nil 
}
// Gets or sets the background <see cref="Color"/> of the <see cref="Area"/>.
// Parameters:
//   value - Color 
// Returns:
//   void  
func (instance *Area) SetBackgroundColor(value *Color)  error {
	CGoReturnPtr := C.Area_SetBackgroundColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the foreground <see cref="Color"/>.
// Returns:
//   Color  
func (instance *Area) GetForegroundColor()  (*Color,  error)  {
	CGoReturnPtr := C.Area_GetForegroundColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Color{}
	result.ptr = CGoReturnPtr.return_value 

	return result, nil 
}
// Gets or sets the foreground <see cref="Color"/>.
// Parameters:
//   value - Color 
// Returns:
//   void  
func (instance *Area) SetForegroundColor(value *Color)  error {
	CGoReturnPtr := C.Area_SetForegroundColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the formatting of the area.
// Returns:
//   int32  
func (instance *Area) GetFormatting()  (FormattingType,  error)  {
	CGoReturnPtr := C.Area_GetFormatting( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToFormattingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the formatting of the area.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Area) SetFormatting(value FormattingType)  error {
	CGoReturnPtr := C.Area_SetFormatting( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// If the property is true and the value of chart point is a negative number,
// the foreground color and background color will be exchanged.
// Returns:
//   bool  
func (instance *Area) GetInvertIfNegative()  (bool,  error)  {
	CGoReturnPtr := C.Area_GetInvertIfNegative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// If the property is true and the value of chart point is a negative number,
// the foreground color and background color will be exchanged.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Area) SetInvertIfNegative(value bool)  error {
	CGoReturnPtr := C.Area_SetInvertIfNegative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents a <see cref="FillFormat"/> object that contains fill formatting properties for the specified chart or shape.
// Returns:
//   FillFormat  
func (instance *Area) GetFillFormat()  (*FillFormat,  error)  {
	CGoReturnPtr := C.Area_GetFillFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
// Returns:
//   float64  
func (instance *Area) GetTransparency()  (float64,  error)  {
	CGoReturnPtr := C.Area_GetTransparency( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Area) SetTransparency(value float64)  error {
	CGoReturnPtr := C.Area_SetTransparency( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeleteArea(area *Area){
	runtime.SetFinalizer(area, nil)
	C.Delete_Area(area.ptr)
	area.ptr = nil
}

// Class AutomaticFill 

// represents automatic fill.
type AutomaticFill struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *AutomaticFill) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.AutomaticFill_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteAutomaticFill(automaticfill *AutomaticFill){
	runtime.SetFinalizer(automaticfill, nil)
	C.Delete_AutomaticFill(automaticfill.ptr)
	automaticfill.ptr = nil
}

// Class BaseShapeGuide 

// Represents the shape guide.
type BaseShapeGuide struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *BaseShapeGuide) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.BaseShapeGuide_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteBaseShapeGuide(baseshapeguide *BaseShapeGuide){
	runtime.SetFinalizer(baseshapeguide, nil)
	C.Delete_BaseShapeGuide(baseshapeguide.ptr)
	baseshapeguide.ptr = nil
}

// Class Bevel 

// Represents a bevel of a shape
type Bevel struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *Bevel) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.Bevel_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the width of the bevel, or how far into the shape it is applied.
// In unit of Points.
// Returns:
//   float64  
func (instance *Bevel) GetWidth()  (float64,  error)  {
	CGoReturnPtr := C.Bevel_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width of the bevel, or how far into the shape it is applied.
// In unit of Points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Bevel) SetWidth(value float64)  error {
	CGoReturnPtr := C.Bevel_SetWidth( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height of the bevel, or how far above the shape it is applied.
// In unit of Points.
// Returns:
//   float64  
func (instance *Bevel) GetHeight()  (float64,  error)  {
	CGoReturnPtr := C.Bevel_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height of the bevel, or how far above the shape it is applied.
// In unit of Points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Bevel) SetHeight(value float64)  error {
	CGoReturnPtr := C.Bevel_SetHeight( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset bevel type.
// Returns:
//   int32  
func (instance *Bevel) GetType()  (BevelPresetType,  error)  {
	CGoReturnPtr := C.Bevel_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToBevelPresetType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset bevel type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Bevel) SetType(value BevelPresetType)  error {
	CGoReturnPtr := C.Bevel_SetType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeleteBevel(bevel *Bevel){
	runtime.SetFinalizer(bevel, nil)
	C.Delete_Bevel(bevel.ptr)
	bevel.ptr = nil
}

// Class Button 

// Represents the Forms control: Button
type Button struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewButton(src *Shape) ( *Button, error) {
	button := &Button{}
	CGoReturnPtr := C.New_Button(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		button.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(button, DeleteButton)
		return button, nil
	} else {
		button.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return button, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *Button) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.Button_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *Button) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.Button_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Button) SetMacroName(value string)  error {
	CGoReturnPtr := C.Button_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *Button) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.Button_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *Button) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.Button_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *Button) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.Button_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *Button) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.Button_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *Button) GetName()  (string,  error)  {
	CGoReturnPtr := C.Button_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Button) SetName(value string)  error {
	CGoReturnPtr := C.Button_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *Button) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.Button_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Button) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.Button_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *Button) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.Button_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Button) SetTitle(value string)  error {
	CGoReturnPtr := C.Button_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *Button) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.Button_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *Button) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.Button_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *Button) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.Button_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *Button) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.Button_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *Button) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.Button_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *Button) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.Button_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Button) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.Button_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *Button) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.Button_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *Button) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.Button_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *Button) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.Button_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Button) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.Button_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *Button) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.Button_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Button) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.Button_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *Button) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.Button_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *Button) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.Button_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *Button) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.Button_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Button) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.Button_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *Button) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.Button_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *Button) RemoveHyperlink()  error {
	CGoReturnPtr := C.Button_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *Button) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.Button_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *Button) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.Button_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *Button) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.Button_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *Button) GetId()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *Button) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.Button_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *Button) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *Button) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.Button_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *Button) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.Button_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *Button) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.Button_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *Button) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.Button_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *Button) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.Button_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *Button) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.Button_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Button) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.Button_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *Button) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.Button_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Button) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.Button_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *Button) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.Button_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *Button) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.Button_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.Button_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *Button) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.Button_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.Button_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *Button) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.Button_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.Button_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *Button) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.Button_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *Button) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.Button_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *Button) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.Button_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *Button) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.Button_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *Button) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.Button_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *Button) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.Button_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *Button) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.Button_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *Button) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.Button_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *Button) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetRight(value int32)  error {
	CGoReturnPtr := C.Button_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *Button) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetBottom(value int32)  error {
	CGoReturnPtr := C.Button_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *Button) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetWidth(value int32)  error {
	CGoReturnPtr := C.Button_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *Button) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.Button_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Button) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.Button_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *Button) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.Button_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Button) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.Button_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *Button) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.Button_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Button) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.Button_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *Button) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetHeight(value int32)  error {
	CGoReturnPtr := C.Button_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *Button) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.Button_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Button) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.Button_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *Button) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.Button_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Button) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.Button_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *Button) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.Button_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Button) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.Button_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *Button) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetLeft(value int32)  error {
	CGoReturnPtr := C.Button_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *Button) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.Button_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Button) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.Button_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *Button) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.Button_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Button) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.Button_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *Button) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetTop(value int32)  error {
	CGoReturnPtr := C.Button_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *Button) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.Button_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Button) SetTopInch(value float64)  error {
	CGoReturnPtr := C.Button_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *Button) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.Button_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Button) SetTopCM(value float64)  error {
	CGoReturnPtr := C.Button_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *Button) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.Button_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *Button) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.Button_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *Button) GetX()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetX(value int32)  error {
	CGoReturnPtr := C.Button_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *Button) GetY()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetY(value int32)  error {
	CGoReturnPtr := C.Button_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *Button) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.Button_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *Button) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.Button_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *Button) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.Button_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *Button) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.Button_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *Button) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.Button_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *Button) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.Button_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *Button) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.Button_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *Button) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.Button_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *Button) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.Button_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Button) SetHasLine(value bool)  error {
	CGoReturnPtr := C.Button_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *Button) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.Button_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Button) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.Button_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *Button) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.Button_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Button) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.Button_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *Button) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.Button_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Button) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.Button_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *Button) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.Button_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *Button) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.Button_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *Button) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.Button_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Button) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.Button_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *Button) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.Button_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Button) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.Button_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *Button) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.Button_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Button) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.Button_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *Button) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.Button_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *Button) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.Button_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *Button) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.Button_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *Button) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.Button_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *Button) UpdateSelectedValue()  error {
	CGoReturnPtr := C.Button_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *Button) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.Button_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.Button_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *Button) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.Button_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *Button) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.Button_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *Button) SetFont(value *Font)  error {
	CGoReturnPtr := C.Button_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *Button) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.Button_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *Button) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.Button_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *Button) GetText()  (string,  error)  {
	CGoReturnPtr := C.Button_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Button) SetText(value string)  error {
	CGoReturnPtr := C.Button_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *Button) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.Button_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *Button) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.Button_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Button) SetHtmlText(value string)  error {
	CGoReturnPtr := C.Button_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *Button) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.Button_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *Button) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.Button_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *Button) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.Button_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.Button_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *Button) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.Button_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.Button_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *Button) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.Button_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Button) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.Button_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *Button) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.Button_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.Button_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *Button) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.Button_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.Button_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *Button) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.Button_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.Button_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *Button) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.Button_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Button) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.Button_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *Button) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.Button_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *Button) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.Button_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *Button) RemoveActiveXControl()  error {
	CGoReturnPtr := C.Button_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *Button) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.Button_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *Button) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.Button_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *Button) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.Button_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *Button) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.Button_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *Button) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.Button_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Button) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.Button_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *Button) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.Button_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *Button) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.Button_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteButton(button *Button){
	runtime.SetFinalizer(button, nil)
	C.Delete_Button(button.ptr)
	button.ptr = nil
}

// Class CellsDrawing 

// Represents the auto shape and drawing object.
type CellsDrawing struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewCellsDrawing(src *Shape) ( *CellsDrawing, error) {
	cellsdrawing := &CellsDrawing{}
	CGoReturnPtr := C.New_CellsDrawing(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		cellsdrawing.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(cellsdrawing, DeleteCellsDrawing)
		return cellsdrawing, nil
	} else {
		cellsdrawing.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return cellsdrawing, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *CellsDrawing) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.CellsDrawing_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *CellsDrawing) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CellsDrawing) SetMacroName(value string)  error {
	CGoReturnPtr := C.CellsDrawing_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *CellsDrawing) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.CellsDrawing_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *CellsDrawing) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.CellsDrawing_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *CellsDrawing) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.CellsDrawing_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *CellsDrawing) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *CellsDrawing) GetName()  (string,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CellsDrawing) SetName(value string)  error {
	CGoReturnPtr := C.CellsDrawing_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *CellsDrawing) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CellsDrawing) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.CellsDrawing_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *CellsDrawing) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CellsDrawing) SetTitle(value string)  error {
	CGoReturnPtr := C.CellsDrawing_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *CellsDrawing) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *CellsDrawing) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *CellsDrawing) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *CellsDrawing) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *CellsDrawing) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *CellsDrawing) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CellsDrawing) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.CellsDrawing_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *CellsDrawing) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *CellsDrawing) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *CellsDrawing) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.CellsDrawing_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CellsDrawing) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.CellsDrawing_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *CellsDrawing) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.CellsDrawing_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CellsDrawing) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.CellsDrawing_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *CellsDrawing) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *CellsDrawing) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.CellsDrawing_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *CellsDrawing) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CellsDrawing) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.CellsDrawing_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *CellsDrawing) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.CellsDrawing_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *CellsDrawing) RemoveHyperlink()  error {
	CGoReturnPtr := C.CellsDrawing_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *CellsDrawing) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *CellsDrawing) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.CellsDrawing_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *CellsDrawing) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.CellsDrawing_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *CellsDrawing) GetId()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *CellsDrawing) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *CellsDrawing) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *CellsDrawing) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *CellsDrawing) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.CellsDrawing_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *CellsDrawing) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.CellsDrawing_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *CellsDrawing) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.CellsDrawing_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *CellsDrawing) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *CellsDrawing) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.CellsDrawing_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CellsDrawing) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.CellsDrawing_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *CellsDrawing) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.CellsDrawing_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CellsDrawing) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.CellsDrawing_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *CellsDrawing) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *CellsDrawing) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.CellsDrawing_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *CellsDrawing) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.CellsDrawing_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *CellsDrawing) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.CellsDrawing_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *CellsDrawing) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *CellsDrawing) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *CellsDrawing) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *CellsDrawing) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *CellsDrawing) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *CellsDrawing) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *CellsDrawing) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *CellsDrawing) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *CellsDrawing) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetRight(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *CellsDrawing) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetBottom(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *CellsDrawing) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetWidth(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *CellsDrawing) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CellsDrawing) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.CellsDrawing_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *CellsDrawing) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CellsDrawing) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.CellsDrawing_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *CellsDrawing) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CellsDrawing) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.CellsDrawing_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *CellsDrawing) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetHeight(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *CellsDrawing) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CellsDrawing) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.CellsDrawing_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *CellsDrawing) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CellsDrawing) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.CellsDrawing_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *CellsDrawing) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CellsDrawing) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.CellsDrawing_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *CellsDrawing) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetLeft(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *CellsDrawing) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CellsDrawing) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.CellsDrawing_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *CellsDrawing) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CellsDrawing) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.CellsDrawing_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *CellsDrawing) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetTop(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *CellsDrawing) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CellsDrawing) SetTopInch(value float64)  error {
	CGoReturnPtr := C.CellsDrawing_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *CellsDrawing) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CellsDrawing) SetTopCM(value float64)  error {
	CGoReturnPtr := C.CellsDrawing_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *CellsDrawing) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *CellsDrawing) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *CellsDrawing) GetX()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetX(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *CellsDrawing) GetY()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetY(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *CellsDrawing) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *CellsDrawing) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *CellsDrawing) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *CellsDrawing) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *CellsDrawing) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *CellsDrawing) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.CellsDrawing_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *CellsDrawing) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *CellsDrawing) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *CellsDrawing) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CellsDrawing) SetHasLine(value bool)  error {
	CGoReturnPtr := C.CellsDrawing_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *CellsDrawing) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.CellsDrawing_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CellsDrawing) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.CellsDrawing_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *CellsDrawing) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.CellsDrawing_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CellsDrawing) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.CellsDrawing_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *CellsDrawing) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.CellsDrawing_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CellsDrawing) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.CellsDrawing_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *CellsDrawing) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *CellsDrawing) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.CellsDrawing_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *CellsDrawing) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CellsDrawing) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.CellsDrawing_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *CellsDrawing) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CellsDrawing) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.CellsDrawing_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *CellsDrawing) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CellsDrawing) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.CellsDrawing_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *CellsDrawing) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *CellsDrawing) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.CellsDrawing_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *CellsDrawing) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *CellsDrawing) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.CellsDrawing_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *CellsDrawing) UpdateSelectedValue()  error {
	CGoReturnPtr := C.CellsDrawing_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *CellsDrawing) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.CellsDrawing_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *CellsDrawing) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *CellsDrawing) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *CellsDrawing) SetFont(value *Font)  error {
	CGoReturnPtr := C.CellsDrawing_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *CellsDrawing) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *CellsDrawing) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.CellsDrawing_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *CellsDrawing) GetText()  (string,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CellsDrawing) SetText(value string)  error {
	CGoReturnPtr := C.CellsDrawing_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *CellsDrawing) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.CellsDrawing_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *CellsDrawing) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CellsDrawing) SetHtmlText(value string)  error {
	CGoReturnPtr := C.CellsDrawing_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *CellsDrawing) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.CellsDrawing_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *CellsDrawing) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.CellsDrawing_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *CellsDrawing) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.CellsDrawing_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *CellsDrawing) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.CellsDrawing_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *CellsDrawing) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.CellsDrawing_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CellsDrawing) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.CellsDrawing_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *CellsDrawing) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.CellsDrawing_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *CellsDrawing) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.CellsDrawing_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *CellsDrawing) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.CellsDrawing_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *CellsDrawing) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CellsDrawing) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.CellsDrawing_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *CellsDrawing) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *CellsDrawing) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *CellsDrawing) RemoveActiveXControl()  error {
	CGoReturnPtr := C.CellsDrawing_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *CellsDrawing) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *CellsDrawing) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *CellsDrawing) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.CellsDrawing_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *CellsDrawing) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.CellsDrawing_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *CellsDrawing) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.CellsDrawing_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CellsDrawing) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.CellsDrawing_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *CellsDrawing) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.CellsDrawing_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *CellsDrawing) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.CellsDrawing_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteCellsDrawing(cellsdrawing *CellsDrawing){
	runtime.SetFinalizer(cellsdrawing, nil)
	C.Delete_CellsDrawing(cellsdrawing.ptr)
	cellsdrawing.ptr = nil
}

// Class ChartShape 

// Represents the shape of the chart.
// Properties and methods for the ChartObject object control the appearance and size of the embedded chart on the worksheet.
type ChartShape struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewChartShape(src *Shape) ( *ChartShape, error) {
	chartshape := &ChartShape{}
	CGoReturnPtr := C.New_ChartShape(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		chartshape.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(chartshape, DeleteChartShape)
		return chartshape, nil
	} else {
		chartshape.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return chartshape, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *ChartShape) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.ChartShape_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a Chart object that represents the chart contained in the object.
// Returns:
//   Chart  
func (instance *ChartShape) GetChart()  (*Chart,  error)  {
	CGoReturnPtr := C.ChartShape_GetChart( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Chart{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteChart) 

	return result, nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *ChartShape) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.ChartShape_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ChartShape) SetMacroName(value string)  error {
	CGoReturnPtr := C.ChartShape_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *ChartShape) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.ChartShape_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *ChartShape) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.ChartShape_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *ChartShape) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.ChartShape_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *ChartShape) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *ChartShape) GetName()  (string,  error)  {
	CGoReturnPtr := C.ChartShape_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ChartShape) SetName(value string)  error {
	CGoReturnPtr := C.ChartShape_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *ChartShape) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.ChartShape_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ChartShape) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.ChartShape_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *ChartShape) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.ChartShape_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ChartShape) SetTitle(value string)  error {
	CGoReturnPtr := C.ChartShape_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *ChartShape) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.ChartShape_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *ChartShape) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.ChartShape_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *ChartShape) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.ChartShape_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *ChartShape) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.ChartShape_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *ChartShape) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.ChartShape_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *ChartShape) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.ChartShape_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ChartShape) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.ChartShape_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *ChartShape) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.ChartShape_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *ChartShape) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.ChartShape_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *ChartShape) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.ChartShape_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ChartShape) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.ChartShape_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *ChartShape) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.ChartShape_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ChartShape) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.ChartShape_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *ChartShape) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.ChartShape_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *ChartShape) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.ChartShape_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *ChartShape) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.ChartShape_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ChartShape) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.ChartShape_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *ChartShape) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.ChartShape_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *ChartShape) RemoveHyperlink()  error {
	CGoReturnPtr := C.ChartShape_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *ChartShape) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.ChartShape_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *ChartShape) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.ChartShape_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *ChartShape) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.ChartShape_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *ChartShape) GetId()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *ChartShape) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.ChartShape_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *ChartShape) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *ChartShape) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.ChartShape_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *ChartShape) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.ChartShape_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *ChartShape) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.ChartShape_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *ChartShape) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.ChartShape_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *ChartShape) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.ChartShape_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *ChartShape) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.ChartShape_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ChartShape) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.ChartShape_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *ChartShape) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.ChartShape_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ChartShape) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.ChartShape_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *ChartShape) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.ChartShape_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *ChartShape) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.ChartShape_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.ChartShape_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *ChartShape) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.ChartShape_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.ChartShape_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *ChartShape) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.ChartShape_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.ChartShape_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *ChartShape) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *ChartShape) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *ChartShape) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *ChartShape) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *ChartShape) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *ChartShape) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *ChartShape) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *ChartShape) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *ChartShape) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetRight(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *ChartShape) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetBottom(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *ChartShape) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetWidth(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *ChartShape) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.ChartShape_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ChartShape) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.ChartShape_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *ChartShape) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.ChartShape_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ChartShape) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.ChartShape_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *ChartShape) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.ChartShape_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ChartShape) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.ChartShape_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *ChartShape) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetHeight(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *ChartShape) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.ChartShape_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ChartShape) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.ChartShape_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *ChartShape) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.ChartShape_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ChartShape) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.ChartShape_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *ChartShape) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.ChartShape_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ChartShape) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.ChartShape_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *ChartShape) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetLeft(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *ChartShape) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.ChartShape_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ChartShape) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.ChartShape_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *ChartShape) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.ChartShape_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ChartShape) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.ChartShape_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *ChartShape) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetTop(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *ChartShape) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.ChartShape_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ChartShape) SetTopInch(value float64)  error {
	CGoReturnPtr := C.ChartShape_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *ChartShape) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.ChartShape_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ChartShape) SetTopCM(value float64)  error {
	CGoReturnPtr := C.ChartShape_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *ChartShape) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *ChartShape) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *ChartShape) GetX()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetX(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *ChartShape) GetY()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetY(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *ChartShape) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *ChartShape) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *ChartShape) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *ChartShape) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *ChartShape) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *ChartShape) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.ChartShape_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *ChartShape) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.ChartShape_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *ChartShape) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.ChartShape_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *ChartShape) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.ChartShape_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ChartShape) SetHasLine(value bool)  error {
	CGoReturnPtr := C.ChartShape_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *ChartShape) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.ChartShape_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ChartShape) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.ChartShape_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *ChartShape) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.ChartShape_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ChartShape) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.ChartShape_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *ChartShape) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.ChartShape_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ChartShape) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.ChartShape_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *ChartShape) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.ChartShape_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *ChartShape) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.ChartShape_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *ChartShape) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.ChartShape_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ChartShape) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.ChartShape_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *ChartShape) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.ChartShape_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ChartShape) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.ChartShape_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *ChartShape) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.ChartShape_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ChartShape) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.ChartShape_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *ChartShape) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.ChartShape_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *ChartShape) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.ChartShape_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *ChartShape) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.ChartShape_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *ChartShape) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.ChartShape_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *ChartShape) UpdateSelectedValue()  error {
	CGoReturnPtr := C.ChartShape_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *ChartShape) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.ChartShape_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.ChartShape_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *ChartShape) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.ChartShape_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *ChartShape) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.ChartShape_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *ChartShape) SetFont(value *Font)  error {
	CGoReturnPtr := C.ChartShape_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *ChartShape) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.ChartShape_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *ChartShape) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.ChartShape_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *ChartShape) GetText()  (string,  error)  {
	CGoReturnPtr := C.ChartShape_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ChartShape) SetText(value string)  error {
	CGoReturnPtr := C.ChartShape_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *ChartShape) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.ChartShape_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *ChartShape) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.ChartShape_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ChartShape) SetHtmlText(value string)  error {
	CGoReturnPtr := C.ChartShape_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *ChartShape) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.ChartShape_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *ChartShape) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.ChartShape_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *ChartShape) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.ChartShape_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.ChartShape_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *ChartShape) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.ChartShape_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.ChartShape_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *ChartShape) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.ChartShape_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ChartShape) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.ChartShape_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *ChartShape) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.ChartShape_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.ChartShape_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *ChartShape) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.ChartShape_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.ChartShape_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *ChartShape) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.ChartShape_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.ChartShape_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *ChartShape) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.ChartShape_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ChartShape) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.ChartShape_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *ChartShape) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.ChartShape_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *ChartShape) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.ChartShape_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *ChartShape) RemoveActiveXControl()  error {
	CGoReturnPtr := C.ChartShape_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *ChartShape) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.ChartShape_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *ChartShape) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.ChartShape_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *ChartShape) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.ChartShape_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *ChartShape) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.ChartShape_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *ChartShape) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.ChartShape_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ChartShape) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.ChartShape_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *ChartShape) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.ChartShape_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *ChartShape) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.ChartShape_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteChartShape(chartshape *ChartShape){
	runtime.SetFinalizer(chartshape, nil)
	C.Delete_ChartShape(chartshape.ptr)
	chartshape.ptr = nil
}

// Class CheckBox 

// Represents a check box object in a worksheet.
type CheckBox struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewCheckBox(src *Shape) ( *CheckBox, error) {
	checkbox := &CheckBox{}
	CGoReturnPtr := C.New_CheckBox(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		checkbox.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(checkbox, DeleteCheckBox)
		return checkbox, nil
	} else {
		checkbox.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return checkbox, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *CheckBox) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.CheckBox_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates if the checkbox is checked or not.
// Returns:
//   bool  
func (instance *CheckBox) GetValue()  (bool,  error)  {
	CGoReturnPtr := C.CheckBox_GetValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates if the checkbox is checked or not.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CheckBox) SetValue(value bool)  error {
	CGoReturnPtr := C.CheckBox_SetValue( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or set checkbox' value.
// Returns:
//   int32  
func (instance *CheckBox) GetCheckedValue()  (CheckValueType,  error)  {
	CGoReturnPtr := C.CheckBox_GetCheckedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToCheckValueType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets or set checkbox' value.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetCheckedValue(value CheckValueType)  error {
	CGoReturnPtr := C.CheckBox_SetCheckedValue( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the combobox has 3-D shading.
// Returns:
//   bool  
func (instance *CheckBox) GetShadow()  (bool,  error)  {
	CGoReturnPtr := C.CheckBox_GetShadow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the combobox has 3-D shading.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CheckBox) SetShadow(value bool)  error {
	CGoReturnPtr := C.CheckBox_SetShadow( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *CheckBox) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.CheckBox_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CheckBox) SetMacroName(value string)  error {
	CGoReturnPtr := C.CheckBox_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *CheckBox) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.CheckBox_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *CheckBox) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.CheckBox_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *CheckBox) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.CheckBox_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *CheckBox) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *CheckBox) GetName()  (string,  error)  {
	CGoReturnPtr := C.CheckBox_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CheckBox) SetName(value string)  error {
	CGoReturnPtr := C.CheckBox_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *CheckBox) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.CheckBox_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CheckBox) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.CheckBox_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *CheckBox) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.CheckBox_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CheckBox) SetTitle(value string)  error {
	CGoReturnPtr := C.CheckBox_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *CheckBox) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.CheckBox_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *CheckBox) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.CheckBox_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *CheckBox) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.CheckBox_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *CheckBox) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.CheckBox_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *CheckBox) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.CheckBox_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *CheckBox) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.CheckBox_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CheckBox) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.CheckBox_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *CheckBox) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.CheckBox_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *CheckBox) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.CheckBox_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *CheckBox) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.CheckBox_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CheckBox) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.CheckBox_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *CheckBox) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.CheckBox_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CheckBox) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.CheckBox_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *CheckBox) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.CheckBox_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *CheckBox) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.CheckBox_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *CheckBox) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.CheckBox_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CheckBox) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.CheckBox_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *CheckBox) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.CheckBox_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *CheckBox) RemoveHyperlink()  error {
	CGoReturnPtr := C.CheckBox_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *CheckBox) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.CheckBox_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *CheckBox) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.CheckBox_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *CheckBox) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.CheckBox_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *CheckBox) GetId()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *CheckBox) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.CheckBox_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *CheckBox) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *CheckBox) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.CheckBox_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *CheckBox) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.CheckBox_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *CheckBox) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.CheckBox_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *CheckBox) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.CheckBox_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *CheckBox) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.CheckBox_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *CheckBox) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.CheckBox_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CheckBox) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.CheckBox_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *CheckBox) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.CheckBox_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CheckBox) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.CheckBox_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *CheckBox) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.CheckBox_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *CheckBox) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.CheckBox_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.CheckBox_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *CheckBox) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.CheckBox_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.CheckBox_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *CheckBox) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.CheckBox_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.CheckBox_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *CheckBox) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *CheckBox) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *CheckBox) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *CheckBox) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *CheckBox) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *CheckBox) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *CheckBox) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *CheckBox) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *CheckBox) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetRight(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *CheckBox) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetBottom(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *CheckBox) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetWidth(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *CheckBox) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.CheckBox_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CheckBox) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.CheckBox_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *CheckBox) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.CheckBox_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CheckBox) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.CheckBox_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *CheckBox) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.CheckBox_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CheckBox) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.CheckBox_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *CheckBox) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetHeight(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *CheckBox) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.CheckBox_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CheckBox) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.CheckBox_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *CheckBox) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.CheckBox_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CheckBox) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.CheckBox_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *CheckBox) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.CheckBox_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CheckBox) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.CheckBox_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *CheckBox) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetLeft(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *CheckBox) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.CheckBox_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CheckBox) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.CheckBox_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *CheckBox) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.CheckBox_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CheckBox) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.CheckBox_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *CheckBox) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetTop(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *CheckBox) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.CheckBox_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CheckBox) SetTopInch(value float64)  error {
	CGoReturnPtr := C.CheckBox_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *CheckBox) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.CheckBox_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CheckBox) SetTopCM(value float64)  error {
	CGoReturnPtr := C.CheckBox_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *CheckBox) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *CheckBox) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *CheckBox) GetX()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetX(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *CheckBox) GetY()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetY(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *CheckBox) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *CheckBox) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *CheckBox) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *CheckBox) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *CheckBox) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *CheckBox) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.CheckBox_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *CheckBox) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.CheckBox_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *CheckBox) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.CheckBox_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *CheckBox) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.CheckBox_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CheckBox) SetHasLine(value bool)  error {
	CGoReturnPtr := C.CheckBox_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *CheckBox) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.CheckBox_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CheckBox) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.CheckBox_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *CheckBox) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.CheckBox_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CheckBox) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.CheckBox_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *CheckBox) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.CheckBox_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CheckBox) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.CheckBox_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *CheckBox) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.CheckBox_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *CheckBox) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.CheckBox_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *CheckBox) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.CheckBox_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CheckBox) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.CheckBox_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *CheckBox) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.CheckBox_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CheckBox) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.CheckBox_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *CheckBox) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.CheckBox_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CheckBox) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.CheckBox_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *CheckBox) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.CheckBox_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *CheckBox) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.CheckBox_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *CheckBox) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.CheckBox_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *CheckBox) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.CheckBox_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *CheckBox) UpdateSelectedValue()  error {
	CGoReturnPtr := C.CheckBox_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *CheckBox) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.CheckBox_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.CheckBox_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *CheckBox) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.CheckBox_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *CheckBox) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.CheckBox_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *CheckBox) SetFont(value *Font)  error {
	CGoReturnPtr := C.CheckBox_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *CheckBox) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.CheckBox_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *CheckBox) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.CheckBox_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *CheckBox) GetText()  (string,  error)  {
	CGoReturnPtr := C.CheckBox_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CheckBox) SetText(value string)  error {
	CGoReturnPtr := C.CheckBox_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *CheckBox) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.CheckBox_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *CheckBox) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.CheckBox_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CheckBox) SetHtmlText(value string)  error {
	CGoReturnPtr := C.CheckBox_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *CheckBox) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.CheckBox_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *CheckBox) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.CheckBox_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *CheckBox) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.CheckBox_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.CheckBox_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *CheckBox) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.CheckBox_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.CheckBox_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *CheckBox) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.CheckBox_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CheckBox) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.CheckBox_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *CheckBox) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.CheckBox_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.CheckBox_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *CheckBox) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.CheckBox_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.CheckBox_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *CheckBox) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.CheckBox_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.CheckBox_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *CheckBox) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.CheckBox_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CheckBox) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.CheckBox_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *CheckBox) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.CheckBox_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *CheckBox) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.CheckBox_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *CheckBox) RemoveActiveXControl()  error {
	CGoReturnPtr := C.CheckBox_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *CheckBox) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.CheckBox_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *CheckBox) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.CheckBox_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *CheckBox) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.CheckBox_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *CheckBox) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.CheckBox_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *CheckBox) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.CheckBox_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CheckBox) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.CheckBox_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *CheckBox) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.CheckBox_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *CheckBox) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.CheckBox_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteCheckBox(checkbox *CheckBox){
	runtime.SetFinalizer(checkbox, nil)
	C.Delete_CheckBox(checkbox.ptr)
	checkbox.ptr = nil
}

// Class CheckBoxCollection 

// Represents a collection of <see cref="CheckBox"/> objects in a worksheet.
type CheckBoxCollection struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *CheckBoxCollection) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.CheckBoxCollection_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Adds a checkBox to the collection.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   height - int32 
//   width - int32 
// Returns:
//   int32  
func (instance *CheckBoxCollection) Add(upperleftrow int32, upperleftcolumn int32, height int32, width int32)  (int32,  error)  {
	CGoReturnPtr := C.CheckBoxCollection_Add( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="CheckBox"/> element at the specified index.
// Parameters:
//   index - int32 
// Returns:
//   CheckBox  
func (instance *CheckBoxCollection) Get(index int32)  (*CheckBox,  error)  {
	CGoReturnPtr := C.CheckBoxCollection_Get( instance.ptr, C.int(index))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &CheckBox{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteCheckBox) 

	return result, nil 
}
// Returns:
//   int32  
func (instance *CheckBoxCollection) GetCount()  (int32,  error)  {
	CGoReturnPtr := C.CheckBoxCollection_GetCount( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}


func DeleteCheckBoxCollection(checkboxcollection *CheckBoxCollection){
	runtime.SetFinalizer(checkboxcollection, nil)
	C.Delete_CheckBoxCollection(checkboxcollection.ptr)
	checkboxcollection.ptr = nil
}

// Class ColorHelper 

// Provides helper functions about color.
type ColorHelper struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *ColorHelper) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.ColorHelper_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Convert OLE_COLOR.
// Parameters:
//   oleColor - int32 
// Returns:
//   Color  
func ColorHelper_FromOleColor(olecolor int32)  (*Color,  error)  {
	CGoReturnPtr := C.ColorHelper_FromOleColor(C.int(olecolor))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Color{}
	result.ptr = CGoReturnPtr.return_value 

	return result, nil 
}
// Convert color to OLE_COLOR
// Parameters:
//   color - Color 
//   workbook - Workbook 
// Returns:
//   int32  
func ColorHelper_ToOleColor(color *Color, workbook *Workbook)  (int32,  error)  {
	CGoReturnPtr := C.ColorHelper_ToOleColor(color.ptr, workbook.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}


func DeleteColorHelper(colorhelper *ColorHelper){
	runtime.SetFinalizer(colorhelper, nil)
	C.Delete_ColorHelper(colorhelper.ptr)
	colorhelper.ptr = nil
}

// Class ComboBox 

// Represents the control form ComboBox.
type ComboBox struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewComboBox(src *Shape) ( *ComboBox, error) {
	combobox := &ComboBox{}
	CGoReturnPtr := C.New_ComboBox(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		combobox.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(combobox, DeleteComboBox)
		return combobox, nil
	} else {
		combobox.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return combobox, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *ComboBox) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.ComboBox_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets or sets the index number of the currently selected item in a list box or combo box.
// Zero-based.
// Returns:
//   int32  
func (instance *ComboBox) GetSelectedIndex()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetSelectedIndex( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the index number of the currently selected item in a list box or combo box.
// Zero-based.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetSelectedIndex(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetSelectedIndex( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the selected value of the combox box.
// Returns:
//   string  
func (instance *ComboBox) GetSelectedValue()  (string,  error)  {
	CGoReturnPtr := C.ComboBox_GetSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the selected cell in the input range of the combo box.
// Returns:
//   Cell  
func (instance *ComboBox) GetSelectedCell()  (*Cell,  error)  {
	CGoReturnPtr := C.ComboBox_GetSelectedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Cell{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteCell) 

	return result, nil 
}
// Indicates whether the combobox has 3-D shading.
// Returns:
//   bool  
func (instance *ComboBox) GetShadow()  (bool,  error)  {
	CGoReturnPtr := C.ComboBox_GetShadow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the combobox has 3-D shading.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ComboBox) SetShadow(value bool)  error {
	CGoReturnPtr := C.ComboBox_SetShadow( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the number of list lines displayed in the drop-down portion of a combo box.
// Returns:
//   int32  
func (instance *ComboBox) GetDropDownLines()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetDropDownLines( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the number of list lines displayed in the drop-down portion of a combo box.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetDropDownLines(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetDropDownLines( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *ComboBox) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.ComboBox_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ComboBox) SetMacroName(value string)  error {
	CGoReturnPtr := C.ComboBox_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *ComboBox) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.ComboBox_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *ComboBox) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.ComboBox_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *ComboBox) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.ComboBox_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *ComboBox) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *ComboBox) GetName()  (string,  error)  {
	CGoReturnPtr := C.ComboBox_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ComboBox) SetName(value string)  error {
	CGoReturnPtr := C.ComboBox_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *ComboBox) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.ComboBox_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ComboBox) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.ComboBox_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *ComboBox) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.ComboBox_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ComboBox) SetTitle(value string)  error {
	CGoReturnPtr := C.ComboBox_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *ComboBox) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.ComboBox_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *ComboBox) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.ComboBox_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *ComboBox) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.ComboBox_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *ComboBox) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.ComboBox_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *ComboBox) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.ComboBox_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *ComboBox) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.ComboBox_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ComboBox) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.ComboBox_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *ComboBox) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.ComboBox_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *ComboBox) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.ComboBox_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *ComboBox) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.ComboBox_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ComboBox) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.ComboBox_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *ComboBox) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.ComboBox_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ComboBox) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.ComboBox_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *ComboBox) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.ComboBox_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *ComboBox) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.ComboBox_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *ComboBox) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.ComboBox_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ComboBox) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.ComboBox_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *ComboBox) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.ComboBox_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *ComboBox) RemoveHyperlink()  error {
	CGoReturnPtr := C.ComboBox_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *ComboBox) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.ComboBox_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *ComboBox) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.ComboBox_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *ComboBox) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.ComboBox_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *ComboBox) GetId()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *ComboBox) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.ComboBox_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *ComboBox) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *ComboBox) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.ComboBox_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *ComboBox) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.ComboBox_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *ComboBox) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.ComboBox_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *ComboBox) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.ComboBox_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *ComboBox) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.ComboBox_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *ComboBox) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.ComboBox_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ComboBox) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.ComboBox_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *ComboBox) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.ComboBox_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ComboBox) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.ComboBox_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *ComboBox) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.ComboBox_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *ComboBox) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.ComboBox_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.ComboBox_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *ComboBox) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.ComboBox_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.ComboBox_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *ComboBox) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.ComboBox_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.ComboBox_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *ComboBox) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *ComboBox) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *ComboBox) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *ComboBox) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *ComboBox) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *ComboBox) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *ComboBox) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *ComboBox) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *ComboBox) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetRight(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *ComboBox) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetBottom(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *ComboBox) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetWidth(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *ComboBox) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.ComboBox_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ComboBox) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.ComboBox_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *ComboBox) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.ComboBox_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ComboBox) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.ComboBox_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *ComboBox) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.ComboBox_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ComboBox) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.ComboBox_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *ComboBox) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetHeight(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *ComboBox) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.ComboBox_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ComboBox) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.ComboBox_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *ComboBox) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.ComboBox_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ComboBox) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.ComboBox_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *ComboBox) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.ComboBox_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ComboBox) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.ComboBox_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *ComboBox) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetLeft(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *ComboBox) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.ComboBox_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ComboBox) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.ComboBox_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *ComboBox) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.ComboBox_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ComboBox) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.ComboBox_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *ComboBox) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetTop(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *ComboBox) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.ComboBox_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ComboBox) SetTopInch(value float64)  error {
	CGoReturnPtr := C.ComboBox_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *ComboBox) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.ComboBox_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ComboBox) SetTopCM(value float64)  error {
	CGoReturnPtr := C.ComboBox_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *ComboBox) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *ComboBox) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *ComboBox) GetX()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetX(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *ComboBox) GetY()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetY(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *ComboBox) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *ComboBox) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *ComboBox) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *ComboBox) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *ComboBox) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *ComboBox) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.ComboBox_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *ComboBox) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.ComboBox_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *ComboBox) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.ComboBox_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *ComboBox) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.ComboBox_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ComboBox) SetHasLine(value bool)  error {
	CGoReturnPtr := C.ComboBox_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *ComboBox) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.ComboBox_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ComboBox) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.ComboBox_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *ComboBox) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.ComboBox_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ComboBox) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.ComboBox_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *ComboBox) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.ComboBox_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ComboBox) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.ComboBox_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *ComboBox) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.ComboBox_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *ComboBox) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.ComboBox_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *ComboBox) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.ComboBox_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ComboBox) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.ComboBox_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *ComboBox) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.ComboBox_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ComboBox) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.ComboBox_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *ComboBox) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.ComboBox_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ComboBox) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.ComboBox_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *ComboBox) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.ComboBox_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *ComboBox) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.ComboBox_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *ComboBox) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.ComboBox_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *ComboBox) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.ComboBox_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *ComboBox) UpdateSelectedValue()  error {
	CGoReturnPtr := C.ComboBox_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *ComboBox) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.ComboBox_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.ComboBox_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *ComboBox) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.ComboBox_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *ComboBox) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.ComboBox_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *ComboBox) SetFont(value *Font)  error {
	CGoReturnPtr := C.ComboBox_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *ComboBox) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.ComboBox_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *ComboBox) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.ComboBox_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *ComboBox) GetText()  (string,  error)  {
	CGoReturnPtr := C.ComboBox_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ComboBox) SetText(value string)  error {
	CGoReturnPtr := C.ComboBox_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *ComboBox) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.ComboBox_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *ComboBox) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.ComboBox_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ComboBox) SetHtmlText(value string)  error {
	CGoReturnPtr := C.ComboBox_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *ComboBox) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.ComboBox_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *ComboBox) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.ComboBox_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *ComboBox) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.ComboBox_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.ComboBox_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *ComboBox) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.ComboBox_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.ComboBox_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *ComboBox) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.ComboBox_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ComboBox) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.ComboBox_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *ComboBox) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.ComboBox_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.ComboBox_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *ComboBox) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.ComboBox_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.ComboBox_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *ComboBox) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.ComboBox_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.ComboBox_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *ComboBox) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.ComboBox_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ComboBox) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.ComboBox_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *ComboBox) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.ComboBox_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *ComboBox) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.ComboBox_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *ComboBox) RemoveActiveXControl()  error {
	CGoReturnPtr := C.ComboBox_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *ComboBox) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.ComboBox_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *ComboBox) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.ComboBox_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *ComboBox) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.ComboBox_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *ComboBox) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.ComboBox_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *ComboBox) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.ComboBox_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ComboBox) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.ComboBox_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *ComboBox) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.ComboBox_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *ComboBox) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.ComboBox_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteComboBox(combobox *ComboBox){
	runtime.SetFinalizer(combobox, nil)
	C.Delete_ComboBox(combobox.ptr)
	combobox.ptr = nil
}

// Class CommentShape 

// Represents the shape of the comment.
type CommentShape struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewCommentShape(src *Shape) ( *CommentShape, error) {
	commentshape := &CommentShape{}
	CGoReturnPtr := C.New_CommentShape(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		commentshape.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(commentshape, DeleteCommentShape)
		return commentshape, nil
	} else {
		commentshape.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return commentshape, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *CommentShape) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.CommentShape_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets the comment object.
// Returns:
//   Comment  
func (instance *CommentShape) GetComment()  (*Comment,  error)  {
	CGoReturnPtr := C.CommentShape_GetComment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Comment{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteComment) 

	return result, nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *CommentShape) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.CommentShape_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CommentShape) SetMacroName(value string)  error {
	CGoReturnPtr := C.CommentShape_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *CommentShape) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.CommentShape_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *CommentShape) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.CommentShape_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *CommentShape) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.CommentShape_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *CommentShape) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *CommentShape) GetName()  (string,  error)  {
	CGoReturnPtr := C.CommentShape_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CommentShape) SetName(value string)  error {
	CGoReturnPtr := C.CommentShape_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *CommentShape) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.CommentShape_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CommentShape) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.CommentShape_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *CommentShape) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.CommentShape_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CommentShape) SetTitle(value string)  error {
	CGoReturnPtr := C.CommentShape_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *CommentShape) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.CommentShape_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *CommentShape) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.CommentShape_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *CommentShape) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.CommentShape_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *CommentShape) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.CommentShape_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *CommentShape) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.CommentShape_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *CommentShape) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.CommentShape_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CommentShape) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.CommentShape_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *CommentShape) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.CommentShape_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *CommentShape) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.CommentShape_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *CommentShape) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.CommentShape_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CommentShape) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.CommentShape_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *CommentShape) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.CommentShape_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CommentShape) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.CommentShape_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *CommentShape) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.CommentShape_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *CommentShape) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.CommentShape_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *CommentShape) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.CommentShape_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CommentShape) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.CommentShape_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *CommentShape) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.CommentShape_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *CommentShape) RemoveHyperlink()  error {
	CGoReturnPtr := C.CommentShape_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *CommentShape) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.CommentShape_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *CommentShape) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.CommentShape_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *CommentShape) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.CommentShape_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *CommentShape) GetId()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *CommentShape) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.CommentShape_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *CommentShape) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *CommentShape) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.CommentShape_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *CommentShape) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.CommentShape_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *CommentShape) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.CommentShape_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *CommentShape) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.CommentShape_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *CommentShape) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.CommentShape_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *CommentShape) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.CommentShape_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CommentShape) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.CommentShape_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *CommentShape) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.CommentShape_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CommentShape) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.CommentShape_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *CommentShape) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.CommentShape_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *CommentShape) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.CommentShape_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.CommentShape_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *CommentShape) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.CommentShape_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.CommentShape_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *CommentShape) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.CommentShape_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.CommentShape_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *CommentShape) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *CommentShape) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *CommentShape) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *CommentShape) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *CommentShape) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *CommentShape) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *CommentShape) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *CommentShape) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *CommentShape) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetRight(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *CommentShape) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetBottom(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *CommentShape) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetWidth(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *CommentShape) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.CommentShape_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CommentShape) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.CommentShape_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *CommentShape) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.CommentShape_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CommentShape) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.CommentShape_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *CommentShape) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.CommentShape_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CommentShape) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.CommentShape_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *CommentShape) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetHeight(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *CommentShape) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.CommentShape_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CommentShape) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.CommentShape_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *CommentShape) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.CommentShape_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CommentShape) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.CommentShape_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *CommentShape) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.CommentShape_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CommentShape) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.CommentShape_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *CommentShape) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetLeft(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *CommentShape) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.CommentShape_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CommentShape) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.CommentShape_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *CommentShape) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.CommentShape_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CommentShape) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.CommentShape_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *CommentShape) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetTop(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *CommentShape) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.CommentShape_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CommentShape) SetTopInch(value float64)  error {
	CGoReturnPtr := C.CommentShape_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *CommentShape) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.CommentShape_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CommentShape) SetTopCM(value float64)  error {
	CGoReturnPtr := C.CommentShape_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *CommentShape) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *CommentShape) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *CommentShape) GetX()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetX(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *CommentShape) GetY()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetY(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *CommentShape) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *CommentShape) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *CommentShape) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *CommentShape) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *CommentShape) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *CommentShape) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.CommentShape_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *CommentShape) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.CommentShape_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *CommentShape) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.CommentShape_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *CommentShape) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.CommentShape_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CommentShape) SetHasLine(value bool)  error {
	CGoReturnPtr := C.CommentShape_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *CommentShape) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.CommentShape_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CommentShape) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.CommentShape_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *CommentShape) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.CommentShape_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CommentShape) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.CommentShape_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *CommentShape) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.CommentShape_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CommentShape) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.CommentShape_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *CommentShape) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.CommentShape_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *CommentShape) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.CommentShape_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *CommentShape) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.CommentShape_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CommentShape) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.CommentShape_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *CommentShape) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.CommentShape_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CommentShape) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.CommentShape_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *CommentShape) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.CommentShape_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CommentShape) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.CommentShape_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *CommentShape) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.CommentShape_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *CommentShape) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.CommentShape_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *CommentShape) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.CommentShape_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *CommentShape) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.CommentShape_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *CommentShape) UpdateSelectedValue()  error {
	CGoReturnPtr := C.CommentShape_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *CommentShape) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.CommentShape_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.CommentShape_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *CommentShape) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.CommentShape_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *CommentShape) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.CommentShape_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *CommentShape) SetFont(value *Font)  error {
	CGoReturnPtr := C.CommentShape_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *CommentShape) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.CommentShape_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *CommentShape) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.CommentShape_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *CommentShape) GetText()  (string,  error)  {
	CGoReturnPtr := C.CommentShape_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CommentShape) SetText(value string)  error {
	CGoReturnPtr := C.CommentShape_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *CommentShape) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.CommentShape_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *CommentShape) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.CommentShape_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CommentShape) SetHtmlText(value string)  error {
	CGoReturnPtr := C.CommentShape_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *CommentShape) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.CommentShape_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *CommentShape) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.CommentShape_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *CommentShape) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.CommentShape_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.CommentShape_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *CommentShape) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.CommentShape_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.CommentShape_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *CommentShape) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.CommentShape_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CommentShape) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.CommentShape_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *CommentShape) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.CommentShape_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.CommentShape_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *CommentShape) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.CommentShape_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.CommentShape_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *CommentShape) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.CommentShape_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.CommentShape_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *CommentShape) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.CommentShape_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CommentShape) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.CommentShape_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *CommentShape) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.CommentShape_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *CommentShape) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.CommentShape_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *CommentShape) RemoveActiveXControl()  error {
	CGoReturnPtr := C.CommentShape_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *CommentShape) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.CommentShape_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *CommentShape) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.CommentShape_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *CommentShape) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.CommentShape_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *CommentShape) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.CommentShape_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *CommentShape) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.CommentShape_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CommentShape) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.CommentShape_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *CommentShape) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.CommentShape_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *CommentShape) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.CommentShape_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteCommentShape(commentshape *CommentShape){
	runtime.SetFinalizer(commentshape, nil)
	C.Delete_CommentShape(commentshape.ptr)
	commentshape.ptr = nil
}

// Class CustomGeometry 

// Represents a custom geometric shape.
type CustomGeometry struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Geometry 
func NewCustomGeometry(src *Geometry) ( *CustomGeometry, error) {
	customgeometry := &CustomGeometry{}
	CGoReturnPtr := C.New_CustomGeometry(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		customgeometry.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(customgeometry, DeleteCustomGeometry)
		return customgeometry, nil
	} else {
		customgeometry.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return customgeometry, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *CustomGeometry) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.CustomGeometry_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets path collection information when shape is a NotPrimitive autoshape
// Returns:
//   ShapePathCollection  
func (instance *CustomGeometry) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.CustomGeometry_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets a collection of shape adjust value
// Returns:
//   ShapeGuideCollection  
func (instance *CustomGeometry) GetShapeAdjustValues()  (*ShapeGuideCollection,  error)  {
	CGoReturnPtr := C.CustomGeometry_GetShapeAdjustValues( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapeGuideCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapeGuideCollection) 

	return result, nil 
}


func DeleteCustomGeometry(customgeometry *CustomGeometry){
	runtime.SetFinalizer(customgeometry, nil)
	C.Delete_CustomGeometry(customgeometry.ptr)
	customgeometry.ptr = nil
}

// Class CustomXmlShape 

// Represents Custom xml shape ,such as Ink.
type CustomXmlShape struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewCustomXmlShape(src *Shape) ( *CustomXmlShape, error) {
	customxmlshape := &CustomXmlShape{}
	CGoReturnPtr := C.New_CustomXmlShape(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		customxmlshape.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(customxmlshape, DeleteCustomXmlShape)
		return customxmlshape, nil
	} else {
		customxmlshape.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return customxmlshape, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *CustomXmlShape) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.CustomXmlShape_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *CustomXmlShape) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CustomXmlShape) SetMacroName(value string)  error {
	CGoReturnPtr := C.CustomXmlShape_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *CustomXmlShape) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.CustomXmlShape_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *CustomXmlShape) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.CustomXmlShape_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.CustomXmlShape_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *CustomXmlShape) GetName()  (string,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CustomXmlShape) SetName(value string)  error {
	CGoReturnPtr := C.CustomXmlShape_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *CustomXmlShape) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CustomXmlShape) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.CustomXmlShape_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *CustomXmlShape) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CustomXmlShape) SetTitle(value string)  error {
	CGoReturnPtr := C.CustomXmlShape_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *CustomXmlShape) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *CustomXmlShape) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *CustomXmlShape) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *CustomXmlShape) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *CustomXmlShape) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *CustomXmlShape) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CustomXmlShape) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.CustomXmlShape_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *CustomXmlShape) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *CustomXmlShape) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *CustomXmlShape) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.CustomXmlShape_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CustomXmlShape) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.CustomXmlShape_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *CustomXmlShape) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.CustomXmlShape_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CustomXmlShape) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.CustomXmlShape_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *CustomXmlShape) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *CustomXmlShape) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.CustomXmlShape_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *CustomXmlShape) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CustomXmlShape) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.CustomXmlShape_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *CustomXmlShape) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.CustomXmlShape_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *CustomXmlShape) RemoveHyperlink()  error {
	CGoReturnPtr := C.CustomXmlShape_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *CustomXmlShape) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.CustomXmlShape_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.CustomXmlShape_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetId()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *CustomXmlShape) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *CustomXmlShape) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *CustomXmlShape) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.CustomXmlShape_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *CustomXmlShape) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.CustomXmlShape_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *CustomXmlShape) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.CustomXmlShape_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *CustomXmlShape) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *CustomXmlShape) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.CustomXmlShape_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CustomXmlShape) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.CustomXmlShape_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *CustomXmlShape) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.CustomXmlShape_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CustomXmlShape) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.CustomXmlShape_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.CustomXmlShape_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.CustomXmlShape_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.CustomXmlShape_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetRight(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetBottom(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetWidth(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *CustomXmlShape) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CustomXmlShape) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.CustomXmlShape_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *CustomXmlShape) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CustomXmlShape) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.CustomXmlShape_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *CustomXmlShape) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CustomXmlShape) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.CustomXmlShape_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetHeight(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *CustomXmlShape) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CustomXmlShape) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.CustomXmlShape_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *CustomXmlShape) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CustomXmlShape) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.CustomXmlShape_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *CustomXmlShape) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CustomXmlShape) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.CustomXmlShape_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetLeft(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *CustomXmlShape) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CustomXmlShape) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.CustomXmlShape_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *CustomXmlShape) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CustomXmlShape) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.CustomXmlShape_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetTop(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *CustomXmlShape) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CustomXmlShape) SetTopInch(value float64)  error {
	CGoReturnPtr := C.CustomXmlShape_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *CustomXmlShape) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *CustomXmlShape) SetTopCM(value float64)  error {
	CGoReturnPtr := C.CustomXmlShape_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetX()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetX(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetY()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetY(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *CustomXmlShape) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *CustomXmlShape) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *CustomXmlShape) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.CustomXmlShape_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *CustomXmlShape) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *CustomXmlShape) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CustomXmlShape) SetHasLine(value bool)  error {
	CGoReturnPtr := C.CustomXmlShape_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *CustomXmlShape) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.CustomXmlShape_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CustomXmlShape) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.CustomXmlShape_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *CustomXmlShape) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.CustomXmlShape_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CustomXmlShape) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.CustomXmlShape_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *CustomXmlShape) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.CustomXmlShape_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CustomXmlShape) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.CustomXmlShape_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *CustomXmlShape) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.CustomXmlShape_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *CustomXmlShape) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CustomXmlShape) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.CustomXmlShape_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *CustomXmlShape) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CustomXmlShape) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.CustomXmlShape_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *CustomXmlShape) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CustomXmlShape) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.CustomXmlShape_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *CustomXmlShape) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *CustomXmlShape) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.CustomXmlShape_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *CustomXmlShape) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *CustomXmlShape) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.CustomXmlShape_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *CustomXmlShape) UpdateSelectedValue()  error {
	CGoReturnPtr := C.CustomXmlShape_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.CustomXmlShape_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *CustomXmlShape) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *CustomXmlShape) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *CustomXmlShape) SetFont(value *Font)  error {
	CGoReturnPtr := C.CustomXmlShape_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *CustomXmlShape) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *CustomXmlShape) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.CustomXmlShape_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *CustomXmlShape) GetText()  (string,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CustomXmlShape) SetText(value string)  error {
	CGoReturnPtr := C.CustomXmlShape_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *CustomXmlShape) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.CustomXmlShape_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *CustomXmlShape) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *CustomXmlShape) SetHtmlText(value string)  error {
	CGoReturnPtr := C.CustomXmlShape_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *CustomXmlShape) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.CustomXmlShape_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *CustomXmlShape) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.CustomXmlShape_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.CustomXmlShape_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.CustomXmlShape_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *CustomXmlShape) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.CustomXmlShape_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CustomXmlShape) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.CustomXmlShape_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.CustomXmlShape_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.CustomXmlShape_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.CustomXmlShape_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *CustomXmlShape) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *CustomXmlShape) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.CustomXmlShape_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *CustomXmlShape) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *CustomXmlShape) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *CustomXmlShape) RemoveActiveXControl()  error {
	CGoReturnPtr := C.CustomXmlShape_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *CustomXmlShape) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *CustomXmlShape) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *CustomXmlShape) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.CustomXmlShape_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *CustomXmlShape) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.CustomXmlShape_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *CustomXmlShape) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.CustomXmlShape_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *CustomXmlShape) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.CustomXmlShape_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *CustomXmlShape) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.CustomXmlShape_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *CustomXmlShape) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.CustomXmlShape_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteCustomXmlShape(customxmlshape *CustomXmlShape){
	runtime.SetFinalizer(customxmlshape, nil)
	C.Delete_CustomXmlShape(customxmlshape.ptr)
	customxmlshape.ptr = nil
}

// Class Dialog_Box 

// Represents the dialog box.
type Dialog_Box struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewDialog_Box(src *Shape) ( *Dialog_Box, error) {
	dialog_box := &Dialog_Box{}
	CGoReturnPtr := C.New_Dialog_Box(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		dialog_box.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(dialog_box, DeleteDialog_Box)
		return dialog_box, nil
	} else {
		dialog_box.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return dialog_box, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *Dialog_Box) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.Dialog_Box_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *Dialog_Box) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Dialog_Box) SetMacroName(value string)  error {
	CGoReturnPtr := C.Dialog_Box_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *Dialog_Box) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.Dialog_Box_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *Dialog_Box) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.Dialog_Box_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *Dialog_Box) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.Dialog_Box_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *Dialog_Box) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *Dialog_Box) GetName()  (string,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Dialog_Box) SetName(value string)  error {
	CGoReturnPtr := C.Dialog_Box_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *Dialog_Box) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Dialog_Box) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.Dialog_Box_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *Dialog_Box) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Dialog_Box) SetTitle(value string)  error {
	CGoReturnPtr := C.Dialog_Box_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *Dialog_Box) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *Dialog_Box) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *Dialog_Box) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *Dialog_Box) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *Dialog_Box) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *Dialog_Box) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Dialog_Box) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.Dialog_Box_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *Dialog_Box) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *Dialog_Box) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *Dialog_Box) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.Dialog_Box_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Dialog_Box) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.Dialog_Box_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *Dialog_Box) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.Dialog_Box_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Dialog_Box) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.Dialog_Box_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *Dialog_Box) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *Dialog_Box) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.Dialog_Box_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *Dialog_Box) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Dialog_Box) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.Dialog_Box_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *Dialog_Box) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.Dialog_Box_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *Dialog_Box) RemoveHyperlink()  error {
	CGoReturnPtr := C.Dialog_Box_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *Dialog_Box) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *Dialog_Box) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.Dialog_Box_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *Dialog_Box) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.Dialog_Box_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *Dialog_Box) GetId()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *Dialog_Box) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *Dialog_Box) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *Dialog_Box) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *Dialog_Box) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.Dialog_Box_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *Dialog_Box) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.Dialog_Box_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *Dialog_Box) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.Dialog_Box_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *Dialog_Box) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *Dialog_Box) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.Dialog_Box_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Dialog_Box) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.Dialog_Box_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *Dialog_Box) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.Dialog_Box_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Dialog_Box) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.Dialog_Box_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *Dialog_Box) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *Dialog_Box) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.Dialog_Box_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *Dialog_Box) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.Dialog_Box_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *Dialog_Box) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.Dialog_Box_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *Dialog_Box) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *Dialog_Box) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *Dialog_Box) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *Dialog_Box) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *Dialog_Box) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *Dialog_Box) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *Dialog_Box) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *Dialog_Box) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *Dialog_Box) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetRight(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *Dialog_Box) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetBottom(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *Dialog_Box) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetWidth(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *Dialog_Box) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Dialog_Box) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.Dialog_Box_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *Dialog_Box) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Dialog_Box) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.Dialog_Box_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *Dialog_Box) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Dialog_Box) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.Dialog_Box_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *Dialog_Box) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetHeight(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *Dialog_Box) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Dialog_Box) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.Dialog_Box_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *Dialog_Box) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Dialog_Box) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.Dialog_Box_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *Dialog_Box) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Dialog_Box) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.Dialog_Box_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *Dialog_Box) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetLeft(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *Dialog_Box) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Dialog_Box) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.Dialog_Box_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *Dialog_Box) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Dialog_Box) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.Dialog_Box_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *Dialog_Box) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetTop(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *Dialog_Box) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Dialog_Box) SetTopInch(value float64)  error {
	CGoReturnPtr := C.Dialog_Box_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *Dialog_Box) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Dialog_Box) SetTopCM(value float64)  error {
	CGoReturnPtr := C.Dialog_Box_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *Dialog_Box) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *Dialog_Box) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *Dialog_Box) GetX()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetX(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *Dialog_Box) GetY()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetY(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *Dialog_Box) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *Dialog_Box) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *Dialog_Box) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *Dialog_Box) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *Dialog_Box) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *Dialog_Box) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.Dialog_Box_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *Dialog_Box) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *Dialog_Box) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *Dialog_Box) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Dialog_Box) SetHasLine(value bool)  error {
	CGoReturnPtr := C.Dialog_Box_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *Dialog_Box) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.Dialog_Box_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Dialog_Box) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.Dialog_Box_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *Dialog_Box) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.Dialog_Box_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Dialog_Box) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.Dialog_Box_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *Dialog_Box) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.Dialog_Box_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Dialog_Box) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.Dialog_Box_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *Dialog_Box) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *Dialog_Box) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.Dialog_Box_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *Dialog_Box) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Dialog_Box) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.Dialog_Box_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *Dialog_Box) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Dialog_Box) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.Dialog_Box_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *Dialog_Box) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Dialog_Box) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.Dialog_Box_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *Dialog_Box) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *Dialog_Box) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.Dialog_Box_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *Dialog_Box) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *Dialog_Box) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.Dialog_Box_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *Dialog_Box) UpdateSelectedValue()  error {
	CGoReturnPtr := C.Dialog_Box_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *Dialog_Box) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.Dialog_Box_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *Dialog_Box) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *Dialog_Box) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *Dialog_Box) SetFont(value *Font)  error {
	CGoReturnPtr := C.Dialog_Box_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *Dialog_Box) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *Dialog_Box) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.Dialog_Box_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *Dialog_Box) GetText()  (string,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Dialog_Box) SetText(value string)  error {
	CGoReturnPtr := C.Dialog_Box_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *Dialog_Box) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.Dialog_Box_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *Dialog_Box) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Dialog_Box) SetHtmlText(value string)  error {
	CGoReturnPtr := C.Dialog_Box_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *Dialog_Box) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.Dialog_Box_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *Dialog_Box) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.Dialog_Box_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *Dialog_Box) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.Dialog_Box_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *Dialog_Box) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.Dialog_Box_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *Dialog_Box) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.Dialog_Box_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Dialog_Box) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.Dialog_Box_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *Dialog_Box) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.Dialog_Box_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *Dialog_Box) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.Dialog_Box_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *Dialog_Box) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.Dialog_Box_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *Dialog_Box) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Dialog_Box) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.Dialog_Box_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *Dialog_Box) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *Dialog_Box) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *Dialog_Box) RemoveActiveXControl()  error {
	CGoReturnPtr := C.Dialog_Box_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *Dialog_Box) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *Dialog_Box) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *Dialog_Box) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.Dialog_Box_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *Dialog_Box) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.Dialog_Box_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *Dialog_Box) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.Dialog_Box_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Dialog_Box) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.Dialog_Box_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *Dialog_Box) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.Dialog_Box_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *Dialog_Box) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.Dialog_Box_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteDialog_Box(dialog_box *Dialog_Box){
	runtime.SetFinalizer(dialog_box, nil)
	C.Delete_Dialog_Box(dialog_box.ptr)
	dialog_box.ptr = nil
}

// Class FillFormat 

// Encapsulates the object that represents fill formatting for a shape.
type FillFormat struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *FillFormat) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.FillFormat_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets fill type
// Returns:
//   int32  
func (instance *FillFormat) GetFillType()  (FillType,  error)  {
	CGoReturnPtr := C.FillFormat_GetFillType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToFillType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets fill type
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *FillFormat) SetFillType(value FillType)  error {
	CGoReturnPtr := C.FillFormat_SetFillType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
// Returns:
//   float64  
func (instance *FillFormat) GetTransparency()  (float64,  error)  {
	CGoReturnPtr := C.FillFormat_GetTransparency( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *FillFormat) SetTransparency(value float64)  error {
	CGoReturnPtr := C.FillFormat_SetTransparency( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets <see cref="GradientFill"/> object.
// Returns:
//   GradientFill  
func (instance *FillFormat) GetGradientFill()  (*GradientFill,  error)  {
	CGoReturnPtr := C.FillFormat_GetGradientFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GradientFill{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGradientFill) 

	return result, nil 
}
// Gets <see cref="TextureFill"/> object.
// Returns:
//   TextureFill  
func (instance *FillFormat) GetTextureFill()  (*TextureFill,  error)  {
	CGoReturnPtr := C.FillFormat_GetTextureFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextureFill{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextureFill) 

	return result, nil 
}
// Gets <see cref="SolidFill"/> object.
// Returns:
//   SolidFill  
func (instance *FillFormat) GetSolidFill()  (*SolidFill,  error)  {
	CGoReturnPtr := C.FillFormat_GetSolidFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &SolidFill{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteSolidFill) 

	return result, nil 
}
// Gets <see cref="PatternFill"/> object.
// Returns:
//   PatternFill  
func (instance *FillFormat) GetPatternFill()  (*PatternFill,  error)  {
	CGoReturnPtr := C.FillFormat_GetPatternFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &PatternFill{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeletePatternFill) 

	return result, nil 
}
// Returns the gradient color type for the specified fill.
// Returns:
//   int32  
func (instance *FillFormat) GetGradientColorType()  (GradientColorType,  error)  {
	CGoReturnPtr := C.FillFormat_GetGradientColorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToGradientColorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Returns the gradient style for the specified fill.
// Returns:
//   int32  
func (instance *FillFormat) GetGradientStyle()  (GradientStyleType,  error)  {
	CGoReturnPtr := C.FillFormat_GetGradientStyle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToGradientStyleType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Returns the gradient color 1 for the specified fill.
// Returns:
//   Color  
func (instance *FillFormat) GetGradientColor1()  (*Color,  error)  {
	CGoReturnPtr := C.FillFormat_GetGradientColor1( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Color{}
	result.ptr = CGoReturnPtr.return_value 

	return result, nil 
}
// Returns the gradient color 2 for the specified fill.
// Returns:
//   Color  
func (instance *FillFormat) GetGradientColor2()  (*Color,  error)  {
	CGoReturnPtr := C.FillFormat_GetGradientColor2( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Color{}
	result.ptr = CGoReturnPtr.return_value 

	return result, nil 
}
// Returns the gradient degree for the specified fill.
// Only applies for Excel 2007.
// Returns:
//   float64  
func (instance *FillFormat) GetGradientDegree()  (float64,  error)  {
	CGoReturnPtr := C.FillFormat_GetGradientDegree( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the gradient variant for the specified fill.
// Only applies for Excel 2007.
// Returns:
//   int32  
func (instance *FillFormat) GetGradientVariant()  (int32,  error)  {
	CGoReturnPtr := C.FillFormat_GetGradientVariant( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the gradient preset color for the specified fill.
// Returns:
//   int32  
func (instance *FillFormat) GetPresetColor()  (GradientPresetType,  error)  {
	CGoReturnPtr := C.FillFormat_GetPresetColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToGradientPresetType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Sets the specified fill to a one-color gradient.
// Only applies for Excel 2007.
// Parameters:
//   color - Color 
//   degree - float64 
//   style - int32 
//   variant - int32 
// Returns:
//   void  
func (instance *FillFormat) SetOneColorGradient(color *Color, degree float64, style GradientStyleType, variant int32)  error {
	CGoReturnPtr := C.FillFormat_SetOneColorGradient( instance.ptr, color.ptr, C.double(degree), C.int( int32(style)), C.int(variant))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Sets the specified fill to a two-color gradient.
// Only applies for Excel 2007.
// Parameters:
//   color1 - Color 
//   color2 - Color 
//   style - int32 
//   variant - int32 
// Returns:
//   void  
func (instance *FillFormat) SetTwoColorGradient_Color_Color_GradientStyleType_Int(color1 *Color, color2 *Color, style GradientStyleType, variant int32)  error {
	CGoReturnPtr := C.FillFormat_SetTwoColorGradient_Color_Color_GradientStyleType_Integer( instance.ptr, color1.ptr, color2.ptr, C.int( int32(style)), C.int(variant))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Sets the specified fill to a two-color gradient.
// Only applies for Excel 2007.
// Parameters:
//   color1 - Color 
//   transparency1 - float64 
//   color2 - Color 
//   transparency2 - float64 
//   style - int32 
//   variant - int32 
// Returns:
//   void  
func (instance *FillFormat) SetTwoColorGradient_Color_Double_Color_Double_GradientStyleType_Int(color1 *Color, transparency1 float64, color2 *Color, transparency2 float64, style GradientStyleType, variant int32)  error {
	CGoReturnPtr := C.FillFormat_SetTwoColorGradient_Color_Double_Color_Double_GradientStyleType_Integer( instance.ptr, color1.ptr, C.double(transparency1), color2.ptr, C.double(transparency2), C.int( int32(style)), C.int(variant))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Sets the specified fill to a preset-color gradient.
// Only applies for Excel 2007.
// Parameters:
//   presetColor - int32 
//   style - int32 
//   variant - int32 
// Returns:
//   void  
func (instance *FillFormat) SetPresetColorGradient(presetcolor GradientPresetType, style GradientStyleType, variant int32)  error {
	CGoReturnPtr := C.FillFormat_SetPresetColorGradient( instance.ptr, C.int( int32(presetcolor)), C.int( int32(style)), C.int(variant))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the texture type for the specified fill.
// Returns:
//   int32  
func (instance *FillFormat) GetTexture()  (TextureType,  error)  {
	CGoReturnPtr := C.FillFormat_GetTexture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextureType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the texture type for the specified fill.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *FillFormat) SetTexture(value TextureType)  error {
	CGoReturnPtr := C.FillFormat_SetTexture( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents an area's display pattern.
// Returns:
//   int32  
func (instance *FillFormat) GetPattern()  (FillPattern,  error)  {
	CGoReturnPtr := C.FillFormat_GetPattern( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToFillPattern(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents an area's display pattern.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *FillFormat) SetPattern(value FillPattern)  error {
	CGoReturnPtr := C.FillFormat_SetPattern( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the picture format type.
// Returns:
//   int32  
func (instance *FillFormat) GetPictureFormatType()  (FillPictureType,  error)  {
	CGoReturnPtr := C.FillFormat_GetPictureFormatType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToFillPictureType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the picture format type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *FillFormat) SetPictureFormatType(value FillPictureType)  error {
	CGoReturnPtr := C.FillFormat_SetPictureFormatType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the picture format scale.
// Returns:
//   float64  
func (instance *FillFormat) GetScale()  (float64,  error)  {
	CGoReturnPtr := C.FillFormat_GetScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the picture format scale.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *FillFormat) SetScale(value float64)  error {
	CGoReturnPtr := C.FillFormat_SetScale( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *FillFormat) Equals(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.FillFormat_Equals( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets the hash code.
// Returns:
//   int32  
func (instance *FillFormat) GetHashCode()  (int32,  error)  {
	CGoReturnPtr := C.FillFormat_GetHashCode( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}


func DeleteFillFormat(fillformat *FillFormat){
	runtime.SetFinalizer(fillformat, nil)
	C.Delete_FillFormat(fillformat.ptr)
	fillformat.ptr = nil
}

// Class Format3D 

// This class specifies the 3D shape properties for a chart element or shape.
type Format3D struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *Format3D) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.Format3D_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets the <see cref="Bevel"/> object that holds the properties associated with defining a bevel on the top or front face of a shape.
// Returns:
//   Bevel  
func (instance *Format3D) GetTopBevel()  (*Bevel,  error)  {
	CGoReturnPtr := C.Format3D_GetTopBevel( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Bevel{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteBevel) 

	return result, nil 
}
// Indicates if the shape has top bevel data.
// Returns:
//   bool  
func (instance *Format3D) HasTopBevelData()  (bool,  error)  {
	CGoReturnPtr := C.Format3D_HasTopBevelData( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the material type which is combined with the lighting properties to give the final look and feel of a shape.
// Default value is PresetMaterialType.WarmMatte.
// Returns:
//   int32  
func (instance *Format3D) GetSurfaceMaterialType()  (PresetMaterialType,  error)  {
	CGoReturnPtr := C.Format3D_GetSurfaceMaterialType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPresetMaterialType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the material type which is combined with the lighting properties to give the final look and feel of a shape.
// Default value is PresetMaterialType.WarmMatte.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Format3D) SetSurfaceMaterialType(value PresetMaterialType)  error {
	CGoReturnPtr := C.Format3D_SetSurfaceMaterialType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the lighting type which is to be applied to the scene of the shape.
// Default value is LightRigType.ThreePoint.
// Returns:
//   int32  
func (instance *Format3D) GetSurfaceLightingType()  (LightRigType,  error)  {
	CGoReturnPtr := C.Format3D_GetSurfaceLightingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToLightRigType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the lighting type which is to be applied to the scene of the shape.
// Default value is LightRigType.ThreePoint.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Format3D) SetSurfaceLightingType(value LightRigType)  error {
	CGoReturnPtr := C.Format3D_SetSurfaceLightingType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the lighting angle. Range from 0 to 359.9 degrees.
// Returns:
//   float64  
func (instance *Format3D) GetLightingAngle()  (float64,  error)  {
	CGoReturnPtr := C.Format3D_GetLightingAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the lighting angle. Range from 0 to 359.9 degrees.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Format3D) SetLightingAngle(value float64)  error {
	CGoReturnPtr := C.Format3D_SetLightingAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeleteFormat3D(format3d *Format3D){
	runtime.SetFinalizer(format3d, nil)
	C.Delete_Format3D(format3d.ptr)
	format3d.ptr = nil
}

// Class Geometry 

// Represents a geometric shape.
type Geometry struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *Geometry) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.Geometry_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets a collection of shape adjust value
// Returns:
//   ShapeGuideCollection  
func (instance *Geometry) GetShapeAdjustValues()  (*ShapeGuideCollection,  error)  {
	CGoReturnPtr := C.Geometry_GetShapeAdjustValues( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapeGuideCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapeGuideCollection) 

	return result, nil 
}


func DeleteGeometry(geometry *Geometry){
	runtime.SetFinalizer(geometry, nil)
	C.Delete_Geometry(geometry.ptr)
	geometry.ptr = nil
}

// Class GlowEffect 

// This class specifies a glow effect, in which a color blurred outline
// is added outside the edges of the object.
type GlowEffect struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *GlowEffect) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.GlowEffect_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets the color of the glow effect.
// Returns:
//   CellsColor  
func (instance *GlowEffect) GetColor()  (*CellsColor,  error)  {
	CGoReturnPtr := C.GlowEffect_GetColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &CellsColor{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteCellsColor) 

	return result, nil 
}
// Gets the color of the glow effect.
// Parameters:
//   value - CellsColor 
// Returns:
//   void  
func (instance *GlowEffect) SetColor(value *CellsColor)  error {
	CGoReturnPtr := C.GlowEffect_SetColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the radius of the glow, in unit of points.
// Returns:
//   float64  
func (instance *GlowEffect) GetSize()  (float64,  error)  {
	CGoReturnPtr := C.GlowEffect_GetSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of the glow, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GlowEffect) SetSize(value float64)  error {
	CGoReturnPtr := C.GlowEffect_SetSize( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the degree of transparency of the glow effect. Range from 0.0 (opaque) to 1.0 (clear).
// Returns:
//   float64  
func (instance *GlowEffect) GetTransparency()  (float64,  error)  {
	CGoReturnPtr := C.GlowEffect_GetTransparency( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the degree of transparency of the glow effect. Range from 0.0 (opaque) to 1.0 (clear).
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GlowEffect) SetTransparency(value float64)  error {
	CGoReturnPtr := C.GlowEffect_SetTransparency( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeleteGlowEffect(gloweffect *GlowEffect){
	runtime.SetFinalizer(gloweffect, nil)
	C.Delete_GlowEffect(gloweffect.ptr)
	gloweffect.ptr = nil
}

// Class GradientFill 

// Represents the gradient fill.
type GradientFill struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *GradientFill) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.GradientFill_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Represents the gradient stop collection.
// Returns:
//   GradientStopCollection  
func (instance *GradientFill) GetGradientStops()  (*GradientStopCollection,  error)  {
	CGoReturnPtr := C.GradientFill_GetGradientStops( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GradientStopCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGradientStopCollection) 

	return result, nil 
}
// Set the gradient fill type and direction.
// Parameters:
//   type - int32 
//   angle - float64 
//   direction - int32 
// Returns:
//   void  
func (instance *GradientFill) SetGradient(type_ GradientFillType, angle float64, direction GradientDirectionType)  error {
	CGoReturnPtr := C.GradientFill_SetGradient( instance.ptr, C.int( int32(type_)), C.double(angle), C.int( int32(direction)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the gradient fill type.
// Returns:
//   int32  
func (instance *GradientFill) GetFillType()  (GradientFillType,  error)  {
	CGoReturnPtr := C.GradientFill_GetFillType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToGradientFillType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets the gradient direction type.
// Returns:
//   int32  
func (instance *GradientFill) GetDirectionType()  (GradientDirectionType,  error)  {
	CGoReturnPtr := C.GradientFill_GetDirectionType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToGradientDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// The angle of linear fill.
// Returns:
//   float32  
func (instance *GradientFill) GetAngle()  (float32,  error)  {
	CGoReturnPtr := C.GradientFill_GetAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float32(CGoReturnPtr.return_value) 

	return result, nil 
}
// The angle of linear fill.
// Parameters:
//   value - float32 
// Returns:
//   void  
func (instance *GradientFill) SetAngle(value float32)  error {
	CGoReturnPtr := C.GradientFill_SetAngle( instance.ptr, C.float(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Sets preset theme gradient fill.
// Parameters:
//   gradientType - int32 
//   themeColorType - int32 
// Returns:
//   void  
func (instance *GradientFill) SetPresetThemeGradient(gradienttype PresetThemeGradientType, themecolortype ThemeColorType)  error {
	CGoReturnPtr := C.GradientFill_SetPresetThemeGradient( instance.ptr, C.int( int32(gradienttype)), C.int( int32(themecolortype)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Sets the specified fill to a one-color gradient.
// Only applies for Excel 2007.
// Parameters:
//   color - Color 
//   degree - float64 
//   style - int32 
//   variant - int32 
// Returns:
//   void  
func (instance *GradientFill) SetOneColorGradient(color *Color, degree float64, style GradientStyleType, variant int32)  error {
	CGoReturnPtr := C.GradientFill_SetOneColorGradient( instance.ptr, color.ptr, C.double(degree), C.int( int32(style)), C.int(variant))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Sets the specified fill to a two-color gradient.
// Only applies for Excel 2007.
// Parameters:
//   color1 - Color 
//   color2 - Color 
//   style - int32 
//   variant - int32 
// Returns:
//   void  
func (instance *GradientFill) SetTwoColorGradient_Color_Color_GradientStyleType_Int(color1 *Color, color2 *Color, style GradientStyleType, variant int32)  error {
	CGoReturnPtr := C.GradientFill_SetTwoColorGradient_Color_Color_GradientStyleType_Integer( instance.ptr, color1.ptr, color2.ptr, C.int( int32(style)), C.int(variant))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Sets the specified fill to a two-color gradient.
// Only applies for Excel 2007.
// Parameters:
//   color1 - Color 
//   transparency1 - float64 
//   color2 - Color 
//   transparency2 - float64 
//   style - int32 
//   variant - int32 
// Returns:
//   void  
func (instance *GradientFill) SetTwoColorGradient_Color_Double_Color_Double_GradientStyleType_Int(color1 *Color, transparency1 float64, color2 *Color, transparency2 float64, style GradientStyleType, variant int32)  error {
	CGoReturnPtr := C.GradientFill_SetTwoColorGradient_Color_Double_Color_Double_GradientStyleType_Integer( instance.ptr, color1.ptr, C.double(transparency1), color2.ptr, C.double(transparency2), C.int( int32(style)), C.int(variant))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeleteGradientFill(gradientfill *GradientFill){
	runtime.SetFinalizer(gradientfill, nil)
	C.Delete_GradientFill(gradientfill.ptr)
	gradientfill.ptr = nil
}

// Class GradientStop 

// Represents the gradient stop.
type GradientStop struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *GradientStop) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.GradientStop_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// The position of the stop.
// Returns:
//   float64  
func (instance *GradientStop) GetPosition()  (float64,  error)  {
	CGoReturnPtr := C.GradientStop_GetPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// The position of the stop.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GradientStop) SetPosition(value float64)  error {
	CGoReturnPtr := C.GradientStop_SetPosition( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the color of this gradient stop.
// Returns:
//   CellsColor  
func (instance *GradientStop) GetCellsColor()  (*CellsColor,  error)  {
	CGoReturnPtr := C.GradientStop_GetCellsColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &CellsColor{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteCellsColor) 

	return result, nil 
}
// Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
// Returns:
//   float64  
func (instance *GradientStop) GetTransparency()  (float64,  error)  {
	CGoReturnPtr := C.GradientStop_GetTransparency( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GradientStop) SetTransparency(value float64)  error {
	CGoReturnPtr := C.GradientStop_SetTransparency( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeleteGradientStop(gradientstop *GradientStop){
	runtime.SetFinalizer(gradientstop, nil)
	C.Delete_GradientStop(gradientstop.ptr)
	gradientstop.ptr = nil
}

// Class GradientStopCollection 

// Represents the gradient stop collection.
type GradientStopCollection struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *GradientStopCollection) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.GradientStopCollection_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Add a gradient stop.
// Parameters:
//   position - float64 
//   color - CellsColor 
//   alpha - int32 
// Returns:
//   void  
func (instance *GradientStopCollection) Add_Double_CellsColor_Int(position float64, color *CellsColor, alpha int32)  error {
	CGoReturnPtr := C.GradientStopCollection_Add_Double_CellsColor_Integer( instance.ptr, C.double(position), color.ptr, C.int(alpha))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Add a gradient stop.
// Parameters:
//   position - float64 
//   color - Color 
//   alpha - int32 
// Returns:
//   void  
func (instance *GradientStopCollection) Add_Double_Color_Int(position float64, color *Color, alpha int32)  error {
	CGoReturnPtr := C.GradientStopCollection_Add_Double_Color_Integer( instance.ptr, C.double(position), color.ptr, C.int(alpha))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the gradient stop by the index.
// Parameters:
//   index - int32 
// Returns:
//   GradientStop  
func (instance *GradientStopCollection) Get(index int32)  (*GradientStop,  error)  {
	CGoReturnPtr := C.GradientStopCollection_Get( instance.ptr, C.int(index))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GradientStop{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGradientStop) 

	return result, nil 
}
// Gets the gradient stop by the index.
// Parameters:
//   value - GradientStop 
//   index - int32 
// Returns:
//   void  
func (instance *GradientStopCollection) Set(value *GradientStop, index int32)  error {
	CGoReturnPtr := C.GradientStopCollection_Set( instance.ptr, value.ptr, C.int(index))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns:
//   int32  
func (instance *GradientStopCollection) GetCount()  (int32,  error)  {
	CGoReturnPtr := C.GradientStopCollection_GetCount( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}


func DeleteGradientStopCollection(gradientstopcollection *GradientStopCollection){
	runtime.SetFinalizer(gradientstopcollection, nil)
	C.Delete_GradientStopCollection(gradientstopcollection.ptr)
	gradientstopcollection.ptr = nil
}

// Class GroupBox 

// Encapsulates the object that represents a groupbox in a spreadsheet.
type GroupBox struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewGroupBox(src *Shape) ( *GroupBox, error) {
	groupbox := &GroupBox{}
	CGoReturnPtr := C.New_GroupBox(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		groupbox.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(groupbox, DeleteGroupBox)
		return groupbox, nil
	} else {
		groupbox.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return groupbox, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *GroupBox) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.GroupBox_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the groupbox has shadow.
// Returns:
//   bool  
func (instance *GroupBox) GetShadow()  (bool,  error)  {
	CGoReturnPtr := C.GroupBox_GetShadow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the groupbox has shadow.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupBox) SetShadow(value bool)  error {
	CGoReturnPtr := C.GroupBox_SetShadow( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *GroupBox) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.GroupBox_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *GroupBox) SetMacroName(value string)  error {
	CGoReturnPtr := C.GroupBox_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *GroupBox) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.GroupBox_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *GroupBox) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.GroupBox_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *GroupBox) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.GroupBox_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *GroupBox) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *GroupBox) GetName()  (string,  error)  {
	CGoReturnPtr := C.GroupBox_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *GroupBox) SetName(value string)  error {
	CGoReturnPtr := C.GroupBox_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *GroupBox) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.GroupBox_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *GroupBox) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.GroupBox_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *GroupBox) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.GroupBox_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *GroupBox) SetTitle(value string)  error {
	CGoReturnPtr := C.GroupBox_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *GroupBox) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.GroupBox_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *GroupBox) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.GroupBox_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *GroupBox) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.GroupBox_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *GroupBox) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.GroupBox_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *GroupBox) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.GroupBox_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *GroupBox) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.GroupBox_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupBox) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.GroupBox_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *GroupBox) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.GroupBox_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *GroupBox) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.GroupBox_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *GroupBox) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.GroupBox_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupBox) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.GroupBox_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *GroupBox) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.GroupBox_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupBox) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.GroupBox_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *GroupBox) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.GroupBox_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *GroupBox) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.GroupBox_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *GroupBox) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.GroupBox_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupBox) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.GroupBox_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *GroupBox) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.GroupBox_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *GroupBox) RemoveHyperlink()  error {
	CGoReturnPtr := C.GroupBox_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *GroupBox) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.GroupBox_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *GroupBox) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.GroupBox_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *GroupBox) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.GroupBox_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *GroupBox) GetId()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *GroupBox) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.GroupBox_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *GroupBox) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *GroupBox) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.GroupBox_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *GroupBox) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.GroupBox_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *GroupBox) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.GroupBox_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *GroupBox) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.GroupBox_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *GroupBox) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.GroupBox_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *GroupBox) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.GroupBox_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupBox) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.GroupBox_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *GroupBox) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.GroupBox_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupBox) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.GroupBox_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *GroupBox) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.GroupBox_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *GroupBox) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.GroupBox_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.GroupBox_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *GroupBox) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.GroupBox_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.GroupBox_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *GroupBox) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.GroupBox_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.GroupBox_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *GroupBox) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *GroupBox) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *GroupBox) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *GroupBox) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *GroupBox) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *GroupBox) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *GroupBox) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *GroupBox) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *GroupBox) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetRight(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *GroupBox) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetBottom(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *GroupBox) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetWidth(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *GroupBox) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.GroupBox_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupBox) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.GroupBox_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *GroupBox) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.GroupBox_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupBox) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.GroupBox_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *GroupBox) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.GroupBox_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupBox) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.GroupBox_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *GroupBox) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetHeight(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *GroupBox) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.GroupBox_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupBox) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.GroupBox_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *GroupBox) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.GroupBox_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupBox) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.GroupBox_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *GroupBox) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.GroupBox_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupBox) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.GroupBox_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *GroupBox) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetLeft(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *GroupBox) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.GroupBox_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupBox) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.GroupBox_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *GroupBox) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.GroupBox_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupBox) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.GroupBox_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *GroupBox) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetTop(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *GroupBox) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.GroupBox_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupBox) SetTopInch(value float64)  error {
	CGoReturnPtr := C.GroupBox_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *GroupBox) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.GroupBox_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupBox) SetTopCM(value float64)  error {
	CGoReturnPtr := C.GroupBox_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *GroupBox) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *GroupBox) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *GroupBox) GetX()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetX(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *GroupBox) GetY()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetY(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *GroupBox) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *GroupBox) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *GroupBox) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *GroupBox) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *GroupBox) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *GroupBox) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.GroupBox_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *GroupBox) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.GroupBox_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *GroupBox) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.GroupBox_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *GroupBox) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.GroupBox_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupBox) SetHasLine(value bool)  error {
	CGoReturnPtr := C.GroupBox_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *GroupBox) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.GroupBox_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupBox) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.GroupBox_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *GroupBox) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.GroupBox_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupBox) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.GroupBox_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *GroupBox) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.GroupBox_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupBox) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.GroupBox_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *GroupBox) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.GroupBox_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *GroupBox) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.GroupBox_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *GroupBox) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.GroupBox_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupBox) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.GroupBox_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *GroupBox) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.GroupBox_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *GroupBox) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.GroupBox_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *GroupBox) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.GroupBox_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *GroupBox) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.GroupBox_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *GroupBox) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.GroupBox_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *GroupBox) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.GroupBox_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *GroupBox) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.GroupBox_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *GroupBox) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.GroupBox_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *GroupBox) UpdateSelectedValue()  error {
	CGoReturnPtr := C.GroupBox_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *GroupBox) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.GroupBox_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.GroupBox_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *GroupBox) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.GroupBox_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *GroupBox) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.GroupBox_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *GroupBox) SetFont(value *Font)  error {
	CGoReturnPtr := C.GroupBox_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *GroupBox) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.GroupBox_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *GroupBox) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.GroupBox_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *GroupBox) GetText()  (string,  error)  {
	CGoReturnPtr := C.GroupBox_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *GroupBox) SetText(value string)  error {
	CGoReturnPtr := C.GroupBox_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *GroupBox) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.GroupBox_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *GroupBox) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.GroupBox_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *GroupBox) SetHtmlText(value string)  error {
	CGoReturnPtr := C.GroupBox_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *GroupBox) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.GroupBox_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *GroupBox) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.GroupBox_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *GroupBox) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.GroupBox_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.GroupBox_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *GroupBox) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.GroupBox_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.GroupBox_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *GroupBox) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.GroupBox_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupBox) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.GroupBox_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *GroupBox) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.GroupBox_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.GroupBox_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *GroupBox) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.GroupBox_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.GroupBox_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *GroupBox) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.GroupBox_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.GroupBox_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *GroupBox) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.GroupBox_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupBox) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.GroupBox_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *GroupBox) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.GroupBox_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *GroupBox) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.GroupBox_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *GroupBox) RemoveActiveXControl()  error {
	CGoReturnPtr := C.GroupBox_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *GroupBox) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.GroupBox_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *GroupBox) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.GroupBox_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *GroupBox) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.GroupBox_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *GroupBox) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.GroupBox_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *GroupBox) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.GroupBox_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupBox) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.GroupBox_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *GroupBox) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.GroupBox_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *GroupBox) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.GroupBox_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteGroupBox(groupbox *GroupBox){
	runtime.SetFinalizer(groupbox, nil)
	C.Delete_GroupBox(groupbox.ptr)
	groupbox.ptr = nil
}

// Class GroupFill 

// Represents this fill format should inherit the fill properties of the group.
type GroupFill struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *GroupFill) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.GroupFill_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteGroupFill(groupfill *GroupFill){
	runtime.SetFinalizer(groupfill, nil)
	C.Delete_GroupFill(groupfill.ptr)
	groupfill.ptr = nil
}

// Class GroupShape 

// Represents the group shape which contains the individual shapes.
type GroupShape struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewGroupShape(src *Shape) ( *GroupShape, error) {
	groupshape := &GroupShape{}
	CGoReturnPtr := C.New_GroupShape(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		groupshape.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(groupshape, DeleteGroupShape)
		return groupshape, nil
	} else {
		groupshape.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return groupshape, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *GroupShape) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.GroupShape_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets the child shape by index.
// Parameters:
//   index - int32 
// Returns:
//   Shape  
func (instance *GroupShape) Get(index int32)  (*Shape,  error)  {
	CGoReturnPtr := C.GroupShape_Get( instance.ptr, C.int(index))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Shape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShape) 

	return result, nil 
}
// Ungroups the shape items.
// Returns:
//   void  
func (instance *GroupShape) Ungroup()  error {
	CGoReturnPtr := C.GroupShape_Ungroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *GroupShape) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.GroupShape_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *GroupShape) SetMacroName(value string)  error {
	CGoReturnPtr := C.GroupShape_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *GroupShape) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.GroupShape_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *GroupShape) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.GroupShape_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *GroupShape) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.GroupShape_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *GroupShape) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *GroupShape) GetName()  (string,  error)  {
	CGoReturnPtr := C.GroupShape_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *GroupShape) SetName(value string)  error {
	CGoReturnPtr := C.GroupShape_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *GroupShape) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.GroupShape_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *GroupShape) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.GroupShape_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *GroupShape) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.GroupShape_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *GroupShape) SetTitle(value string)  error {
	CGoReturnPtr := C.GroupShape_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *GroupShape) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.GroupShape_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *GroupShape) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.GroupShape_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *GroupShape) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.GroupShape_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *GroupShape) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.GroupShape_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *GroupShape) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.GroupShape_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *GroupShape) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.GroupShape_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupShape) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.GroupShape_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *GroupShape) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.GroupShape_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *GroupShape) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.GroupShape_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *GroupShape) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.GroupShape_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupShape) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.GroupShape_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *GroupShape) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.GroupShape_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupShape) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.GroupShape_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *GroupShape) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.GroupShape_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *GroupShape) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.GroupShape_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *GroupShape) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.GroupShape_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupShape) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.GroupShape_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *GroupShape) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.GroupShape_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *GroupShape) RemoveHyperlink()  error {
	CGoReturnPtr := C.GroupShape_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *GroupShape) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.GroupShape_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *GroupShape) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.GroupShape_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *GroupShape) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.GroupShape_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *GroupShape) GetId()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *GroupShape) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.GroupShape_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *GroupShape) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *GroupShape) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.GroupShape_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *GroupShape) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.GroupShape_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *GroupShape) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.GroupShape_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *GroupShape) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.GroupShape_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *GroupShape) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.GroupShape_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *GroupShape) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.GroupShape_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupShape) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.GroupShape_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *GroupShape) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.GroupShape_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupShape) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.GroupShape_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *GroupShape) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.GroupShape_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *GroupShape) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.GroupShape_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.GroupShape_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *GroupShape) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.GroupShape_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.GroupShape_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *GroupShape) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.GroupShape_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.GroupShape_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *GroupShape) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *GroupShape) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *GroupShape) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *GroupShape) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *GroupShape) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *GroupShape) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *GroupShape) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *GroupShape) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *GroupShape) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetRight(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *GroupShape) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetBottom(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *GroupShape) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetWidth(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *GroupShape) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.GroupShape_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupShape) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.GroupShape_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *GroupShape) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.GroupShape_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupShape) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.GroupShape_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *GroupShape) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.GroupShape_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupShape) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.GroupShape_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *GroupShape) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetHeight(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *GroupShape) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.GroupShape_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupShape) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.GroupShape_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *GroupShape) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.GroupShape_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupShape) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.GroupShape_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *GroupShape) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.GroupShape_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupShape) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.GroupShape_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *GroupShape) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetLeft(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *GroupShape) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.GroupShape_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupShape) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.GroupShape_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *GroupShape) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.GroupShape_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupShape) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.GroupShape_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *GroupShape) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetTop(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *GroupShape) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.GroupShape_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupShape) SetTopInch(value float64)  error {
	CGoReturnPtr := C.GroupShape_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *GroupShape) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.GroupShape_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *GroupShape) SetTopCM(value float64)  error {
	CGoReturnPtr := C.GroupShape_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *GroupShape) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *GroupShape) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *GroupShape) GetX()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetX(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *GroupShape) GetY()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetY(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *GroupShape) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *GroupShape) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *GroupShape) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *GroupShape) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *GroupShape) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *GroupShape) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.GroupShape_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *GroupShape) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.GroupShape_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *GroupShape) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.GroupShape_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *GroupShape) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.GroupShape_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupShape) SetHasLine(value bool)  error {
	CGoReturnPtr := C.GroupShape_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *GroupShape) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.GroupShape_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupShape) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.GroupShape_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *GroupShape) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.GroupShape_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupShape) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.GroupShape_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *GroupShape) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.GroupShape_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupShape) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.GroupShape_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *GroupShape) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.GroupShape_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *GroupShape) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.GroupShape_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *GroupShape) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.GroupShape_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupShape) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.GroupShape_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *GroupShape) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.GroupShape_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *GroupShape) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.GroupShape_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *GroupShape) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.GroupShape_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *GroupShape) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.GroupShape_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *GroupShape) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.GroupShape_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *GroupShape) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.GroupShape_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *GroupShape) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.GroupShape_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *GroupShape) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.GroupShape_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *GroupShape) UpdateSelectedValue()  error {
	CGoReturnPtr := C.GroupShape_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *GroupShape) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.GroupShape_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.GroupShape_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *GroupShape) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.GroupShape_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *GroupShape) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.GroupShape_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *GroupShape) SetFont(value *Font)  error {
	CGoReturnPtr := C.GroupShape_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *GroupShape) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.GroupShape_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *GroupShape) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.GroupShape_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *GroupShape) GetText()  (string,  error)  {
	CGoReturnPtr := C.GroupShape_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *GroupShape) SetText(value string)  error {
	CGoReturnPtr := C.GroupShape_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *GroupShape) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.GroupShape_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *GroupShape) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.GroupShape_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *GroupShape) SetHtmlText(value string)  error {
	CGoReturnPtr := C.GroupShape_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *GroupShape) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.GroupShape_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *GroupShape) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.GroupShape_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *GroupShape) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.GroupShape_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.GroupShape_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *GroupShape) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.GroupShape_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.GroupShape_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *GroupShape) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.GroupShape_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupShape) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.GroupShape_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *GroupShape) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.GroupShape_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.GroupShape_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *GroupShape) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.GroupShape_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.GroupShape_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *GroupShape) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.GroupShape_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.GroupShape_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *GroupShape) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.GroupShape_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *GroupShape) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.GroupShape_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *GroupShape) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.GroupShape_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *GroupShape) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.GroupShape_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *GroupShape) RemoveActiveXControl()  error {
	CGoReturnPtr := C.GroupShape_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *GroupShape) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.GroupShape_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *GroupShape) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.GroupShape_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *GroupShape) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.GroupShape_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *GroupShape) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.GroupShape_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *GroupShape) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.GroupShape_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *GroupShape) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.GroupShape_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *GroupShape) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.GroupShape_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *GroupShape) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.GroupShape_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteGroupShape(groupshape *GroupShape){
	runtime.SetFinalizer(groupshape, nil)
	C.Delete_GroupShape(groupshape.ptr)
	groupshape.ptr = nil
}

// Class Label 

// Encapsulates the object that represents a label in a spreadsheet.
type Label struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewLabel(src *Shape) ( *Label, error) {
	label := &Label{}
	CGoReturnPtr := C.New_Label(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		label.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(label, DeleteLabel)
		return label, nil
	} else {
		label.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return label, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *Label) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.Label_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *Label) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.Label_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Label) SetMacroName(value string)  error {
	CGoReturnPtr := C.Label_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *Label) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.Label_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *Label) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.Label_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *Label) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.Label_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *Label) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.Label_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *Label) GetName()  (string,  error)  {
	CGoReturnPtr := C.Label_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Label) SetName(value string)  error {
	CGoReturnPtr := C.Label_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *Label) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.Label_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Label) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.Label_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *Label) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.Label_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Label) SetTitle(value string)  error {
	CGoReturnPtr := C.Label_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *Label) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.Label_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *Label) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.Label_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *Label) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.Label_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *Label) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.Label_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *Label) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.Label_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *Label) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.Label_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Label) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.Label_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *Label) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.Label_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *Label) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.Label_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *Label) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.Label_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Label) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.Label_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *Label) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.Label_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Label) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.Label_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *Label) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.Label_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *Label) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.Label_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *Label) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.Label_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Label) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.Label_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *Label) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.Label_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *Label) RemoveHyperlink()  error {
	CGoReturnPtr := C.Label_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *Label) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.Label_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *Label) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.Label_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *Label) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.Label_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *Label) GetId()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *Label) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.Label_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *Label) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *Label) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.Label_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *Label) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.Label_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *Label) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.Label_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *Label) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.Label_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *Label) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.Label_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *Label) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.Label_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Label) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.Label_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *Label) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.Label_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Label) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.Label_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *Label) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.Label_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *Label) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.Label_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.Label_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *Label) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.Label_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.Label_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *Label) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.Label_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.Label_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *Label) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.Label_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *Label) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.Label_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *Label) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.Label_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *Label) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.Label_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *Label) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.Label_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *Label) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.Label_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *Label) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.Label_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *Label) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.Label_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *Label) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetRight(value int32)  error {
	CGoReturnPtr := C.Label_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *Label) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetBottom(value int32)  error {
	CGoReturnPtr := C.Label_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *Label) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetWidth(value int32)  error {
	CGoReturnPtr := C.Label_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *Label) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.Label_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Label) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.Label_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *Label) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.Label_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Label) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.Label_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *Label) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.Label_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Label) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.Label_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *Label) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetHeight(value int32)  error {
	CGoReturnPtr := C.Label_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *Label) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.Label_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Label) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.Label_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *Label) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.Label_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Label) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.Label_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *Label) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.Label_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Label) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.Label_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *Label) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetLeft(value int32)  error {
	CGoReturnPtr := C.Label_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *Label) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.Label_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Label) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.Label_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *Label) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.Label_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Label) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.Label_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *Label) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetTop(value int32)  error {
	CGoReturnPtr := C.Label_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *Label) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.Label_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Label) SetTopInch(value float64)  error {
	CGoReturnPtr := C.Label_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *Label) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.Label_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Label) SetTopCM(value float64)  error {
	CGoReturnPtr := C.Label_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *Label) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.Label_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *Label) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.Label_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *Label) GetX()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetX(value int32)  error {
	CGoReturnPtr := C.Label_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *Label) GetY()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetY(value int32)  error {
	CGoReturnPtr := C.Label_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *Label) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.Label_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *Label) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.Label_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *Label) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.Label_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *Label) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.Label_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *Label) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.Label_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *Label) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.Label_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *Label) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.Label_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *Label) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.Label_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *Label) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.Label_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Label) SetHasLine(value bool)  error {
	CGoReturnPtr := C.Label_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *Label) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.Label_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Label) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.Label_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *Label) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.Label_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Label) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.Label_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *Label) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.Label_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Label) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.Label_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *Label) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.Label_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *Label) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.Label_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *Label) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.Label_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Label) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.Label_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *Label) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.Label_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Label) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.Label_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *Label) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.Label_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Label) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.Label_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *Label) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.Label_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *Label) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.Label_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *Label) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.Label_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *Label) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.Label_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *Label) UpdateSelectedValue()  error {
	CGoReturnPtr := C.Label_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *Label) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.Label_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.Label_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *Label) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.Label_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *Label) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.Label_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *Label) SetFont(value *Font)  error {
	CGoReturnPtr := C.Label_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *Label) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.Label_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *Label) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.Label_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *Label) GetText()  (string,  error)  {
	CGoReturnPtr := C.Label_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Label) SetText(value string)  error {
	CGoReturnPtr := C.Label_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *Label) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.Label_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *Label) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.Label_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Label) SetHtmlText(value string)  error {
	CGoReturnPtr := C.Label_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *Label) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.Label_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *Label) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.Label_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *Label) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.Label_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.Label_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *Label) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.Label_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.Label_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *Label) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.Label_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Label) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.Label_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *Label) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.Label_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.Label_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *Label) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.Label_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.Label_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *Label) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.Label_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.Label_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *Label) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.Label_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Label) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.Label_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *Label) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.Label_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *Label) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.Label_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *Label) RemoveActiveXControl()  error {
	CGoReturnPtr := C.Label_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *Label) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.Label_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *Label) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.Label_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *Label) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.Label_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *Label) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.Label_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *Label) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.Label_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Label) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.Label_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *Label) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.Label_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *Label) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.Label_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteLabel(label *Label){
	runtime.SetFinalizer(label, nil)
	C.Delete_Label(label.ptr)
	label.ptr = nil
}

// Class Line 

// Encapsulates the object that represents the line format.
type Line struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *Line) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.Line_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Specifies the compound line type
// Returns:
//   int32  
func (instance *Line) GetCompoundType()  (MsoLineStyle,  error)  {
	CGoReturnPtr := C.Line_GetCompoundType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoLineStyle(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Specifies the compound line type
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Line) SetCompoundType(value MsoLineStyle)  error {
	CGoReturnPtr := C.Line_SetCompoundType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the dash line type
// Returns:
//   int32  
func (instance *Line) GetDashType()  (MsoLineDashStyle,  error)  {
	CGoReturnPtr := C.Line_GetDashType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoLineDashStyle(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Specifies the dash line type
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Line) SetDashType(value MsoLineDashStyle)  error {
	CGoReturnPtr := C.Line_SetDashType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the ending caps.
// Returns:
//   int32  
func (instance *Line) GetCapType()  (LineCapType,  error)  {
	CGoReturnPtr := C.Line_GetCapType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToLineCapType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Specifies the ending caps.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Line) SetCapType(value LineCapType)  error {
	CGoReturnPtr := C.Line_SetCapType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the joining caps.
// Returns:
//   int32  
func (instance *Line) GetJoinType()  (LineJoinType,  error)  {
	CGoReturnPtr := C.Line_GetJoinType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToLineJoinType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Specifies the joining caps.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Line) SetJoinType(value LineJoinType)  error {
	CGoReturnPtr := C.Line_SetJoinType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies an arrowhead for the begin of a line.
// Returns:
//   int32  
func (instance *Line) GetBeginType()  (MsoArrowheadStyle,  error)  {
	CGoReturnPtr := C.Line_GetBeginType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoArrowheadStyle(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Specifies an arrowhead for the begin of a line.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Line) SetBeginType(value MsoArrowheadStyle)  error {
	CGoReturnPtr := C.Line_SetBeginType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies an arrowhead for the end of a line.
// Returns:
//   int32  
func (instance *Line) GetEndType()  (MsoArrowheadStyle,  error)  {
	CGoReturnPtr := C.Line_GetEndType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoArrowheadStyle(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Specifies an arrowhead for the end of a line.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Line) SetEndType(value MsoArrowheadStyle)  error {
	CGoReturnPtr := C.Line_SetEndType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the length of the arrowhead for the begin of a line.
// Returns:
//   int32  
func (instance *Line) GetBeginArrowLength()  (MsoArrowheadLength,  error)  {
	CGoReturnPtr := C.Line_GetBeginArrowLength( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoArrowheadLength(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Specifies the length of the arrowhead for the begin of a line.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Line) SetBeginArrowLength(value MsoArrowheadLength)  error {
	CGoReturnPtr := C.Line_SetBeginArrowLength( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the length of the arrowhead for the end of a line.
// Returns:
//   int32  
func (instance *Line) GetEndArrowLength()  (MsoArrowheadLength,  error)  {
	CGoReturnPtr := C.Line_GetEndArrowLength( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoArrowheadLength(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Specifies the length of the arrowhead for the end of a line.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Line) SetEndArrowLength(value MsoArrowheadLength)  error {
	CGoReturnPtr := C.Line_SetEndArrowLength( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the width of the arrowhead for the begin of a line.
// Returns:
//   int32  
func (instance *Line) GetBeginArrowWidth()  (MsoArrowheadWidth,  error)  {
	CGoReturnPtr := C.Line_GetBeginArrowWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoArrowheadWidth(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Specifies the width of the arrowhead for the begin of a line.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Line) SetBeginArrowWidth(value MsoArrowheadWidth)  error {
	CGoReturnPtr := C.Line_SetBeginArrowWidth( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the width of the arrowhead for the end of a line.
// Returns:
//   int32  
func (instance *Line) GetEndArrowWidth()  (MsoArrowheadWidth,  error)  {
	CGoReturnPtr := C.Line_GetEndArrowWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoArrowheadWidth(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Specifies the width of the arrowhead for the end of a line.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Line) SetEndArrowWidth(value MsoArrowheadWidth)  error {
	CGoReturnPtr := C.Line_SetEndArrowWidth( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the theme color.
// Returns:
//   ThemeColor  
func (instance *Line) GetThemeColor()  (*ThemeColor,  error)  {
	CGoReturnPtr := C.Line_GetThemeColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThemeColor{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThemeColor) 

	return result, nil 
}
// Gets and sets the theme color.
// Parameters:
//   value - ThemeColor 
// Returns:
//   void  
func (instance *Line) SetThemeColor(value *ThemeColor)  error {
	CGoReturnPtr := C.Line_SetThemeColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the <see cref="Color"/> of the line.
// Returns:
//   Color  
func (instance *Line) GetColor()  (*Color,  error)  {
	CGoReturnPtr := C.Line_GetColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Color{}
	result.ptr = CGoReturnPtr.return_value 

	return result, nil 
}
// Represents the <see cref="Color"/> of the line.
// Parameters:
//   value - Color 
// Returns:
//   void  
func (instance *Line) SetColor(value *Color)  error {
	CGoReturnPtr := C.Line_SetColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the degree of transparency of the line as a value from 0.0 (opaque) through 1.0 (clear).
// Returns:
//   float64  
func (instance *Line) GetTransparency()  (float64,  error)  {
	CGoReturnPtr := C.Line_GetTransparency( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the degree of transparency of the line as a value from 0.0 (opaque) through 1.0 (clear).
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Line) SetTransparency(value float64)  error {
	CGoReturnPtr := C.Line_SetTransparency( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the style of the line.
// Returns:
//   int32  
func (instance *Line) GetStyle()  (LineType,  error)  {
	CGoReturnPtr := C.Line_GetStyle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToLineType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the style of the line.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Line) SetStyle(value LineType)  error {
	CGoReturnPtr := C.Line_SetStyle( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the <see cref="WeightType"/> of the line.
// Returns:
//   int32  
func (instance *Line) GetWeight()  (WeightType,  error)  {
	CGoReturnPtr := C.Line_GetWeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToWeightType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets or sets the <see cref="WeightType"/> of the line.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Line) SetWeight(value WeightType)  error {
	CGoReturnPtr := C.Line_SetWeight( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the weight of the line in unit of points.
// Returns:
//   float64  
func (instance *Line) GetWeightPt()  (float64,  error)  {
	CGoReturnPtr := C.Line_GetWeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the weight of the line in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Line) SetWeightPt(value float64)  error {
	CGoReturnPtr := C.Line_SetWeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the weight of the line in unit of pixels.
// Returns:
//   float64  
func (instance *Line) GetWeightPx()  (float64,  error)  {
	CGoReturnPtr := C.Line_GetWeightPx( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the weight of the line in unit of pixels.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Line) SetWeightPx(value float64)  error {
	CGoReturnPtr := C.Line_SetWeightPx( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets format type.
// Returns:
//   int32  
func (instance *Line) GetFormattingType()  (ChartLineFormattingType,  error)  {
	CGoReturnPtr := C.Line_GetFormattingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToChartLineFormattingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets or sets format type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Line) SetFormattingType(value ChartLineFormattingType)  error {
	CGoReturnPtr := C.Line_SetFormattingType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the color of line is automatic assigned.
// Returns:
//   bool  
func (instance *Line) IsAutomaticColor()  (bool,  error)  {
	CGoReturnPtr := C.Line_IsAutomaticColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Represents whether the line is visible.
// Returns:
//   bool  
func (instance *Line) IsVisible()  (bool,  error)  {
	CGoReturnPtr := C.Line_IsVisible( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Represents whether the line is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Line) SetIsVisible(value bool)  error {
	CGoReturnPtr := C.Line_SetIsVisible( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether this line style is auto assigned.
// Returns:
//   bool  
func (instance *Line) IsAuto()  (bool,  error)  {
	CGoReturnPtr := C.Line_IsAuto( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this line style is auto assigned.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Line) SetIsAuto(value bool)  error {
	CGoReturnPtr := C.Line_SetIsAuto( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents gradient fill.
// Returns:
//   GradientFill  
func (instance *Line) GetGradientFill()  (*GradientFill,  error)  {
	CGoReturnPtr := C.Line_GetGradientFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GradientFill{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGradientFill) 

	return result, nil 
}


func DeleteLine(line *Line){
	runtime.SetFinalizer(line, nil)
	C.Delete_Line(line.ptr)
	line.ptr = nil
}

// Class LineFormat 

// Represents all setting of the line.
type LineFormat struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - FillFormat 
func NewLineFormat(src *FillFormat) ( *LineFormat, error) {
	lineformat := &LineFormat{}
	CGoReturnPtr := C.New_LineFormat(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		lineformat.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(lineformat, DeleteLineFormat)
		return lineformat, nil
	} else {
		lineformat.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return lineformat, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *LineFormat) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.LineFormat_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets the hash code.
// Returns:
//   int32  
func (instance *LineFormat) GetHashCode()  (int32,  error)  {
	CGoReturnPtr := C.LineFormat_GetHashCode( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Determines whether this instance has the same value as another specified <see cref="LineFormat"/> object.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *LineFormat) Equals(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.LineFormat_Equals( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Specifies the line compound type.
// Returns:
//   int32  
func (instance *LineFormat) GetCompoundType()  (MsoLineStyle,  error)  {
	CGoReturnPtr := C.LineFormat_GetCompoundType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoLineStyle(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Specifies the line compound type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineFormat) SetCompoundType(value MsoLineStyle)  error {
	CGoReturnPtr := C.LineFormat_SetCompoundType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the line dash type.
// Returns:
//   int32  
func (instance *LineFormat) GetDashStyle()  (MsoLineDashStyle,  error)  {
	CGoReturnPtr := C.LineFormat_GetDashStyle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoLineDashStyle(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Specifies the line dash type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineFormat) SetDashStyle(value MsoLineDashStyle)  error {
	CGoReturnPtr := C.LineFormat_SetDashStyle( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the ending caps.
// Returns:
//   int32  
func (instance *LineFormat) GetCapType()  (LineCapType,  error)  {
	CGoReturnPtr := C.LineFormat_GetCapType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToLineCapType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Specifies the ending caps.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineFormat) SetCapType(value LineCapType)  error {
	CGoReturnPtr := C.LineFormat_SetCapType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the line join type.
// Returns:
//   int32  
func (instance *LineFormat) GetJoinType()  (LineJoinType,  error)  {
	CGoReturnPtr := C.LineFormat_GetJoinType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToLineJoinType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Specifies the line join type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineFormat) SetJoinType(value LineJoinType)  error {
	CGoReturnPtr := C.LineFormat_SetJoinType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the begin arrow type of the line.
// Returns:
//   int32  
func (instance *LineFormat) GetBeginArrowheadStyle()  (MsoArrowheadStyle,  error)  {
	CGoReturnPtr := C.LineFormat_GetBeginArrowheadStyle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoArrowheadStyle(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the begin arrow type of the line.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineFormat) SetBeginArrowheadStyle(value MsoArrowheadStyle)  error {
	CGoReturnPtr := C.LineFormat_SetBeginArrowheadStyle( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the begin arrow width type of the line.
// Returns:
//   int32  
func (instance *LineFormat) GetBeginArrowheadWidth()  (MsoArrowheadWidth,  error)  {
	CGoReturnPtr := C.LineFormat_GetBeginArrowheadWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoArrowheadWidth(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the begin arrow width type of the line.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineFormat) SetBeginArrowheadWidth(value MsoArrowheadWidth)  error {
	CGoReturnPtr := C.LineFormat_SetBeginArrowheadWidth( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the begin arrow length type of the line.
// Returns:
//   int32  
func (instance *LineFormat) GetBeginArrowheadLength()  (MsoArrowheadLength,  error)  {
	CGoReturnPtr := C.LineFormat_GetBeginArrowheadLength( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoArrowheadLength(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the begin arrow length type of the line.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineFormat) SetBeginArrowheadLength(value MsoArrowheadLength)  error {
	CGoReturnPtr := C.LineFormat_SetBeginArrowheadLength( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the end arrow type of the line.
// Returns:
//   int32  
func (instance *LineFormat) GetEndArrowheadStyle()  (MsoArrowheadStyle,  error)  {
	CGoReturnPtr := C.LineFormat_GetEndArrowheadStyle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoArrowheadStyle(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the end arrow type of the line.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineFormat) SetEndArrowheadStyle(value MsoArrowheadStyle)  error {
	CGoReturnPtr := C.LineFormat_SetEndArrowheadStyle( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the end arrow width type of the line.
// Returns:
//   int32  
func (instance *LineFormat) GetEndArrowheadWidth()  (MsoArrowheadWidth,  error)  {
	CGoReturnPtr := C.LineFormat_GetEndArrowheadWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoArrowheadWidth(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the end arrow width type of the line.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineFormat) SetEndArrowheadWidth(value MsoArrowheadWidth)  error {
	CGoReturnPtr := C.LineFormat_SetEndArrowheadWidth( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the end arrow length type of the line.
// Returns:
//   int32  
func (instance *LineFormat) GetEndArrowheadLength()  (MsoArrowheadLength,  error)  {
	CGoReturnPtr := C.LineFormat_GetEndArrowheadLength( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoArrowheadLength(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the end arrow length type of the line.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineFormat) SetEndArrowheadLength(value MsoArrowheadLength)  error {
	CGoReturnPtr := C.LineFormat_SetEndArrowheadLength( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the weight of the line in unit of points.
// Returns:
//   float64  
func (instance *LineFormat) GetWeight()  (float64,  error)  {
	CGoReturnPtr := C.LineFormat_GetWeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the weight of the line in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *LineFormat) SetWeight(value float64)  error {
	CGoReturnPtr := C.LineFormat_SetWeight( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets fill type
// Returns:
//   int32  
func (instance *LineFormat) GetFillType()  (FillType,  error)  {
	CGoReturnPtr := C.LineFormat_GetFillType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToFillType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets fill type
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineFormat) SetFillType(value FillType)  error {
	CGoReturnPtr := C.LineFormat_SetFillType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
// Returns:
//   float64  
func (instance *LineFormat) GetTransparency()  (float64,  error)  {
	CGoReturnPtr := C.LineFormat_GetTransparency( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *LineFormat) SetTransparency(value float64)  error {
	CGoReturnPtr := C.LineFormat_SetTransparency( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets <see cref="GradientFill"/> object.
// Returns:
//   GradientFill  
func (instance *LineFormat) GetGradientFill()  (*GradientFill,  error)  {
	CGoReturnPtr := C.LineFormat_GetGradientFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GradientFill{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGradientFill) 

	return result, nil 
}
// Gets <see cref="TextureFill"/> object.
// Returns:
//   TextureFill  
func (instance *LineFormat) GetTextureFill()  (*TextureFill,  error)  {
	CGoReturnPtr := C.LineFormat_GetTextureFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextureFill{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextureFill) 

	return result, nil 
}
// Gets <see cref="SolidFill"/> object.
// Returns:
//   SolidFill  
func (instance *LineFormat) GetSolidFill()  (*SolidFill,  error)  {
	CGoReturnPtr := C.LineFormat_GetSolidFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &SolidFill{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteSolidFill) 

	return result, nil 
}
// Gets <see cref="PatternFill"/> object.
// Returns:
//   PatternFill  
func (instance *LineFormat) GetPatternFill()  (*PatternFill,  error)  {
	CGoReturnPtr := C.LineFormat_GetPatternFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &PatternFill{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeletePatternFill) 

	return result, nil 
}
// Returns the gradient color type for the specified fill.
// Returns:
//   int32  
func (instance *LineFormat) GetGradientColorType()  (GradientColorType,  error)  {
	CGoReturnPtr := C.LineFormat_GetGradientColorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToGradientColorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Returns the gradient style for the specified fill.
// Returns:
//   int32  
func (instance *LineFormat) GetGradientStyle()  (GradientStyleType,  error)  {
	CGoReturnPtr := C.LineFormat_GetGradientStyle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToGradientStyleType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Returns the gradient color 1 for the specified fill.
// Returns:
//   Color  
func (instance *LineFormat) GetGradientColor1()  (*Color,  error)  {
	CGoReturnPtr := C.LineFormat_GetGradientColor1( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Color{}
	result.ptr = CGoReturnPtr.return_value 

	return result, nil 
}
// Returns the gradient color 2 for the specified fill.
// Returns:
//   Color  
func (instance *LineFormat) GetGradientColor2()  (*Color,  error)  {
	CGoReturnPtr := C.LineFormat_GetGradientColor2( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Color{}
	result.ptr = CGoReturnPtr.return_value 

	return result, nil 
}
// Returns the gradient degree for the specified fill.
// Only applies for Excel 2007.
// Returns:
//   float64  
func (instance *LineFormat) GetGradientDegree()  (float64,  error)  {
	CGoReturnPtr := C.LineFormat_GetGradientDegree( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the gradient variant for the specified fill.
// Only applies for Excel 2007.
// Returns:
//   int32  
func (instance *LineFormat) GetGradientVariant()  (int32,  error)  {
	CGoReturnPtr := C.LineFormat_GetGradientVariant( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the gradient preset color for the specified fill.
// Returns:
//   int32  
func (instance *LineFormat) GetPresetColor()  (GradientPresetType,  error)  {
	CGoReturnPtr := C.LineFormat_GetPresetColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToGradientPresetType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Sets the specified fill to a one-color gradient.
// Only applies for Excel 2007.
// Parameters:
//   color - Color 
//   degree - float64 
//   style - int32 
//   variant - int32 
// Returns:
//   void  
func (instance *LineFormat) SetOneColorGradient(color *Color, degree float64, style GradientStyleType, variant int32)  error {
	CGoReturnPtr := C.LineFormat_SetOneColorGradient( instance.ptr, color.ptr, C.double(degree), C.int( int32(style)), C.int(variant))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Sets the specified fill to a two-color gradient.
// Only applies for Excel 2007.
// Parameters:
//   color1 - Color 
//   color2 - Color 
//   style - int32 
//   variant - int32 
// Returns:
//   void  
func (instance *LineFormat) SetTwoColorGradient_Color_Color_GradientStyleType_Int(color1 *Color, color2 *Color, style GradientStyleType, variant int32)  error {
	CGoReturnPtr := C.LineFormat_SetTwoColorGradient_Color_Color_GradientStyleType_Integer( instance.ptr, color1.ptr, color2.ptr, C.int( int32(style)), C.int(variant))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Sets the specified fill to a two-color gradient.
// Only applies for Excel 2007.
// Parameters:
//   color1 - Color 
//   transparency1 - float64 
//   color2 - Color 
//   transparency2 - float64 
//   style - int32 
//   variant - int32 
// Returns:
//   void  
func (instance *LineFormat) SetTwoColorGradient_Color_Double_Color_Double_GradientStyleType_Int(color1 *Color, transparency1 float64, color2 *Color, transparency2 float64, style GradientStyleType, variant int32)  error {
	CGoReturnPtr := C.LineFormat_SetTwoColorGradient_Color_Double_Color_Double_GradientStyleType_Integer( instance.ptr, color1.ptr, C.double(transparency1), color2.ptr, C.double(transparency2), C.int( int32(style)), C.int(variant))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Sets the specified fill to a preset-color gradient.
// Only applies for Excel 2007.
// Parameters:
//   presetColor - int32 
//   style - int32 
//   variant - int32 
// Returns:
//   void  
func (instance *LineFormat) SetPresetColorGradient(presetcolor GradientPresetType, style GradientStyleType, variant int32)  error {
	CGoReturnPtr := C.LineFormat_SetPresetColorGradient( instance.ptr, C.int( int32(presetcolor)), C.int( int32(style)), C.int(variant))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the texture type for the specified fill.
// Returns:
//   int32  
func (instance *LineFormat) GetTexture()  (TextureType,  error)  {
	CGoReturnPtr := C.LineFormat_GetTexture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextureType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the texture type for the specified fill.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineFormat) SetTexture(value TextureType)  error {
	CGoReturnPtr := C.LineFormat_SetTexture( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents an area's display pattern.
// Returns:
//   int32  
func (instance *LineFormat) GetPattern()  (FillPattern,  error)  {
	CGoReturnPtr := C.LineFormat_GetPattern( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToFillPattern(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents an area's display pattern.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineFormat) SetPattern(value FillPattern)  error {
	CGoReturnPtr := C.LineFormat_SetPattern( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the picture format type.
// Returns:
//   int32  
func (instance *LineFormat) GetPictureFormatType()  (FillPictureType,  error)  {
	CGoReturnPtr := C.LineFormat_GetPictureFormatType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToFillPictureType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the picture format type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineFormat) SetPictureFormatType(value FillPictureType)  error {
	CGoReturnPtr := C.LineFormat_SetPictureFormatType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the picture format scale.
// Returns:
//   float64  
func (instance *LineFormat) GetScale()  (float64,  error)  {
	CGoReturnPtr := C.LineFormat_GetScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the picture format scale.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *LineFormat) SetScale(value float64)  error {
	CGoReturnPtr := C.LineFormat_SetScale( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeleteLineFormat(lineformat *LineFormat){
	runtime.SetFinalizer(lineformat, nil)
	C.Delete_LineFormat(lineformat.ptr)
	lineformat.ptr = nil
}

// Class LineShape 

// Represents the line shape.
type LineShape struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewLineShape(src *Shape) ( *LineShape, error) {
	lineshape := &LineShape{}
	CGoReturnPtr := C.New_LineShape(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		lineshape.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(lineshape, DeleteLineShape)
		return lineshape, nil
	} else {
		lineshape.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return lineshape, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *LineShape) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.LineShape_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *LineShape) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.LineShape_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *LineShape) SetMacroName(value string)  error {
	CGoReturnPtr := C.LineShape_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *LineShape) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.LineShape_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *LineShape) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.LineShape_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *LineShape) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.LineShape_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *LineShape) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.LineShape_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *LineShape) GetName()  (string,  error)  {
	CGoReturnPtr := C.LineShape_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *LineShape) SetName(value string)  error {
	CGoReturnPtr := C.LineShape_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *LineShape) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.LineShape_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *LineShape) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.LineShape_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *LineShape) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.LineShape_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *LineShape) SetTitle(value string)  error {
	CGoReturnPtr := C.LineShape_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *LineShape) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.LineShape_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *LineShape) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.LineShape_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *LineShape) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.LineShape_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *LineShape) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.LineShape_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *LineShape) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.LineShape_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *LineShape) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.LineShape_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *LineShape) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.LineShape_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *LineShape) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.LineShape_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *LineShape) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.LineShape_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *LineShape) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.LineShape_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *LineShape) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.LineShape_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *LineShape) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.LineShape_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *LineShape) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.LineShape_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *LineShape) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.LineShape_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *LineShape) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.LineShape_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *LineShape) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.LineShape_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *LineShape) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.LineShape_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *LineShape) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.LineShape_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *LineShape) RemoveHyperlink()  error {
	CGoReturnPtr := C.LineShape_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *LineShape) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.LineShape_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *LineShape) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.LineShape_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *LineShape) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.LineShape_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *LineShape) GetId()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *LineShape) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.LineShape_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *LineShape) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *LineShape) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.LineShape_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *LineShape) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.LineShape_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *LineShape) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.LineShape_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *LineShape) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.LineShape_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *LineShape) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.LineShape_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *LineShape) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.LineShape_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *LineShape) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.LineShape_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *LineShape) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.LineShape_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *LineShape) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.LineShape_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *LineShape) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.LineShape_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *LineShape) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.LineShape_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.LineShape_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *LineShape) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.LineShape_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.LineShape_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *LineShape) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.LineShape_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.LineShape_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *LineShape) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.LineShape_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *LineShape) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.LineShape_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *LineShape) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.LineShape_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *LineShape) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.LineShape_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *LineShape) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.LineShape_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *LineShape) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.LineShape_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *LineShape) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.LineShape_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *LineShape) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.LineShape_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *LineShape) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetRight(value int32)  error {
	CGoReturnPtr := C.LineShape_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *LineShape) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetBottom(value int32)  error {
	CGoReturnPtr := C.LineShape_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *LineShape) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetWidth(value int32)  error {
	CGoReturnPtr := C.LineShape_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *LineShape) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.LineShape_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *LineShape) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.LineShape_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *LineShape) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.LineShape_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *LineShape) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.LineShape_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *LineShape) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.LineShape_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *LineShape) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.LineShape_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *LineShape) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetHeight(value int32)  error {
	CGoReturnPtr := C.LineShape_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *LineShape) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.LineShape_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *LineShape) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.LineShape_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *LineShape) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.LineShape_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *LineShape) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.LineShape_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *LineShape) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.LineShape_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *LineShape) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.LineShape_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *LineShape) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetLeft(value int32)  error {
	CGoReturnPtr := C.LineShape_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *LineShape) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.LineShape_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *LineShape) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.LineShape_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *LineShape) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.LineShape_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *LineShape) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.LineShape_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *LineShape) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetTop(value int32)  error {
	CGoReturnPtr := C.LineShape_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *LineShape) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.LineShape_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *LineShape) SetTopInch(value float64)  error {
	CGoReturnPtr := C.LineShape_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *LineShape) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.LineShape_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *LineShape) SetTopCM(value float64)  error {
	CGoReturnPtr := C.LineShape_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *LineShape) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.LineShape_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *LineShape) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.LineShape_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *LineShape) GetX()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetX(value int32)  error {
	CGoReturnPtr := C.LineShape_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *LineShape) GetY()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetY(value int32)  error {
	CGoReturnPtr := C.LineShape_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *LineShape) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.LineShape_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *LineShape) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.LineShape_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *LineShape) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.LineShape_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *LineShape) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.LineShape_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *LineShape) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.LineShape_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *LineShape) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.LineShape_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *LineShape) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.LineShape_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *LineShape) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.LineShape_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *LineShape) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.LineShape_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *LineShape) SetHasLine(value bool)  error {
	CGoReturnPtr := C.LineShape_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *LineShape) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.LineShape_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *LineShape) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.LineShape_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *LineShape) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.LineShape_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *LineShape) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.LineShape_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *LineShape) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.LineShape_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *LineShape) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.LineShape_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *LineShape) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.LineShape_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *LineShape) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.LineShape_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *LineShape) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.LineShape_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *LineShape) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.LineShape_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *LineShape) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.LineShape_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *LineShape) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.LineShape_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *LineShape) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.LineShape_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *LineShape) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.LineShape_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *LineShape) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.LineShape_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *LineShape) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.LineShape_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *LineShape) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.LineShape_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *LineShape) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.LineShape_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *LineShape) UpdateSelectedValue()  error {
	CGoReturnPtr := C.LineShape_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *LineShape) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.LineShape_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.LineShape_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *LineShape) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.LineShape_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *LineShape) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.LineShape_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *LineShape) SetFont(value *Font)  error {
	CGoReturnPtr := C.LineShape_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *LineShape) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.LineShape_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *LineShape) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.LineShape_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *LineShape) GetText()  (string,  error)  {
	CGoReturnPtr := C.LineShape_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *LineShape) SetText(value string)  error {
	CGoReturnPtr := C.LineShape_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *LineShape) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.LineShape_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *LineShape) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.LineShape_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *LineShape) SetHtmlText(value string)  error {
	CGoReturnPtr := C.LineShape_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *LineShape) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.LineShape_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *LineShape) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.LineShape_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *LineShape) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.LineShape_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.LineShape_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *LineShape) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.LineShape_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.LineShape_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *LineShape) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.LineShape_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *LineShape) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.LineShape_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *LineShape) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.LineShape_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.LineShape_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *LineShape) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.LineShape_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.LineShape_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *LineShape) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.LineShape_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.LineShape_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *LineShape) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.LineShape_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *LineShape) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.LineShape_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *LineShape) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.LineShape_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *LineShape) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.LineShape_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *LineShape) RemoveActiveXControl()  error {
	CGoReturnPtr := C.LineShape_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *LineShape) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.LineShape_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *LineShape) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.LineShape_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *LineShape) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.LineShape_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *LineShape) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.LineShape_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *LineShape) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.LineShape_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *LineShape) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.LineShape_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *LineShape) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.LineShape_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *LineShape) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.LineShape_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteLineShape(lineshape *LineShape){
	runtime.SetFinalizer(lineshape, nil)
	C.Delete_LineShape(lineshape.ptr)
	lineshape.ptr = nil
}

// Class ListBox 

// Represents a list box object.
type ListBox struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewListBox(src *Shape) ( *ListBox, error) {
	listbox := &ListBox{}
	CGoReturnPtr := C.New_ListBox(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		listbox.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(listbox, DeleteListBox)
		return listbox, nil
	} else {
		listbox.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return listbox, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *ListBox) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.ListBox_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets the number of items in the list box.
// Returns:
//   int32  
func (instance *ListBox) GetItemCount()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetItemCount( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the index number of the currently selected item in a list box or combo box.
// Zero-based.
// Returns:
//   int32  
func (instance *ListBox) GetSelectedIndex()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetSelectedIndex( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the index number of the currently selected item in a list box or combo box.
// Zero-based.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetSelectedIndex(value int32)  error {
	CGoReturnPtr := C.ListBox_SetSelectedIndex( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Sets whether the item is selected
// Parameters:
//   itemIndex - int32 
//   isSelected - bool 
// Returns:
//   void  
func (instance *ListBox) SelectedItem(itemindex int32, isselected bool)  error {
	CGoReturnPtr := C.ListBox_SelectedItem( instance.ptr, C.int(itemindex), C.bool(isselected))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the item is selected.
// Parameters:
//   itemIndex - int32 
// Returns:
//   bool  
func (instance *ListBox) IsSelected(itemindex int32)  (bool,  error)  {
	CGoReturnPtr := C.ListBox_IsSelected( instance.ptr, C.int(itemindex))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the combobox has 3-D shading.
// Returns:
//   bool  
func (instance *ListBox) GetShadow()  (bool,  error)  {
	CGoReturnPtr := C.ListBox_GetShadow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the combobox has 3-D shading.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ListBox) SetShadow(value bool)  error {
	CGoReturnPtr := C.ListBox_SetShadow( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the selection mode of the specified list box.
// Returns:
//   int32  
func (instance *ListBox) GetSelectionType()  (SelectionType,  error)  {
	CGoReturnPtr := C.ListBox_GetSelectionType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToSelectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets or sets the selection mode of the specified list box.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetSelectionType(value SelectionType)  error {
	CGoReturnPtr := C.ListBox_SetSelectionType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the amount by which the control's value is changed
// when the user clicks on the scrollbar's page up or page down region.
// Returns:
//   int32  
func (instance *ListBox) GetPageChange()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetPageChange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the amount by which the control's value is changed
// when the user clicks on the scrollbar's page up or page down region.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetPageChange(value int32)  error {
	CGoReturnPtr := C.ListBox_SetPageChange( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *ListBox) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.ListBox_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ListBox) SetMacroName(value string)  error {
	CGoReturnPtr := C.ListBox_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *ListBox) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.ListBox_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *ListBox) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.ListBox_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *ListBox) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.ListBox_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *ListBox) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.ListBox_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *ListBox) GetName()  (string,  error)  {
	CGoReturnPtr := C.ListBox_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ListBox) SetName(value string)  error {
	CGoReturnPtr := C.ListBox_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *ListBox) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.ListBox_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ListBox) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.ListBox_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *ListBox) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.ListBox_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ListBox) SetTitle(value string)  error {
	CGoReturnPtr := C.ListBox_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *ListBox) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.ListBox_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *ListBox) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.ListBox_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *ListBox) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.ListBox_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *ListBox) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.ListBox_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *ListBox) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.ListBox_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *ListBox) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.ListBox_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ListBox) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.ListBox_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *ListBox) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.ListBox_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *ListBox) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.ListBox_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *ListBox) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.ListBox_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ListBox) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.ListBox_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *ListBox) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.ListBox_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ListBox) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.ListBox_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *ListBox) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.ListBox_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *ListBox) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.ListBox_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *ListBox) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.ListBox_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ListBox) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.ListBox_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *ListBox) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.ListBox_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *ListBox) RemoveHyperlink()  error {
	CGoReturnPtr := C.ListBox_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *ListBox) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.ListBox_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *ListBox) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.ListBox_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *ListBox) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.ListBox_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *ListBox) GetId()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *ListBox) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.ListBox_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *ListBox) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *ListBox) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.ListBox_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *ListBox) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.ListBox_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *ListBox) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.ListBox_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *ListBox) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.ListBox_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *ListBox) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.ListBox_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *ListBox) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.ListBox_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ListBox) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.ListBox_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *ListBox) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.ListBox_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ListBox) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.ListBox_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *ListBox) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.ListBox_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *ListBox) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.ListBox_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.ListBox_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *ListBox) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.ListBox_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.ListBox_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *ListBox) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.ListBox_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.ListBox_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *ListBox) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.ListBox_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *ListBox) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.ListBox_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *ListBox) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.ListBox_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *ListBox) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.ListBox_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *ListBox) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.ListBox_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *ListBox) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.ListBox_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *ListBox) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.ListBox_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *ListBox) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.ListBox_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *ListBox) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetRight(value int32)  error {
	CGoReturnPtr := C.ListBox_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *ListBox) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetBottom(value int32)  error {
	CGoReturnPtr := C.ListBox_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *ListBox) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetWidth(value int32)  error {
	CGoReturnPtr := C.ListBox_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *ListBox) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.ListBox_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ListBox) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.ListBox_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *ListBox) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.ListBox_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ListBox) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.ListBox_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *ListBox) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.ListBox_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ListBox) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.ListBox_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *ListBox) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetHeight(value int32)  error {
	CGoReturnPtr := C.ListBox_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *ListBox) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.ListBox_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ListBox) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.ListBox_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *ListBox) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.ListBox_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ListBox) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.ListBox_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *ListBox) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.ListBox_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ListBox) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.ListBox_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *ListBox) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetLeft(value int32)  error {
	CGoReturnPtr := C.ListBox_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *ListBox) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.ListBox_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ListBox) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.ListBox_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *ListBox) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.ListBox_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ListBox) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.ListBox_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *ListBox) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetTop(value int32)  error {
	CGoReturnPtr := C.ListBox_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *ListBox) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.ListBox_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ListBox) SetTopInch(value float64)  error {
	CGoReturnPtr := C.ListBox_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *ListBox) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.ListBox_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ListBox) SetTopCM(value float64)  error {
	CGoReturnPtr := C.ListBox_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *ListBox) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.ListBox_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *ListBox) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.ListBox_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *ListBox) GetX()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetX(value int32)  error {
	CGoReturnPtr := C.ListBox_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *ListBox) GetY()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetY(value int32)  error {
	CGoReturnPtr := C.ListBox_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *ListBox) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.ListBox_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *ListBox) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.ListBox_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *ListBox) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.ListBox_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *ListBox) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.ListBox_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *ListBox) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.ListBox_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *ListBox) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.ListBox_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *ListBox) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.ListBox_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *ListBox) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.ListBox_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *ListBox) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.ListBox_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ListBox) SetHasLine(value bool)  error {
	CGoReturnPtr := C.ListBox_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *ListBox) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.ListBox_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ListBox) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.ListBox_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *ListBox) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.ListBox_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ListBox) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.ListBox_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *ListBox) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.ListBox_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ListBox) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.ListBox_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *ListBox) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.ListBox_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *ListBox) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.ListBox_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *ListBox) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.ListBox_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ListBox) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.ListBox_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *ListBox) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.ListBox_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ListBox) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.ListBox_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *ListBox) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.ListBox_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ListBox) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.ListBox_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *ListBox) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.ListBox_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *ListBox) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.ListBox_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *ListBox) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.ListBox_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *ListBox) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.ListBox_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *ListBox) UpdateSelectedValue()  error {
	CGoReturnPtr := C.ListBox_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *ListBox) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.ListBox_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.ListBox_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *ListBox) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.ListBox_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *ListBox) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.ListBox_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *ListBox) SetFont(value *Font)  error {
	CGoReturnPtr := C.ListBox_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *ListBox) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.ListBox_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *ListBox) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.ListBox_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *ListBox) GetText()  (string,  error)  {
	CGoReturnPtr := C.ListBox_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ListBox) SetText(value string)  error {
	CGoReturnPtr := C.ListBox_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *ListBox) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.ListBox_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *ListBox) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.ListBox_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ListBox) SetHtmlText(value string)  error {
	CGoReturnPtr := C.ListBox_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *ListBox) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.ListBox_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *ListBox) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.ListBox_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *ListBox) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.ListBox_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.ListBox_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *ListBox) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.ListBox_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.ListBox_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *ListBox) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.ListBox_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ListBox) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.ListBox_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *ListBox) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.ListBox_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.ListBox_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *ListBox) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.ListBox_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.ListBox_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *ListBox) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.ListBox_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.ListBox_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *ListBox) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.ListBox_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ListBox) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.ListBox_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *ListBox) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.ListBox_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *ListBox) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.ListBox_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *ListBox) RemoveActiveXControl()  error {
	CGoReturnPtr := C.ListBox_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *ListBox) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.ListBox_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *ListBox) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.ListBox_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *ListBox) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.ListBox_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *ListBox) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.ListBox_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *ListBox) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.ListBox_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ListBox) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.ListBox_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *ListBox) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.ListBox_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *ListBox) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.ListBox_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteListBox(listbox *ListBox){
	runtime.SetFinalizer(listbox, nil)
	C.Delete_ListBox(listbox.ptr)
	listbox.ptr = nil
}

// Class MsoFillFormat 

// Represents fill formatting for a shape.
type MsoFillFormat struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *MsoFillFormat) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.MsoFillFormat_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the fill fore color.
// Returns:
//   Color  
func (instance *MsoFillFormat) GetForeColor()  (*Color,  error)  {
	CGoReturnPtr := C.MsoFillFormat_GetForeColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Color{}
	result.ptr = CGoReturnPtr.return_value 

	return result, nil 
}
// Gets and sets the fill fore color.
// Parameters:
//   value - Color 
// Returns:
//   void  
func (instance *MsoFillFormat) SetForeColor(value *Color)  error {
	CGoReturnPtr := C.MsoFillFormat_SetForeColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the degree of transparency of the specified fill as a value from 0.0 (opaque) through 1.0 (clear).
// Returns:
//   float64  
func (instance *MsoFillFormat) GetTransparency()  (float64,  error)  {
	CGoReturnPtr := C.MsoFillFormat_GetTransparency( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the degree of transparency of the specified fill as a value from 0.0 (opaque) through 1.0 (clear).
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *MsoFillFormat) SetTransparency(value float64)  error {
	CGoReturnPtr := C.MsoFillFormat_SetTransparency( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the file back color.
// Returns:
//   Color  
func (instance *MsoFillFormat) GetBackColor()  (*Color,  error)  {
	CGoReturnPtr := C.MsoFillFormat_GetBackColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Color{}
	result.ptr = CGoReturnPtr.return_value 

	return result, nil 
}
// Gets and sets the file back color.
// Parameters:
//   value - Color 
// Returns:
//   void  
func (instance *MsoFillFormat) SetBackColor(value *Color)  error {
	CGoReturnPtr := C.MsoFillFormat_SetBackColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Sets the specified fill to a one-color gradient.
// Parameters:
//   color - Color 
//   degree - float64 
//   style - int32 
//   variant - int32 
// Returns:
//   void  
func (instance *MsoFillFormat) SetOneColorGradient(color *Color, degree float64, style GradientStyleType, variant int32)  error {
	CGoReturnPtr := C.MsoFillFormat_SetOneColorGradient( instance.ptr, color.ptr, C.double(degree), C.int( int32(style)), C.int(variant))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the texture fill type.
// Returns:
//   int32  
func (instance *MsoFillFormat) GetTexture()  (TextureType,  error)  {
	CGoReturnPtr := C.MsoFillFormat_GetTexture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextureType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Indicates whether there is fill.
// Returns:
//   bool  
func (instance *MsoFillFormat) IsVisible()  (bool,  error)  {
	CGoReturnPtr := C.MsoFillFormat_IsVisible( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether there is fill.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *MsoFillFormat) SetIsVisible(value bool)  error {
	CGoReturnPtr := C.MsoFillFormat_SetIsVisible( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeleteMsoFillFormat(msofillformat *MsoFillFormat){
	runtime.SetFinalizer(msofillformat, nil)
	C.Delete_MsoFillFormat(msofillformat.ptr)
	msofillformat.ptr = nil
}

// Class MsoFillFormatHelper 

// Represents fill formatting for a shape.
type MsoFillFormatHelper struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *MsoFillFormatHelper) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.MsoFillFormatHelper_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the fill fore color.
// Returns:
//   Color  
func (instance *MsoFillFormatHelper) GetForeColor()  (*Color,  error)  {
	CGoReturnPtr := C.MsoFillFormatHelper_GetForeColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Color{}
	result.ptr = CGoReturnPtr.return_value 

	return result, nil 
}
// Gets and sets the fill fore color.
// Parameters:
//   value - Color 
// Returns:
//   void  
func (instance *MsoFillFormatHelper) SetForeColor(value *Color)  error {
	CGoReturnPtr := C.MsoFillFormatHelper_SetForeColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the degree of fore color of the specified fill as a value from 0.0 (opaque) through 1.0 (clear).
// Returns:
//   float64  
func (instance *MsoFillFormatHelper) GetForeColorTransparency()  (float64,  error)  {
	CGoReturnPtr := C.MsoFillFormatHelper_GetForeColorTransparency( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the degree of fore color of the specified fill as a value from 0.0 (opaque) through 1.0 (clear).
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *MsoFillFormatHelper) SetForeColorTransparency(value float64)  error {
	CGoReturnPtr := C.MsoFillFormatHelper_SetForeColorTransparency( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the file back color.
// Returns:
//   Color  
func (instance *MsoFillFormatHelper) GetBackColor()  (*Color,  error)  {
	CGoReturnPtr := C.MsoFillFormatHelper_GetBackColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Color{}
	result.ptr = CGoReturnPtr.return_value 

	return result, nil 
}
// Gets and sets the file back color.
// Parameters:
//   value - Color 
// Returns:
//   void  
func (instance *MsoFillFormatHelper) SetBackColor(value *Color)  error {
	CGoReturnPtr := C.MsoFillFormatHelper_SetBackColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Sets the specified fill to a one-color gradient.
// Parameters:
//   color - Color 
//   degree - float64 
//   style - int32 
//   variant - int32 
// Returns:
//   void  
func (instance *MsoFillFormatHelper) SetOneColorGradient(color *Color, degree float64, style GradientStyleType, variant int32)  error {
	CGoReturnPtr := C.MsoFillFormatHelper_SetOneColorGradient( instance.ptr, color.ptr, C.double(degree), C.int( int32(style)), C.int(variant))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the texture fill type.
// Returns:
//   int32  
func (instance *MsoFillFormatHelper) GetTexture()  (TextureType,  error)  {
	CGoReturnPtr := C.MsoFillFormatHelper_GetTexture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextureType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Indicates whether there is fill.
// Returns:
//   bool  
func (instance *MsoFillFormatHelper) IsVisible()  (bool,  error)  {
	CGoReturnPtr := C.MsoFillFormatHelper_IsVisible( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether there is fill.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *MsoFillFormatHelper) SetIsVisible(value bool)  error {
	CGoReturnPtr := C.MsoFillFormatHelper_SetIsVisible( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeleteMsoFillFormatHelper(msofillformathelper *MsoFillFormatHelper){
	runtime.SetFinalizer(msofillformathelper, nil)
	C.Delete_MsoFillFormatHelper(msofillformathelper.ptr)
	msofillformathelper.ptr = nil
}

// Class MsoFormatPicture 

// Represents the picture format.
type MsoFormatPicture struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *MsoFormatPicture) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.MsoFormatPicture_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Represents the location of the top of the crop rectangle expressed, in unit of inches.
// Returns:
//   float64  
func (instance *MsoFormatPicture) GetTopCropInch()  (float64,  error)  {
	CGoReturnPtr := C.MsoFormatPicture_GetTopCropInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the location of the top of the crop rectangle expressed, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *MsoFormatPicture) SetTopCropInch(value float64)  error {
	CGoReturnPtr := C.MsoFormatPicture_SetTopCropInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the location of the bottom of the crop rectangle expressed, in unit of inches.
// Returns:
//   float64  
func (instance *MsoFormatPicture) GetBottomCropInch()  (float64,  error)  {
	CGoReturnPtr := C.MsoFormatPicture_GetBottomCropInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the location of the bottom of the crop rectangle expressed, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *MsoFormatPicture) SetBottomCropInch(value float64)  error {
	CGoReturnPtr := C.MsoFormatPicture_SetBottomCropInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the location of the left of the crop rectangle expressed, in unit of inches.
// Returns:
//   float64  
func (instance *MsoFormatPicture) GetLeftCropInch()  (float64,  error)  {
	CGoReturnPtr := C.MsoFormatPicture_GetLeftCropInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the location of the left of the crop rectangle expressed, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *MsoFormatPicture) SetLeftCropInch(value float64)  error {
	CGoReturnPtr := C.MsoFormatPicture_SetLeftCropInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the location of the right of the crop rectangle expressed, in unit of inches.
// Returns:
//   float64  
func (instance *MsoFormatPicture) GetRightCropInch()  (float64,  error)  {
	CGoReturnPtr := C.MsoFormatPicture_GetRightCropInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the location of the right of the crop rectangle expressed, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *MsoFormatPicture) SetRightCropInch(value float64)  error {
	CGoReturnPtr := C.MsoFormatPicture_SetRightCropInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the location of the top of the crop rectangle expressed, expressed as a ratio of the image's height.
// Returns:
//   float64  
func (instance *MsoFormatPicture) GetTopCrop()  (float64,  error)  {
	CGoReturnPtr := C.MsoFormatPicture_GetTopCrop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the location of the top of the crop rectangle expressed, expressed as a ratio of the image's height.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *MsoFormatPicture) SetTopCrop(value float64)  error {
	CGoReturnPtr := C.MsoFormatPicture_SetTopCrop( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the location of the bottom of the crop rectangle expressed, expressed as a ratio of the image's height.
// Returns:
//   float64  
func (instance *MsoFormatPicture) GetBottomCrop()  (float64,  error)  {
	CGoReturnPtr := C.MsoFormatPicture_GetBottomCrop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the location of the bottom of the crop rectangle expressed, expressed as a ratio of the image's height.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *MsoFormatPicture) SetBottomCrop(value float64)  error {
	CGoReturnPtr := C.MsoFormatPicture_SetBottomCrop( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the location of the left of the crop rectangle expressed, expressed as a ratio of the image's width.
// Returns:
//   float64  
func (instance *MsoFormatPicture) GetLeftCrop()  (float64,  error)  {
	CGoReturnPtr := C.MsoFormatPicture_GetLeftCrop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the location of the left of the crop rectangle expressed, expressed as a ratio of the image's width.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *MsoFormatPicture) SetLeftCrop(value float64)  error {
	CGoReturnPtr := C.MsoFormatPicture_SetLeftCrop( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the location of the right of the crop rectangle expressed, expressed as a ratio of the image's width.
// Returns:
//   float64  
func (instance *MsoFormatPicture) GetRightCrop()  (float64,  error)  {
	CGoReturnPtr := C.MsoFormatPicture_GetRightCrop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the location of the right of the crop rectangle expressed, expressed as a ratio of the image's width.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *MsoFormatPicture) SetRightCrop(value float64)  error {
	CGoReturnPtr := C.MsoFormatPicture_SetRightCrop( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
// Returns:
//   float64  
func (instance *MsoFormatPicture) GetTransparency()  (float64,  error)  {
	CGoReturnPtr := C.MsoFormatPicture_GetTransparency( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *MsoFormatPicture) SetTransparency(value float64)  error {
	CGoReturnPtr := C.MsoFormatPicture_SetTransparency( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the transparent color of the picture.
// Returns:
//   CellsColor  
func (instance *MsoFormatPicture) GetTransparentColor()  (*CellsColor,  error)  {
	CGoReturnPtr := C.MsoFormatPicture_GetTransparentColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &CellsColor{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteCellsColor) 

	return result, nil 
}
// Gets and sets the transparent color of the picture.
// Parameters:
//   value - CellsColor 
// Returns:
//   void  
func (instance *MsoFormatPicture) SetTransparentColor(value *CellsColor)  error {
	CGoReturnPtr := C.MsoFormatPicture_SetTransparentColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the contrast modification for the picture.in unit of percentage.
// Returns:
//   float64  
func (instance *MsoFormatPicture) GetContrast()  (float64,  error)  {
	CGoReturnPtr := C.MsoFormatPicture_GetContrast( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the contrast modification for the picture.in unit of percentage.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *MsoFormatPicture) SetContrast(value float64)  error {
	CGoReturnPtr := C.MsoFormatPicture_SetContrast( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the brightness modification for the picture in unit of percentage.
// Returns:
//   float64  
func (instance *MsoFormatPicture) GetBrightness()  (float64,  error)  {
	CGoReturnPtr := C.MsoFormatPicture_GetBrightness( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the brightness modification for the picture in unit of percentage.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *MsoFormatPicture) SetBrightness(value float64)  error {
	CGoReturnPtr := C.MsoFormatPicture_SetBrightness( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents gamma of the picture.
// Returns:
//   float64  
func (instance *MsoFormatPicture) GetGamma()  (float64,  error)  {
	CGoReturnPtr := C.MsoFormatPicture_GetGamma( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents gamma of the picture.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *MsoFormatPicture) SetGamma(value float64)  error {
	CGoReturnPtr := C.MsoFormatPicture_SetGamma( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether this picture should display in two-color black and white.
// Returns:
//   bool  
func (instance *MsoFormatPicture) IsBiLevel()  (bool,  error)  {
	CGoReturnPtr := C.MsoFormatPicture_IsBiLevel( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this picture should display in two-color black and white.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *MsoFormatPicture) SetIsBiLevel(value bool)  error {
	CGoReturnPtr := C.MsoFormatPicture_SetIsBiLevel( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether this picture should display in grayscale.
// Returns:
//   bool  
func (instance *MsoFormatPicture) IsGray()  (bool,  error)  {
	CGoReturnPtr := C.MsoFormatPicture_IsGray( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this picture should display in grayscale.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *MsoFormatPicture) SetIsGray(value bool)  error {
	CGoReturnPtr := C.MsoFormatPicture_SetIsGray( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hash code.
// Returns:
//   int32  
func (instance *MsoFormatPicture) GetHashCode()  (int32,  error)  {
	CGoReturnPtr := C.MsoFormatPicture_GetHashCode( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *MsoFormatPicture) Equals(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.MsoFormatPicture_Equals( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteMsoFormatPicture(msoformatpicture *MsoFormatPicture){
	runtime.SetFinalizer(msoformatpicture, nil)
	C.Delete_MsoFormatPicture(msoformatpicture.ptr)
	msoformatpicture.ptr = nil
}

// Class MsoLineFormat 

// Represents line and arrowhead formatting.
type MsoLineFormat struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *MsoLineFormat) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.MsoLineFormat_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *MsoLineFormat) IsVisible()  (bool,  error)  {
	CGoReturnPtr := C.MsoLineFormat_IsVisible( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *MsoLineFormat) SetIsVisible(value bool)  error {
	CGoReturnPtr := C.MsoLineFormat_SetIsVisible( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Style object that represents the style of the specified range.
// Returns:
//   int32  
func (instance *MsoLineFormat) GetStyle()  (MsoLineStyle,  error)  {
	CGoReturnPtr := C.MsoLineFormat_GetStyle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoLineStyle(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Returns a Style object that represents the style of the specified range.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *MsoLineFormat) SetStyle(value MsoLineStyle)  error {
	CGoReturnPtr := C.MsoLineFormat_SetStyle( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the border line fore color.
// Returns:
//   Color  
func (instance *MsoLineFormat) GetForeColor()  (*Color,  error)  {
	CGoReturnPtr := C.MsoLineFormat_GetForeColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Color{}
	result.ptr = CGoReturnPtr.return_value 

	return result, nil 
}
// Gets and sets the border line fore color.
// Parameters:
//   value - Color 
// Returns:
//   void  
func (instance *MsoLineFormat) SetForeColor(value *Color)  error {
	CGoReturnPtr := C.MsoLineFormat_SetForeColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the border line back color.
// Returns:
//   Color  
func (instance *MsoLineFormat) GetBackColor()  (*Color,  error)  {
	CGoReturnPtr := C.MsoLineFormat_GetBackColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Color{}
	result.ptr = CGoReturnPtr.return_value 

	return result, nil 
}
// Gets and sets the border line back color.
// Parameters:
//   value - Color 
// Returns:
//   void  
func (instance *MsoLineFormat) SetBackColor(value *Color)  error {
	CGoReturnPtr := C.MsoLineFormat_SetBackColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the dash style for the specified line.
// Returns:
//   int32  
func (instance *MsoLineFormat) GetDashStyle()  (MsoLineDashStyle,  error)  {
	CGoReturnPtr := C.MsoLineFormat_GetDashStyle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoLineDashStyle(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets or sets the dash style for the specified line.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *MsoLineFormat) SetDashStyle(value MsoLineDashStyle)  error {
	CGoReturnPtr := C.MsoLineFormat_SetDashStyle( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the degree of transparency of the specified fill as a value from 0.0 (opaque) through 1.0 (clear).
// Returns:
//   float64  
func (instance *MsoLineFormat) GetTransparency()  (float64,  error)  {
	CGoReturnPtr := C.MsoLineFormat_GetTransparency( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the degree of transparency of the specified fill as a value from 0.0 (opaque) through 1.0 (clear).
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *MsoLineFormat) SetTransparency(value float64)  error {
	CGoReturnPtr := C.MsoLineFormat_SetTransparency( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the weight of the line ,in units of pt.
// Returns:
//   float64  
func (instance *MsoLineFormat) GetWeight()  (float64,  error)  {
	CGoReturnPtr := C.MsoLineFormat_GetWeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the weight of the line ,in units of pt.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *MsoLineFormat) SetWeight(value float64)  error {
	CGoReturnPtr := C.MsoLineFormat_SetWeight( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeleteMsoLineFormat(msolineformat *MsoLineFormat){
	runtime.SetFinalizer(msolineformat, nil)
	C.Delete_MsoLineFormat(msolineformat.ptr)
	msolineformat.ptr = nil
}

// Class MsoLineFormatHelper 

// Represents line and arrowhead formatting.
type MsoLineFormatHelper struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *MsoLineFormatHelper) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.MsoLineFormatHelper_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *MsoLineFormatHelper) IsVisible()  (bool,  error)  {
	CGoReturnPtr := C.MsoLineFormatHelper_IsVisible( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *MsoLineFormatHelper) SetIsVisible(value bool)  error {
	CGoReturnPtr := C.MsoLineFormatHelper_SetIsVisible( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Style object that represents the style of the specified range.
// Returns:
//   int32  
func (instance *MsoLineFormatHelper) GetStyle()  (MsoLineStyle,  error)  {
	CGoReturnPtr := C.MsoLineFormatHelper_GetStyle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoLineStyle(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Returns a Style object that represents the style of the specified range.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *MsoLineFormatHelper) SetStyle(value MsoLineStyle)  error {
	CGoReturnPtr := C.MsoLineFormatHelper_SetStyle( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the border line fore color.
// Returns:
//   Color  
func (instance *MsoLineFormatHelper) GetForeColor()  (*Color,  error)  {
	CGoReturnPtr := C.MsoLineFormatHelper_GetForeColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Color{}
	result.ptr = CGoReturnPtr.return_value 

	return result, nil 
}
// Gets and sets the border line fore color.
// Parameters:
//   value - Color 
// Returns:
//   void  
func (instance *MsoLineFormatHelper) SetForeColor(value *Color)  error {
	CGoReturnPtr := C.MsoLineFormatHelper_SetForeColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the border line back color.
// Returns:
//   Color  
func (instance *MsoLineFormatHelper) GetBackColor()  (*Color,  error)  {
	CGoReturnPtr := C.MsoLineFormatHelper_GetBackColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Color{}
	result.ptr = CGoReturnPtr.return_value 

	return result, nil 
}
// Gets and sets the border line back color.
// Parameters:
//   value - Color 
// Returns:
//   void  
func (instance *MsoLineFormatHelper) SetBackColor(value *Color)  error {
	CGoReturnPtr := C.MsoLineFormatHelper_SetBackColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the dash style for the specified line.
// Returns:
//   int32  
func (instance *MsoLineFormatHelper) GetDashStyle()  (MsoLineDashStyle,  error)  {
	CGoReturnPtr := C.MsoLineFormatHelper_GetDashStyle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoLineDashStyle(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets or sets the dash style for the specified line.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *MsoLineFormatHelper) SetDashStyle(value MsoLineDashStyle)  error {
	CGoReturnPtr := C.MsoLineFormatHelper_SetDashStyle( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the degree of transparency of the specified fill as a value from 0.0 (opaque) through 1.0 (clear).
// Returns:
//   float64  
func (instance *MsoLineFormatHelper) GetTransparency()  (float64,  error)  {
	CGoReturnPtr := C.MsoLineFormatHelper_GetTransparency( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the degree of transparency of the specified fill as a value from 0.0 (opaque) through 1.0 (clear).
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *MsoLineFormatHelper) SetTransparency(value float64)  error {
	CGoReturnPtr := C.MsoLineFormatHelper_SetTransparency( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the weight of the line ,in units of pt.
// Returns:
//   float64  
func (instance *MsoLineFormatHelper) GetWeight()  (float64,  error)  {
	CGoReturnPtr := C.MsoLineFormatHelper_GetWeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the weight of the line ,in units of pt.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *MsoLineFormatHelper) SetWeight(value float64)  error {
	CGoReturnPtr := C.MsoLineFormatHelper_SetWeight( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeleteMsoLineFormatHelper(msolineformathelper *MsoLineFormatHelper){
	runtime.SetFinalizer(msolineformathelper, nil)
	C.Delete_MsoLineFormatHelper(msolineformathelper.ptr)
	msolineformathelper.ptr = nil
}

// Class MsoTextFrame 

// Represents the text frame in a Shape object.
type MsoTextFrame struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *MsoTextFrame) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.MsoTextFrame_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates if size of shape is adjusted automatically according to its content.
// Returns:
//   bool  
func (instance *MsoTextFrame) GetAutoSize()  (bool,  error)  {
	CGoReturnPtr := C.MsoTextFrame_GetAutoSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates if size of shape is adjusted automatically according to its content.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *MsoTextFrame) SetAutoSize(value bool)  error {
	CGoReturnPtr := C.MsoTextFrame_SetAutoSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the margin is auto calculated.
// Returns:
//   bool  
func (instance *MsoTextFrame) IsAutoMargin()  (bool,  error)  {
	CGoReturnPtr := C.MsoTextFrame_IsAutoMargin( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the margin is auto calculated.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *MsoTextFrame) SetIsAutoMargin(value bool)  error {
	CGoReturnPtr := C.MsoTextFrame_SetIsAutoMargin( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether rotating text with shape.
// Returns:
//   bool  
func (instance *MsoTextFrame) GetRotateTextWithShape()  (bool,  error)  {
	CGoReturnPtr := C.MsoTextFrame_GetRotateTextWithShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether rotating text with shape.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *MsoTextFrame) SetRotateTextWithShape(value bool)  error {
	CGoReturnPtr := C.MsoTextFrame_SetRotateTextWithShape( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the left margin in unit of Points
// Returns:
//   float64  
func (instance *MsoTextFrame) GetLeftMarginPt()  (float64,  error)  {
	CGoReturnPtr := C.MsoTextFrame_GetLeftMarginPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the left margin in unit of Points
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *MsoTextFrame) SetLeftMarginPt(value float64)  error {
	CGoReturnPtr := C.MsoTextFrame_SetLeftMarginPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the right margin in unit of Points
// Returns:
//   float64  
func (instance *MsoTextFrame) GetRightMarginPt()  (float64,  error)  {
	CGoReturnPtr := C.MsoTextFrame_GetRightMarginPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the right margin in unit of Points
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *MsoTextFrame) SetRightMarginPt(value float64)  error {
	CGoReturnPtr := C.MsoTextFrame_SetRightMarginPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the top margin in unit of Points
// Returns:
//   float64  
func (instance *MsoTextFrame) GetTopMarginPt()  (float64,  error)  {
	CGoReturnPtr := C.MsoTextFrame_GetTopMarginPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the top margin in unit of Points
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *MsoTextFrame) SetTopMarginPt(value float64)  error {
	CGoReturnPtr := C.MsoTextFrame_SetTopMarginPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the bottom margin in unit of Points
// Returns:
//   float64  
func (instance *MsoTextFrame) GetBottomMarginPt()  (float64,  error)  {
	CGoReturnPtr := C.MsoTextFrame_GetBottomMarginPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the bottom margin in unit of Points
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *MsoTextFrame) SetBottomMarginPt(value float64)  error {
	CGoReturnPtr := C.MsoTextFrame_SetBottomMarginPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeleteMsoTextFrame(msotextframe *MsoTextFrame){
	runtime.SetFinalizer(msotextframe, nil)
	C.Delete_MsoTextFrame(msotextframe.ptr)
	msotextframe.ptr = nil
}

// Class NoneFill 

// Represents no fill.
type NoneFill struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *NoneFill) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.NoneFill_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteNoneFill(nonefill *NoneFill){
	runtime.SetFinalizer(nonefill, nil)
	C.Delete_NoneFill(nonefill.ptr)
	nonefill.ptr = nil
}

// Class OleObject 

// Represents an OleObject in a worksheet.
type OleObject struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewOleObject(src *Shape) ( *OleObject, error) {
	oleobject := &OleObject{}
	CGoReturnPtr := C.New_OleObject(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		oleobject.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(oleobject, DeleteOleObject)
		return oleobject, nil
	} else {
		oleobject.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return oleobject, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *OleObject) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True indicates that the size of the ole object will be auto changed as the size of snapshot of the embedded content
// when the ole object is activated.
// Returns:
//   bool  
func (instance *OleObject) IsAutoSize()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_IsAutoSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True indicates that the size of the ole object will be auto changed as the size of snapshot of the embedded content
// when the ole object is activated.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *OleObject) SetIsAutoSize(value bool)  error {
	CGoReturnPtr := C.OleObject_SetIsAutoSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns true if the OleObject links to the file.
// Returns:
//   bool  
func (instance *OleObject) IsLink()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_IsLink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns true if the OleObject links to the file.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *OleObject) Set_IsLink(value bool)  error {
	CGoReturnPtr := C.OleObject_Set_IsLink( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True if the specified object is displayed as an icon
// and the image will not be auto changed.
// Returns:
//   bool  
func (instance *OleObject) GetDisplayAsIcon()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_GetDisplayAsIcon( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True if the specified object is displayed as an icon
// and the image will not be auto changed.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *OleObject) SetDisplayAsIcon(value bool)  error {
	CGoReturnPtr := C.OleObject_SetDisplayAsIcon( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the path and name of the source file for the linked image.
// Returns:
//   string  
func (instance *OleObject) GetImageSourceFullName()  (string,  error)  {
	CGoReturnPtr := C.OleObject_GetImageSourceFullName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the path and name of the source file for the linked image.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *OleObject) SetImageSourceFullName(value string)  error {
	CGoReturnPtr := C.OleObject_SetImageSourceFullName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Sets the ole native source full file name with path.
// Parameters:
//   sourceFullName - string 
// Returns:
//   void  
func (instance *OleObject) SetNativeSourceFullName(sourcefullname string)  error {
	CGoReturnPtr := C.OleObject_SetNativeSourceFullName( instance.ptr, C.CString(sourcefullname))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the ProgID of the OLE object.
// Returns:
//   string  
func (instance *OleObject) GetProgID()  (string,  error)  {
	CGoReturnPtr := C.OleObject_GetProgID( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the ProgID of the OLE object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *OleObject) SetProgID(value string)  error {
	CGoReturnPtr := C.OleObject_SetProgID( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the file type of the embedded ole object data
// Returns:
//   int32  
func (instance *OleObject) GetFileFormatType()  (FileFormatType,  error)  {
	CGoReturnPtr := C.OleObject_GetFileFormatType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToFileFormatType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the file type of the embedded ole object data
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetFileFormatType(value FileFormatType)  error {
	CGoReturnPtr := C.OleObject_SetFileFormatType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the source full name of the source file for the linked OLE object.
// Returns:
//   string  
func (instance *OleObject) GetObjectSourceFullName()  (string,  error)  {
	CGoReturnPtr := C.OleObject_GetObjectSourceFullName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the source full name of the source file for the linked OLE object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *OleObject) SetObjectSourceFullName(value string)  error {
	CGoReturnPtr := C.OleObject_SetObjectSourceFullName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the display label of the linked ole object.
// Returns:
//   string  
func (instance *OleObject) GetLabel()  (string,  error)  {
	CGoReturnPtr := C.OleObject_GetLabel( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the display label of the linked ole object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *OleObject) SetLabel(value string)  error {
	CGoReturnPtr := C.OleObject_SetLabel( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies whether the link to the OleObject is automatically updated or not.
// Returns:
//   bool  
func (instance *OleObject) GetAutoUpdate()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_GetAutoUpdate( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Specifies whether the link to the OleObject is automatically updated or not.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *OleObject) SetAutoUpdate(value bool)  error {
	CGoReturnPtr := C.OleObject_SetAutoUpdate( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies whether the host application for the embedded object shall be called to load
// the object data automatically when the parent workbook is opened.
// Returns:
//   bool  
func (instance *OleObject) GetAutoLoad()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_GetAutoLoad( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Specifies whether the host application for the embedded object shall be called to load
// the object data automatically when the parent workbook is opened.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *OleObject) SetAutoLoad(value bool)  error {
	CGoReturnPtr := C.OleObject_SetAutoLoad( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the image format of the ole object.
// Returns:
//   int32  
func (instance *OleObject) GetImageType()  (ImageType,  error)  {
	CGoReturnPtr := C.OleObject_GetImageType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToImageType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *OleObject) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.OleObject_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *OleObject) SetMacroName(value string)  error {
	CGoReturnPtr := C.OleObject_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *OleObject) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *OleObject) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *OleObject) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.OleObject_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *OleObject) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.OleObject_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *OleObject) GetName()  (string,  error)  {
	CGoReturnPtr := C.OleObject_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *OleObject) SetName(value string)  error {
	CGoReturnPtr := C.OleObject_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *OleObject) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.OleObject_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *OleObject) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.OleObject_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *OleObject) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.OleObject_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *OleObject) SetTitle(value string)  error {
	CGoReturnPtr := C.OleObject_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *OleObject) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.OleObject_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *OleObject) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.OleObject_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *OleObject) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.OleObject_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *OleObject) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.OleObject_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *OleObject) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.OleObject_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *OleObject) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.OleObject_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *OleObject) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.OleObject_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *OleObject) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.OleObject_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *OleObject) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.OleObject_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *OleObject) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *OleObject) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.OleObject_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *OleObject) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *OleObject) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.OleObject_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *OleObject) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.OleObject_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *OleObject) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.OleObject_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *OleObject) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.OleObject_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *OleObject) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.OleObject_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *OleObject) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.OleObject_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *OleObject) RemoveHyperlink()  error {
	CGoReturnPtr := C.OleObject_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *OleObject) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.OleObject_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *OleObject) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.OleObject_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *OleObject) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.OleObject_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *OleObject) GetId()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *OleObject) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.OleObject_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *OleObject) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *OleObject) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.OleObject_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *OleObject) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *OleObject) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *OleObject) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *OleObject) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.OleObject_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *OleObject) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *OleObject) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.OleObject_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *OleObject) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *OleObject) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.OleObject_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *OleObject) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.OleObject_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *OleObject) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.OleObject_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.OleObject_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *OleObject) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.OleObject_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.OleObject_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *OleObject) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.OleObject_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.OleObject_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *OleObject) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.OleObject_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *OleObject) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.OleObject_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *OleObject) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.OleObject_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *OleObject) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.OleObject_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *OleObject) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.OleObject_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *OleObject) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.OleObject_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *OleObject) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.OleObject_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *OleObject) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.OleObject_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *OleObject) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetRight(value int32)  error {
	CGoReturnPtr := C.OleObject_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *OleObject) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetBottom(value int32)  error {
	CGoReturnPtr := C.OleObject_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *OleObject) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetWidth(value int32)  error {
	CGoReturnPtr := C.OleObject_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *OleObject) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.OleObject_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *OleObject) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.OleObject_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *OleObject) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.OleObject_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *OleObject) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.OleObject_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *OleObject) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.OleObject_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *OleObject) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.OleObject_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *OleObject) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetHeight(value int32)  error {
	CGoReturnPtr := C.OleObject_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *OleObject) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.OleObject_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *OleObject) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.OleObject_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *OleObject) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.OleObject_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *OleObject) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.OleObject_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *OleObject) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.OleObject_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *OleObject) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.OleObject_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *OleObject) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetLeft(value int32)  error {
	CGoReturnPtr := C.OleObject_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *OleObject) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.OleObject_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *OleObject) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.OleObject_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *OleObject) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.OleObject_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *OleObject) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.OleObject_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *OleObject) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetTop(value int32)  error {
	CGoReturnPtr := C.OleObject_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *OleObject) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.OleObject_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *OleObject) SetTopInch(value float64)  error {
	CGoReturnPtr := C.OleObject_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *OleObject) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.OleObject_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *OleObject) SetTopCM(value float64)  error {
	CGoReturnPtr := C.OleObject_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *OleObject) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.OleObject_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *OleObject) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.OleObject_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *OleObject) GetX()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetX(value int32)  error {
	CGoReturnPtr := C.OleObject_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *OleObject) GetY()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetY(value int32)  error {
	CGoReturnPtr := C.OleObject_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *OleObject) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.OleObject_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *OleObject) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.OleObject_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *OleObject) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.OleObject_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *OleObject) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.OleObject_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *OleObject) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.OleObject_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *OleObject) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.OleObject_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *OleObject) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.OleObject_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *OleObject) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.OleObject_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *OleObject) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *OleObject) SetHasLine(value bool)  error {
	CGoReturnPtr := C.OleObject_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *OleObject) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *OleObject) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.OleObject_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *OleObject) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *OleObject) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.OleObject_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *OleObject) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *OleObject) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.OleObject_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *OleObject) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.OleObject_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *OleObject) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.OleObject_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *OleObject) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *OleObject) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.OleObject_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *OleObject) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.OleObject_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *OleObject) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.OleObject_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *OleObject) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.OleObject_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *OleObject) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.OleObject_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *OleObject) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.OleObject_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *OleObject) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.OleObject_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *OleObject) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.OleObject_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *OleObject) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.OleObject_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *OleObject) UpdateSelectedValue()  error {
	CGoReturnPtr := C.OleObject_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *OleObject) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.OleObject_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.OleObject_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *OleObject) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.OleObject_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *OleObject) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.OleObject_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *OleObject) SetFont(value *Font)  error {
	CGoReturnPtr := C.OleObject_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *OleObject) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.OleObject_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *OleObject) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.OleObject_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *OleObject) GetText()  (string,  error)  {
	CGoReturnPtr := C.OleObject_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *OleObject) SetText(value string)  error {
	CGoReturnPtr := C.OleObject_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *OleObject) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *OleObject) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.OleObject_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *OleObject) SetHtmlText(value string)  error {
	CGoReturnPtr := C.OleObject_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *OleObject) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.OleObject_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *OleObject) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.OleObject_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *OleObject) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.OleObject_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.OleObject_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *OleObject) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.OleObject_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.OleObject_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *OleObject) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *OleObject) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.OleObject_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *OleObject) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.OleObject_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.OleObject_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *OleObject) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.OleObject_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.OleObject_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *OleObject) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.OleObject_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.OleObject_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *OleObject) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.OleObject_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *OleObject) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.OleObject_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *OleObject) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.OleObject_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *OleObject) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.OleObject_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *OleObject) RemoveActiveXControl()  error {
	CGoReturnPtr := C.OleObject_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *OleObject) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.OleObject_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *OleObject) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.OleObject_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *OleObject) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.OleObject_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *OleObject) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.OleObject_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *OleObject) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.OleObject_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *OleObject) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.OleObject_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *OleObject) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.OleObject_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *OleObject) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.OleObject_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteOleObject(oleobject *OleObject){
	runtime.SetFinalizer(oleobject, nil)
	C.Delete_OleObject(oleobject.ptr)
	oleobject.ptr = nil
}

// Class OleObjectCollection 

// Represents embedded OLE objects.
type OleObjectCollection struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *OleObjectCollection) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.OleObjectCollection_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets the <see cref="OleObject"/> element at the specified index.
// Parameters:
//   index - int32 
// Returns:
//   OleObject  
func (instance *OleObjectCollection) Get(index int32)  (*OleObject,  error)  {
	CGoReturnPtr := C.OleObjectCollection_Get( instance.ptr, C.int(index))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &OleObject{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteOleObject) 

	return result, nil 
}
// Remove all embedded OLE objects.
// Returns:
//   void  
func (instance *OleObjectCollection) Clear()  error {
	CGoReturnPtr := C.OleObjectCollection_Clear( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Removes the element at the specified index.
// Parameters:
//   index - int32 
// Returns:
//   void  
func (instance *OleObjectCollection) RemoveAt(index int32)  error {
	CGoReturnPtr := C.OleObjectCollection_RemoveAt( instance.ptr, C.int(index))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns:
//   int32  
func (instance *OleObjectCollection) GetCount()  (int32,  error)  {
	CGoReturnPtr := C.OleObjectCollection_GetCount( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}


func DeleteOleObjectCollection(oleobjectcollection *OleObjectCollection){
	runtime.SetFinalizer(oleobjectcollection, nil)
	C.Delete_OleObjectCollection(oleobjectcollection.ptr)
	oleobjectcollection.ptr = nil
}

// Class Oval 

// Represents the oval shape.
type Oval struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewOval(src *Shape) ( *Oval, error) {
	oval := &Oval{}
	CGoReturnPtr := C.New_Oval(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		oval.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(oval, DeleteOval)
		return oval, nil
	} else {
		oval.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return oval, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *Oval) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.Oval_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *Oval) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.Oval_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Oval) SetMacroName(value string)  error {
	CGoReturnPtr := C.Oval_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *Oval) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.Oval_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *Oval) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.Oval_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *Oval) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.Oval_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *Oval) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.Oval_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *Oval) GetName()  (string,  error)  {
	CGoReturnPtr := C.Oval_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Oval) SetName(value string)  error {
	CGoReturnPtr := C.Oval_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *Oval) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.Oval_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Oval) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.Oval_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *Oval) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.Oval_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Oval) SetTitle(value string)  error {
	CGoReturnPtr := C.Oval_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *Oval) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.Oval_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *Oval) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.Oval_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *Oval) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.Oval_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *Oval) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.Oval_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *Oval) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.Oval_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *Oval) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.Oval_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Oval) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.Oval_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *Oval) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.Oval_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *Oval) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.Oval_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *Oval) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.Oval_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Oval) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.Oval_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *Oval) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.Oval_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Oval) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.Oval_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *Oval) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.Oval_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *Oval) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.Oval_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *Oval) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.Oval_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Oval) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.Oval_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *Oval) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.Oval_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *Oval) RemoveHyperlink()  error {
	CGoReturnPtr := C.Oval_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *Oval) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.Oval_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *Oval) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.Oval_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *Oval) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.Oval_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *Oval) GetId()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *Oval) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.Oval_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *Oval) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *Oval) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.Oval_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *Oval) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.Oval_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *Oval) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.Oval_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *Oval) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.Oval_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *Oval) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.Oval_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *Oval) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.Oval_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Oval) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.Oval_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *Oval) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.Oval_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Oval) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.Oval_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *Oval) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.Oval_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *Oval) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.Oval_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.Oval_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *Oval) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.Oval_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.Oval_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *Oval) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.Oval_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.Oval_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *Oval) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.Oval_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *Oval) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.Oval_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *Oval) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.Oval_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *Oval) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.Oval_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *Oval) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.Oval_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *Oval) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.Oval_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *Oval) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.Oval_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *Oval) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.Oval_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *Oval) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetRight(value int32)  error {
	CGoReturnPtr := C.Oval_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *Oval) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetBottom(value int32)  error {
	CGoReturnPtr := C.Oval_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *Oval) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetWidth(value int32)  error {
	CGoReturnPtr := C.Oval_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *Oval) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.Oval_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Oval) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.Oval_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *Oval) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.Oval_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Oval) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.Oval_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *Oval) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.Oval_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Oval) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.Oval_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *Oval) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetHeight(value int32)  error {
	CGoReturnPtr := C.Oval_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *Oval) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.Oval_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Oval) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.Oval_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *Oval) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.Oval_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Oval) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.Oval_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *Oval) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.Oval_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Oval) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.Oval_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *Oval) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetLeft(value int32)  error {
	CGoReturnPtr := C.Oval_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *Oval) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.Oval_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Oval) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.Oval_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *Oval) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.Oval_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Oval) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.Oval_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *Oval) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetTop(value int32)  error {
	CGoReturnPtr := C.Oval_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *Oval) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.Oval_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Oval) SetTopInch(value float64)  error {
	CGoReturnPtr := C.Oval_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *Oval) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.Oval_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Oval) SetTopCM(value float64)  error {
	CGoReturnPtr := C.Oval_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *Oval) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.Oval_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *Oval) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.Oval_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *Oval) GetX()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetX(value int32)  error {
	CGoReturnPtr := C.Oval_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *Oval) GetY()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetY(value int32)  error {
	CGoReturnPtr := C.Oval_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *Oval) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.Oval_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *Oval) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.Oval_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *Oval) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.Oval_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *Oval) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.Oval_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *Oval) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.Oval_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *Oval) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.Oval_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *Oval) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.Oval_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *Oval) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.Oval_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *Oval) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.Oval_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Oval) SetHasLine(value bool)  error {
	CGoReturnPtr := C.Oval_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *Oval) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.Oval_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Oval) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.Oval_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *Oval) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.Oval_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Oval) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.Oval_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *Oval) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.Oval_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Oval) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.Oval_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *Oval) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.Oval_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *Oval) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.Oval_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *Oval) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.Oval_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Oval) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.Oval_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *Oval) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.Oval_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Oval) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.Oval_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *Oval) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.Oval_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Oval) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.Oval_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *Oval) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.Oval_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *Oval) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.Oval_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *Oval) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.Oval_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *Oval) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.Oval_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *Oval) UpdateSelectedValue()  error {
	CGoReturnPtr := C.Oval_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *Oval) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.Oval_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.Oval_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *Oval) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.Oval_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *Oval) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.Oval_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *Oval) SetFont(value *Font)  error {
	CGoReturnPtr := C.Oval_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *Oval) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.Oval_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *Oval) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.Oval_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *Oval) GetText()  (string,  error)  {
	CGoReturnPtr := C.Oval_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Oval) SetText(value string)  error {
	CGoReturnPtr := C.Oval_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *Oval) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.Oval_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *Oval) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.Oval_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Oval) SetHtmlText(value string)  error {
	CGoReturnPtr := C.Oval_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *Oval) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.Oval_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *Oval) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.Oval_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *Oval) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.Oval_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.Oval_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *Oval) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.Oval_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.Oval_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *Oval) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.Oval_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Oval) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.Oval_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *Oval) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.Oval_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.Oval_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *Oval) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.Oval_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.Oval_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *Oval) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.Oval_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.Oval_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *Oval) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.Oval_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Oval) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.Oval_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *Oval) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.Oval_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *Oval) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.Oval_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *Oval) RemoveActiveXControl()  error {
	CGoReturnPtr := C.Oval_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *Oval) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.Oval_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *Oval) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.Oval_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *Oval) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.Oval_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *Oval) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.Oval_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *Oval) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.Oval_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Oval) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.Oval_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *Oval) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.Oval_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *Oval) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.Oval_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteOval(oval *Oval){
	runtime.SetFinalizer(oval, nil)
	C.Delete_Oval(oval.ptr)
	oval.ptr = nil
}

// Class PatternFill 

// Encapsulates the object that represents pattern fill format
type PatternFill struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *PatternFill) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.PatternFill_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets or sets the fill pattern type
// Returns:
//   int32  
func (instance *PatternFill) GetPattern()  (FillPattern,  error)  {
	CGoReturnPtr := C.PatternFill_GetPattern( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToFillPattern(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets or sets the fill pattern type
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *PatternFill) SetPattern(value FillPattern)  error {
	CGoReturnPtr := C.PatternFill_SetPattern( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the background <see cref="Color"/> of the <see cref="Area"/>.
// Returns:
//   Color  
func (instance *PatternFill) GetBackgroundColor()  (*Color,  error)  {
	CGoReturnPtr := C.PatternFill_GetBackgroundColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Color{}
	result.ptr = CGoReturnPtr.return_value 

	return result, nil 
}
// Gets or sets the background <see cref="Color"/> of the <see cref="Area"/>.
// Parameters:
//   value - Color 
// Returns:
//   void  
func (instance *PatternFill) SetBackgroundColor(value *Color)  error {
	CGoReturnPtr := C.PatternFill_SetBackgroundColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the foreground <see cref="CellsColor"/> object.
// Returns:
//   CellsColor  
func (instance *PatternFill) GetBackgroundCellsColor()  (*CellsColor,  error)  {
	CGoReturnPtr := C.PatternFill_GetBackgroundCellsColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &CellsColor{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteCellsColor) 

	return result, nil 
}
// Gets and sets the foreground <see cref="CellsColor"/> object.
// Parameters:
//   value - CellsColor 
// Returns:
//   void  
func (instance *PatternFill) SetBackgroundCellsColor(value *CellsColor)  error {
	CGoReturnPtr := C.PatternFill_SetBackgroundCellsColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the foreground <see cref="Color"/>.
// Returns:
//   Color  
func (instance *PatternFill) GetForegroundColor()  (*Color,  error)  {
	CGoReturnPtr := C.PatternFill_GetForegroundColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Color{}
	result.ptr = CGoReturnPtr.return_value 

	return result, nil 
}
// Gets or sets the foreground <see cref="Color"/>.
// Parameters:
//   value - Color 
// Returns:
//   void  
func (instance *PatternFill) SetForegroundColor(value *Color)  error {
	CGoReturnPtr := C.PatternFill_SetForegroundColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the foreground <see cref="CellsColor"/> object.
// Returns:
//   CellsColor  
func (instance *PatternFill) GetForegroundCellsColor()  (*CellsColor,  error)  {
	CGoReturnPtr := C.PatternFill_GetForegroundCellsColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &CellsColor{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteCellsColor) 

	return result, nil 
}
// Gets and sets the foreground <see cref="CellsColor"/> object.
// Parameters:
//   value - CellsColor 
// Returns:
//   void  
func (instance *PatternFill) SetForegroundCellsColor(value *CellsColor)  error {
	CGoReturnPtr := C.PatternFill_SetForegroundCellsColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the transparency of foreground color.
// Returns:
//   float64  
func (instance *PatternFill) GetForeTransparency()  (float64,  error)  {
	CGoReturnPtr := C.PatternFill_GetForeTransparency( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the transparency of foreground color.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *PatternFill) SetForeTransparency(value float64)  error {
	CGoReturnPtr := C.PatternFill_SetForeTransparency( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the transparency of background color.
// Returns:
//   float64  
func (instance *PatternFill) GetBackTransparency()  (float64,  error)  {
	CGoReturnPtr := C.PatternFill_GetBackTransparency( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the transparency of background color.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *PatternFill) SetBackTransparency(value float64)  error {
	CGoReturnPtr := C.PatternFill_SetBackTransparency( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeletePatternFill(patternfill *PatternFill){
	runtime.SetFinalizer(patternfill, nil)
	C.Delete_PatternFill(patternfill.ptr)
	patternfill.ptr = nil
}

// Class PicFormatOption 

// Represents picture format option
type PicFormatOption struct {
	ptr unsafe.Pointer
}

// Default constructor.
func NewPicFormatOption() ( *PicFormatOption, error) {
	picformatoption := &PicFormatOption{}
	CGoReturnPtr := C.New_PicFormatOption()
	if CGoReturnPtr.error_no == 0 {
		picformatoption.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(picformatoption, DeletePicFormatOption)
		return picformatoption, nil
	} else {
		picformatoption.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return picformatoption, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *PicFormatOption) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.PicFormatOption_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets or sets the picture fill type.
// Returns:
//   int32  
func (instance *PicFormatOption) GetType()  (FillPictureType,  error)  {
	CGoReturnPtr := C.PicFormatOption_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToFillPictureType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets or sets the picture fill type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *PicFormatOption) SetType(value FillPictureType)  error {
	CGoReturnPtr := C.PicFormatOption_SetType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets how many the picture stack and scale with.
// Returns:
//   float64  
func (instance *PicFormatOption) GetScale()  (float64,  error)  {
	CGoReturnPtr := C.PicFormatOption_GetScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets how many the picture stack and scale with.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *PicFormatOption) SetScale(value float64)  error {
	CGoReturnPtr := C.PicFormatOption_SetScale( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the left offset for stretching picture.
// Returns:
//   float64  
func (instance *PicFormatOption) GetLeft()  (float64,  error)  {
	CGoReturnPtr := C.PicFormatOption_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the left offset for stretching picture.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *PicFormatOption) SetLeft(value float64)  error {
	CGoReturnPtr := C.PicFormatOption_SetLeft( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the top offset for stretching picture.
// Returns:
//   float64  
func (instance *PicFormatOption) GetTop()  (float64,  error)  {
	CGoReturnPtr := C.PicFormatOption_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the top offset for stretching picture.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *PicFormatOption) SetTop(value float64)  error {
	CGoReturnPtr := C.PicFormatOption_SetTop( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the bottom offset for stretching picture.
// Returns:
//   float64  
func (instance *PicFormatOption) GetBottom()  (float64,  error)  {
	CGoReturnPtr := C.PicFormatOption_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the bottom offset for stretching picture.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *PicFormatOption) SetBottom(value float64)  error {
	CGoReturnPtr := C.PicFormatOption_SetBottom( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the right offset for stretching picture.
// Returns:
//   float64  
func (instance *PicFormatOption) GetRight()  (float64,  error)  {
	CGoReturnPtr := C.PicFormatOption_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the right offset for stretching picture.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *PicFormatOption) SetRight(value float64)  error {
	CGoReturnPtr := C.PicFormatOption_SetRight( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeletePicFormatOption(picformatoption *PicFormatOption){
	runtime.SetFinalizer(picformatoption, nil)
	C.Delete_PicFormatOption(picformatoption.ptr)
	picformatoption.ptr = nil
}

// Class Picture 

// Encapsulates the object that represents a single picture in a spreadsheet.
type Picture struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewPicture(src *Shape) ( *Picture, error) {
	picture := &Picture{}
	CGoReturnPtr := C.New_Picture(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		picture.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(picture, DeletePicture)
		return picture, nil
	} else {
		picture.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return picture, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *Picture) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.Picture_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Copy the picture.
// Parameters:
//   source - Picture 
//   options - CopyOptions 
// Returns:
//   void  
func (instance *Picture) Copy(source *Picture, options *CopyOptions)  error {
	CGoReturnPtr := C.Picture_Copy( instance.ptr, source.ptr, options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to a specified location.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
// Returns:
//   void  
func (instance *Picture) Move(upperleftrow int32, upperleftcolumn int32)  error {
	CGoReturnPtr := C.Picture_Move( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Place this picture in the cell
// Returns:
//   void  
func (instance *Picture) PlaceInCell()  error {
	CGoReturnPtr := C.Picture_PlaceInCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the original height of the picture.
// Returns:
//   int32  
func (instance *Picture) GetOriginalHeight()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetOriginalHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the original width of the picture.
// Returns:
//   int32  
func (instance *Picture) GetOriginalWidth()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetOriginalWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the <see cref="Color"/> of the border line of a picture.
// Returns:
//   Color  
func (instance *Picture) GetBorderLineColor()  (*Color,  error)  {
	CGoReturnPtr := C.Picture_GetBorderLineColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Color{}
	result.ptr = CGoReturnPtr.return_value 

	return result, nil 
}
// Represents the <see cref="Color"/> of the border line of a picture.
// Parameters:
//   value - Color 
// Returns:
//   void  
func (instance *Picture) SetBorderLineColor(value *Color)  error {
	CGoReturnPtr := C.Picture_SetBorderLineColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the weight of the border line of a picture in units of pt.
// Returns:
//   float64  
func (instance *Picture) GetBorderWeight()  (float64,  error)  {
	CGoReturnPtr := C.Picture_GetBorderWeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the weight of the border line of a picture in units of pt.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Picture) SetBorderWeight(value float64)  error {
	CGoReturnPtr := C.Picture_SetBorderWeight( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the path and name of the source file for the linked image.
// Returns:
//   string  
func (instance *Picture) GetSourceFullName()  (string,  error)  {
	CGoReturnPtr := C.Picture_GetSourceFullName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the path and name of the source file for the linked image.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Picture) SetSourceFullName(value string)  error {
	CGoReturnPtr := C.Picture_SetSourceFullName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the data of the formula.
// Returns:
//   string  
func (instance *Picture) GetFormula()  (string,  error)  {
	CGoReturnPtr := C.Picture_GetFormula( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the data of the formula.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Picture) SetFormula(value string)  error {
	CGoReturnPtr := C.Picture_SetFormula( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True indicates that the size of the ole object will be auto changed as the size of snapshot of the embedded content
// when the ole object is activated.
// Returns:
//   bool  
func (instance *Picture) IsAutoSize()  (bool,  error)  {
	CGoReturnPtr := C.Picture_IsAutoSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True indicates that the size of the ole object will be auto changed as the size of snapshot of the embedded content
// when the ole object is activated.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Picture) SetIsAutoSize(value bool)  error {
	CGoReturnPtr := C.Picture_SetIsAutoSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns true if the picture is linked to a file.
// Returns:
//   bool  
func (instance *Picture) IsLink()  (bool,  error)  {
	CGoReturnPtr := C.Picture_IsLink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns true if the picture is linked to a file.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Picture) SetIsLink(value bool)  error {
	CGoReturnPtr := C.Picture_SetIsLink( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets whether dynamic data exchange
// Returns:
//   bool  
func (instance *Picture) IsDynamicDataExchange()  (bool,  error)  {
	CGoReturnPtr := C.Picture_IsDynamicDataExchange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets or sets whether dynamic data exchange
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Picture) SetIsDynamicDataExchange(value bool)  error {
	CGoReturnPtr := C.Picture_SetIsDynamicDataExchange( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True if the specified object is displayed as an icon
// and the image will not be auto changed.
// Returns:
//   bool  
func (instance *Picture) GetDisplayAsIcon()  (bool,  error)  {
	CGoReturnPtr := C.Picture_GetDisplayAsIcon( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True if the specified object is displayed as an icon
// and the image will not be auto changed.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Picture) SetDisplayAsIcon(value bool)  error {
	CGoReturnPtr := C.Picture_SetDisplayAsIcon( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the image format of the picture.
// Returns:
//   int32  
func (instance *Picture) GetImageType()  (ImageType,  error)  {
	CGoReturnPtr := C.Picture_GetImageType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToImageType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets the original height of picture, in unit of centimeters.
// Returns:
//   float64  
func (instance *Picture) GetOriginalHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.Picture_GetOriginalHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the original width of picture, in unit of centimeters.
// Returns:
//   float64  
func (instance *Picture) GetOriginalWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.Picture_GetOriginalWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the original height of picture, in unit of inches.
// Returns:
//   float64  
func (instance *Picture) GetOriginalHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.Picture_GetOriginalHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the original width of picture, in unit of inches.
// Returns:
//   float64  
func (instance *Picture) GetOriginalWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.Picture_GetOriginalWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the signature line
// Returns:
//   SignatureLine  
func (instance *Picture) GetSignatureLine()  (*SignatureLine,  error)  {
	CGoReturnPtr := C.Picture_GetSignatureLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &SignatureLine{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteSignatureLine) 

	return result, nil 
}
// Gets and sets the signature line
// Parameters:
//   value - SignatureLine 
// Returns:
//   void  
func (instance *Picture) SetSignatureLine(value *SignatureLine)  error {
	CGoReturnPtr := C.Picture_SetSignatureLine( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *Picture) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.Picture_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *Picture) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.Picture_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Picture) SetMacroName(value string)  error {
	CGoReturnPtr := C.Picture_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *Picture) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.Picture_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *Picture) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.Picture_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *Picture) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.Picture_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *Picture) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.Picture_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *Picture) GetName()  (string,  error)  {
	CGoReturnPtr := C.Picture_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Picture) SetName(value string)  error {
	CGoReturnPtr := C.Picture_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *Picture) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.Picture_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Picture) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.Picture_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *Picture) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.Picture_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Picture) SetTitle(value string)  error {
	CGoReturnPtr := C.Picture_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *Picture) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.Picture_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *Picture) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.Picture_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *Picture) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.Picture_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *Picture) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.Picture_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *Picture) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.Picture_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *Picture) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.Picture_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Picture) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.Picture_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *Picture) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.Picture_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *Picture) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.Picture_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *Picture) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.Picture_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Picture) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.Picture_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *Picture) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.Picture_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Picture) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.Picture_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *Picture) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.Picture_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *Picture) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.Picture_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *Picture) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.Picture_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Picture) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.Picture_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *Picture) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.Picture_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *Picture) RemoveHyperlink()  error {
	CGoReturnPtr := C.Picture_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *Picture) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.Picture_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *Picture) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.Picture_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *Picture) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.Picture_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *Picture) GetId()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *Picture) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.Picture_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *Picture) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *Picture) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.Picture_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *Picture) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.Picture_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *Picture) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.Picture_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *Picture) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.Picture_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *Picture) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.Picture_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *Picture) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.Picture_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Picture) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.Picture_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *Picture) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.Picture_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Picture) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.Picture_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *Picture) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.Picture_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *Picture) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.Picture_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.Picture_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *Picture) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.Picture_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.Picture_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *Picture) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.Picture_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.Picture_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *Picture) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.Picture_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *Picture) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.Picture_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *Picture) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.Picture_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *Picture) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.Picture_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *Picture) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.Picture_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *Picture) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.Picture_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *Picture) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.Picture_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *Picture) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.Picture_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *Picture) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetRight(value int32)  error {
	CGoReturnPtr := C.Picture_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *Picture) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetBottom(value int32)  error {
	CGoReturnPtr := C.Picture_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *Picture) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetWidth(value int32)  error {
	CGoReturnPtr := C.Picture_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *Picture) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.Picture_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Picture) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.Picture_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *Picture) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.Picture_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Picture) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.Picture_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *Picture) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.Picture_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Picture) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.Picture_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *Picture) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetHeight(value int32)  error {
	CGoReturnPtr := C.Picture_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *Picture) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.Picture_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Picture) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.Picture_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *Picture) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.Picture_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Picture) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.Picture_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *Picture) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.Picture_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Picture) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.Picture_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *Picture) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetLeft(value int32)  error {
	CGoReturnPtr := C.Picture_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *Picture) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.Picture_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Picture) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.Picture_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *Picture) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.Picture_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Picture) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.Picture_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *Picture) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetTop(value int32)  error {
	CGoReturnPtr := C.Picture_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *Picture) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.Picture_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Picture) SetTopInch(value float64)  error {
	CGoReturnPtr := C.Picture_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *Picture) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.Picture_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Picture) SetTopCM(value float64)  error {
	CGoReturnPtr := C.Picture_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *Picture) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.Picture_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *Picture) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.Picture_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *Picture) GetX()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetX(value int32)  error {
	CGoReturnPtr := C.Picture_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *Picture) GetY()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetY(value int32)  error {
	CGoReturnPtr := C.Picture_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *Picture) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.Picture_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *Picture) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.Picture_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *Picture) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.Picture_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *Picture) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.Picture_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *Picture) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.Picture_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *Picture) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.Picture_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *Picture) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.Picture_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *Picture) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.Picture_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *Picture) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.Picture_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Picture) SetHasLine(value bool)  error {
	CGoReturnPtr := C.Picture_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *Picture) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.Picture_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Picture) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.Picture_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *Picture) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.Picture_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Picture) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.Picture_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *Picture) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.Picture_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Picture) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.Picture_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *Picture) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.Picture_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *Picture) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.Picture_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *Picture) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.Picture_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Picture) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.Picture_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *Picture) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.Picture_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Picture) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.Picture_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *Picture) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.Picture_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Picture) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.Picture_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *Picture) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.Picture_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *Picture) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.Picture_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *Picture) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.Picture_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *Picture) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.Picture_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *Picture) UpdateSelectedValue()  error {
	CGoReturnPtr := C.Picture_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *Picture) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.Picture_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.Picture_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *Picture) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.Picture_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *Picture) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.Picture_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *Picture) SetFont(value *Font)  error {
	CGoReturnPtr := C.Picture_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *Picture) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.Picture_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *Picture) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.Picture_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *Picture) GetText()  (string,  error)  {
	CGoReturnPtr := C.Picture_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Picture) SetText(value string)  error {
	CGoReturnPtr := C.Picture_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *Picture) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.Picture_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *Picture) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.Picture_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Picture) SetHtmlText(value string)  error {
	CGoReturnPtr := C.Picture_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *Picture) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.Picture_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *Picture) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.Picture_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *Picture) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.Picture_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.Picture_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *Picture) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.Picture_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.Picture_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *Picture) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.Picture_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Picture) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.Picture_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *Picture) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.Picture_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.Picture_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *Picture) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.Picture_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.Picture_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *Picture) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.Picture_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.Picture_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *Picture) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.Picture_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Picture) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.Picture_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *Picture) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.Picture_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *Picture) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.Picture_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *Picture) RemoveActiveXControl()  error {
	CGoReturnPtr := C.Picture_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *Picture) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.Picture_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *Picture) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.Picture_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *Picture) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.Picture_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *Picture) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.Picture_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *Picture) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.Picture_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Picture) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.Picture_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *Picture) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.Picture_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}


func DeletePicture(picture *Picture){
	runtime.SetFinalizer(picture, nil)
	C.Delete_Picture(picture.ptr)
	picture.ptr = nil
}

// Class PictureCollection 

// Encapsulates a collection of <see cref="Picture"/> objects.
type PictureCollection struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *PictureCollection) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.PictureCollection_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Adds a picture to the collection.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
//   fileName - string 
// Returns:
//   int32  
func (instance *PictureCollection) Add_Int_Int_Int_Int_String(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32, filename string)  (int32,  error)  {
	CGoReturnPtr := C.PictureCollection_Add_Integer_Integer_Integer_Integer_String( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn), C.CString(filename))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Adds a picture to the collection.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   fileName - string 
// Returns:
//   int32  
func (instance *PictureCollection) Add_Int_Int_String(upperleftrow int32, upperleftcolumn int32, filename string)  (int32,  error)  {
	CGoReturnPtr := C.PictureCollection_Add_Integer_Integer_String( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.CString(filename))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Adds a picture to the collection.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   fileName - string 
//   widthScale - int32 
//   heightScale - int32 
// Returns:
//   int32  
func (instance *PictureCollection) Add_Int_Int_String_Int_Int(upperleftrow int32, upperleftcolumn int32, filename string, widthscale int32, heightscale int32)  (int32,  error)  {
	CGoReturnPtr := C.PictureCollection_Add_Integer_Integer_String_Integer_Integer( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.CString(filename), C.int(widthscale), C.int(heightscale))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Picture"/> element at the specified index.
// Parameters:
//   index - int32 
// Returns:
//   Picture  
func (instance *PictureCollection) Get(index int32)  (*Picture,  error)  {
	CGoReturnPtr := C.PictureCollection_Get( instance.ptr, C.int(index))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Picture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeletePicture) 

	return result, nil 
}
// Clear all pictures.
// Returns:
//   void  
func (instance *PictureCollection) Clear()  error {
	CGoReturnPtr := C.PictureCollection_Clear( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Remove shapes at the specific index
// Parameters:
//   index - int32 
// Returns:
//   void  
func (instance *PictureCollection) RemoveAt(index int32)  error {
	CGoReturnPtr := C.PictureCollection_RemoveAt( instance.ptr, C.int(index))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns:
//   int32  
func (instance *PictureCollection) GetCount()  (int32,  error)  {
	CGoReturnPtr := C.PictureCollection_GetCount( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}


func DeletePictureCollection(picturecollection *PictureCollection){
	runtime.SetFinalizer(picturecollection, nil)
	C.Delete_PictureCollection(picturecollection.ptr)
	picturecollection.ptr = nil
}

// Class RadioButton 

// Represents a radio button.
type RadioButton struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewRadioButton(src *Shape) ( *RadioButton, error) {
	radiobutton := &RadioButton{}
	CGoReturnPtr := C.New_RadioButton(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		radiobutton.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(radiobutton, DeleteRadioButton)
		return radiobutton, nil
	} else {
		radiobutton.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return radiobutton, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *RadioButton) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.RadioButton_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates if the radiobutton is checked or not.
// Returns:
//   bool  
func (instance *RadioButton) IsChecked()  (bool,  error)  {
	CGoReturnPtr := C.RadioButton_IsChecked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates if the radiobutton is checked or not.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RadioButton) SetIsChecked(value bool)  error {
	CGoReturnPtr := C.RadioButton_SetIsChecked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the option index (one-based) in all the radio buttons of the GroupBox which contains this radio button.
// Returns:
//   int32  
func (instance *RadioButton) GetOptionIndex()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetOptionIndex( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Indicates whether the combobox has 3-D shading.
// Returns:
//   bool  
func (instance *RadioButton) GetShadow()  (bool,  error)  {
	CGoReturnPtr := C.RadioButton_GetShadow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the combobox has 3-D shading.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RadioButton) SetShadow(value bool)  error {
	CGoReturnPtr := C.RadioButton_SetShadow( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the GroupBox that contains this RadioButton.
// Returns:
//   GroupBox  
func (instance *RadioButton) GetGroupBox()  (*GroupBox,  error)  {
	CGoReturnPtr := C.RadioButton_GetGroupBox( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupBox{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupBox) 

	return result, nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *RadioButton) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.RadioButton_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *RadioButton) SetMacroName(value string)  error {
	CGoReturnPtr := C.RadioButton_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *RadioButton) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.RadioButton_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *RadioButton) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.RadioButton_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *RadioButton) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.RadioButton_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *RadioButton) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *RadioButton) GetName()  (string,  error)  {
	CGoReturnPtr := C.RadioButton_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *RadioButton) SetName(value string)  error {
	CGoReturnPtr := C.RadioButton_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *RadioButton) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.RadioButton_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *RadioButton) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.RadioButton_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *RadioButton) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.RadioButton_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *RadioButton) SetTitle(value string)  error {
	CGoReturnPtr := C.RadioButton_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *RadioButton) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.RadioButton_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *RadioButton) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.RadioButton_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *RadioButton) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.RadioButton_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *RadioButton) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.RadioButton_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *RadioButton) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.RadioButton_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *RadioButton) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.RadioButton_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RadioButton) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.RadioButton_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *RadioButton) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.RadioButton_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *RadioButton) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.RadioButton_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *RadioButton) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.RadioButton_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RadioButton) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.RadioButton_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *RadioButton) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.RadioButton_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RadioButton) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.RadioButton_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *RadioButton) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.RadioButton_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *RadioButton) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.RadioButton_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *RadioButton) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.RadioButton_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RadioButton) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.RadioButton_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *RadioButton) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.RadioButton_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *RadioButton) RemoveHyperlink()  error {
	CGoReturnPtr := C.RadioButton_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *RadioButton) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.RadioButton_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *RadioButton) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.RadioButton_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *RadioButton) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.RadioButton_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *RadioButton) GetId()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *RadioButton) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.RadioButton_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *RadioButton) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *RadioButton) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.RadioButton_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *RadioButton) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.RadioButton_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *RadioButton) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.RadioButton_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *RadioButton) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.RadioButton_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *RadioButton) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.RadioButton_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *RadioButton) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.RadioButton_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RadioButton) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.RadioButton_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *RadioButton) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.RadioButton_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RadioButton) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.RadioButton_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *RadioButton) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.RadioButton_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *RadioButton) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.RadioButton_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.RadioButton_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *RadioButton) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.RadioButton_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.RadioButton_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *RadioButton) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.RadioButton_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.RadioButton_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *RadioButton) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *RadioButton) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *RadioButton) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *RadioButton) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *RadioButton) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *RadioButton) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *RadioButton) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *RadioButton) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *RadioButton) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetRight(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *RadioButton) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetBottom(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *RadioButton) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetWidth(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *RadioButton) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.RadioButton_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RadioButton) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.RadioButton_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *RadioButton) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.RadioButton_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RadioButton) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.RadioButton_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *RadioButton) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.RadioButton_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RadioButton) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.RadioButton_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *RadioButton) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetHeight(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *RadioButton) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.RadioButton_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RadioButton) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.RadioButton_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *RadioButton) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.RadioButton_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RadioButton) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.RadioButton_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *RadioButton) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.RadioButton_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RadioButton) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.RadioButton_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *RadioButton) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetLeft(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *RadioButton) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.RadioButton_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RadioButton) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.RadioButton_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *RadioButton) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.RadioButton_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RadioButton) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.RadioButton_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *RadioButton) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetTop(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *RadioButton) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.RadioButton_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RadioButton) SetTopInch(value float64)  error {
	CGoReturnPtr := C.RadioButton_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *RadioButton) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.RadioButton_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RadioButton) SetTopCM(value float64)  error {
	CGoReturnPtr := C.RadioButton_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *RadioButton) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *RadioButton) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *RadioButton) GetX()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetX(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *RadioButton) GetY()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetY(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *RadioButton) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *RadioButton) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *RadioButton) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *RadioButton) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *RadioButton) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *RadioButton) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.RadioButton_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *RadioButton) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.RadioButton_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *RadioButton) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.RadioButton_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *RadioButton) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.RadioButton_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RadioButton) SetHasLine(value bool)  error {
	CGoReturnPtr := C.RadioButton_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *RadioButton) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.RadioButton_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RadioButton) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.RadioButton_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *RadioButton) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.RadioButton_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RadioButton) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.RadioButton_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *RadioButton) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.RadioButton_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RadioButton) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.RadioButton_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *RadioButton) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.RadioButton_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *RadioButton) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.RadioButton_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *RadioButton) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.RadioButton_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RadioButton) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.RadioButton_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *RadioButton) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.RadioButton_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *RadioButton) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.RadioButton_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *RadioButton) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.RadioButton_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *RadioButton) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.RadioButton_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *RadioButton) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.RadioButton_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *RadioButton) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.RadioButton_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *RadioButton) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.RadioButton_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *RadioButton) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.RadioButton_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *RadioButton) UpdateSelectedValue()  error {
	CGoReturnPtr := C.RadioButton_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *RadioButton) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.RadioButton_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.RadioButton_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *RadioButton) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.RadioButton_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *RadioButton) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.RadioButton_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *RadioButton) SetFont(value *Font)  error {
	CGoReturnPtr := C.RadioButton_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *RadioButton) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.RadioButton_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *RadioButton) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.RadioButton_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *RadioButton) GetText()  (string,  error)  {
	CGoReturnPtr := C.RadioButton_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *RadioButton) SetText(value string)  error {
	CGoReturnPtr := C.RadioButton_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *RadioButton) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.RadioButton_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *RadioButton) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.RadioButton_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *RadioButton) SetHtmlText(value string)  error {
	CGoReturnPtr := C.RadioButton_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *RadioButton) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.RadioButton_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *RadioButton) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.RadioButton_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *RadioButton) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.RadioButton_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.RadioButton_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *RadioButton) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.RadioButton_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.RadioButton_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *RadioButton) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.RadioButton_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RadioButton) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.RadioButton_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *RadioButton) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.RadioButton_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.RadioButton_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *RadioButton) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.RadioButton_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.RadioButton_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *RadioButton) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.RadioButton_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.RadioButton_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *RadioButton) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.RadioButton_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RadioButton) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.RadioButton_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *RadioButton) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.RadioButton_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *RadioButton) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.RadioButton_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *RadioButton) RemoveActiveXControl()  error {
	CGoReturnPtr := C.RadioButton_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *RadioButton) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.RadioButton_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *RadioButton) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.RadioButton_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *RadioButton) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.RadioButton_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *RadioButton) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.RadioButton_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *RadioButton) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.RadioButton_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RadioButton) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.RadioButton_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *RadioButton) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.RadioButton_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *RadioButton) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.RadioButton_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteRadioButton(radiobutton *RadioButton){
	runtime.SetFinalizer(radiobutton, nil)
	C.Delete_RadioButton(radiobutton.ptr)
	radiobutton.ptr = nil
}

// Class RectangleShape 

// Represents the rectangle shape.
type RectangleShape struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewRectangleShape(src *Shape) ( *RectangleShape, error) {
	rectangleshape := &RectangleShape{}
	CGoReturnPtr := C.New_RectangleShape(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		rectangleshape.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(rectangleshape, DeleteRectangleShape)
		return rectangleshape, nil
	} else {
		rectangleshape.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return rectangleshape, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *RectangleShape) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.RectangleShape_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *RectangleShape) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.RectangleShape_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *RectangleShape) SetMacroName(value string)  error {
	CGoReturnPtr := C.RectangleShape_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *RectangleShape) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.RectangleShape_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *RectangleShape) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.RectangleShape_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *RectangleShape) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.RectangleShape_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *RectangleShape) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *RectangleShape) GetName()  (string,  error)  {
	CGoReturnPtr := C.RectangleShape_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *RectangleShape) SetName(value string)  error {
	CGoReturnPtr := C.RectangleShape_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *RectangleShape) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.RectangleShape_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *RectangleShape) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.RectangleShape_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *RectangleShape) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.RectangleShape_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *RectangleShape) SetTitle(value string)  error {
	CGoReturnPtr := C.RectangleShape_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *RectangleShape) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.RectangleShape_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *RectangleShape) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.RectangleShape_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *RectangleShape) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.RectangleShape_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *RectangleShape) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.RectangleShape_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *RectangleShape) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.RectangleShape_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *RectangleShape) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.RectangleShape_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RectangleShape) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.RectangleShape_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *RectangleShape) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.RectangleShape_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *RectangleShape) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.RectangleShape_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *RectangleShape) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.RectangleShape_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RectangleShape) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.RectangleShape_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *RectangleShape) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.RectangleShape_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RectangleShape) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.RectangleShape_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *RectangleShape) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.RectangleShape_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *RectangleShape) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.RectangleShape_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *RectangleShape) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.RectangleShape_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RectangleShape) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.RectangleShape_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *RectangleShape) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.RectangleShape_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *RectangleShape) RemoveHyperlink()  error {
	CGoReturnPtr := C.RectangleShape_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *RectangleShape) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.RectangleShape_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *RectangleShape) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.RectangleShape_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *RectangleShape) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.RectangleShape_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *RectangleShape) GetId()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *RectangleShape) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.RectangleShape_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *RectangleShape) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *RectangleShape) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.RectangleShape_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *RectangleShape) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.RectangleShape_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *RectangleShape) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.RectangleShape_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *RectangleShape) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.RectangleShape_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *RectangleShape) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.RectangleShape_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *RectangleShape) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.RectangleShape_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RectangleShape) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.RectangleShape_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *RectangleShape) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.RectangleShape_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RectangleShape) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.RectangleShape_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *RectangleShape) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.RectangleShape_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *RectangleShape) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.RectangleShape_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.RectangleShape_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *RectangleShape) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.RectangleShape_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.RectangleShape_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *RectangleShape) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.RectangleShape_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.RectangleShape_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *RectangleShape) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *RectangleShape) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *RectangleShape) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *RectangleShape) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *RectangleShape) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *RectangleShape) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *RectangleShape) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *RectangleShape) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *RectangleShape) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetRight(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *RectangleShape) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetBottom(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *RectangleShape) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetWidth(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *RectangleShape) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.RectangleShape_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RectangleShape) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.RectangleShape_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *RectangleShape) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.RectangleShape_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RectangleShape) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.RectangleShape_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *RectangleShape) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.RectangleShape_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RectangleShape) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.RectangleShape_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *RectangleShape) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetHeight(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *RectangleShape) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.RectangleShape_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RectangleShape) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.RectangleShape_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *RectangleShape) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.RectangleShape_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RectangleShape) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.RectangleShape_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *RectangleShape) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.RectangleShape_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RectangleShape) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.RectangleShape_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *RectangleShape) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetLeft(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *RectangleShape) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.RectangleShape_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RectangleShape) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.RectangleShape_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *RectangleShape) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.RectangleShape_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RectangleShape) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.RectangleShape_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *RectangleShape) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetTop(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *RectangleShape) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.RectangleShape_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RectangleShape) SetTopInch(value float64)  error {
	CGoReturnPtr := C.RectangleShape_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *RectangleShape) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.RectangleShape_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *RectangleShape) SetTopCM(value float64)  error {
	CGoReturnPtr := C.RectangleShape_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *RectangleShape) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *RectangleShape) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *RectangleShape) GetX()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetX(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *RectangleShape) GetY()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetY(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *RectangleShape) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *RectangleShape) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *RectangleShape) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *RectangleShape) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *RectangleShape) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *RectangleShape) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.RectangleShape_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *RectangleShape) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.RectangleShape_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *RectangleShape) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.RectangleShape_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *RectangleShape) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.RectangleShape_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RectangleShape) SetHasLine(value bool)  error {
	CGoReturnPtr := C.RectangleShape_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *RectangleShape) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.RectangleShape_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RectangleShape) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.RectangleShape_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *RectangleShape) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.RectangleShape_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RectangleShape) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.RectangleShape_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *RectangleShape) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.RectangleShape_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RectangleShape) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.RectangleShape_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *RectangleShape) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.RectangleShape_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *RectangleShape) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.RectangleShape_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *RectangleShape) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.RectangleShape_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RectangleShape) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.RectangleShape_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *RectangleShape) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.RectangleShape_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *RectangleShape) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.RectangleShape_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *RectangleShape) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.RectangleShape_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *RectangleShape) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.RectangleShape_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *RectangleShape) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.RectangleShape_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *RectangleShape) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.RectangleShape_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *RectangleShape) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.RectangleShape_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *RectangleShape) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.RectangleShape_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *RectangleShape) UpdateSelectedValue()  error {
	CGoReturnPtr := C.RectangleShape_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *RectangleShape) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.RectangleShape_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.RectangleShape_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *RectangleShape) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.RectangleShape_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *RectangleShape) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.RectangleShape_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *RectangleShape) SetFont(value *Font)  error {
	CGoReturnPtr := C.RectangleShape_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *RectangleShape) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.RectangleShape_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *RectangleShape) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.RectangleShape_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *RectangleShape) GetText()  (string,  error)  {
	CGoReturnPtr := C.RectangleShape_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *RectangleShape) SetText(value string)  error {
	CGoReturnPtr := C.RectangleShape_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *RectangleShape) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.RectangleShape_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *RectangleShape) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.RectangleShape_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *RectangleShape) SetHtmlText(value string)  error {
	CGoReturnPtr := C.RectangleShape_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *RectangleShape) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.RectangleShape_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *RectangleShape) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.RectangleShape_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *RectangleShape) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.RectangleShape_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.RectangleShape_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *RectangleShape) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.RectangleShape_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.RectangleShape_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *RectangleShape) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.RectangleShape_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RectangleShape) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.RectangleShape_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *RectangleShape) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.RectangleShape_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.RectangleShape_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *RectangleShape) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.RectangleShape_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.RectangleShape_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *RectangleShape) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.RectangleShape_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.RectangleShape_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *RectangleShape) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.RectangleShape_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *RectangleShape) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.RectangleShape_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *RectangleShape) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.RectangleShape_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *RectangleShape) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.RectangleShape_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *RectangleShape) RemoveActiveXControl()  error {
	CGoReturnPtr := C.RectangleShape_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *RectangleShape) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.RectangleShape_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *RectangleShape) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.RectangleShape_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *RectangleShape) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.RectangleShape_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *RectangleShape) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.RectangleShape_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *RectangleShape) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.RectangleShape_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *RectangleShape) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.RectangleShape_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *RectangleShape) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.RectangleShape_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *RectangleShape) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.RectangleShape_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteRectangleShape(rectangleshape *RectangleShape){
	runtime.SetFinalizer(rectangleshape, nil)
	C.Delete_RectangleShape(rectangleshape.ptr)
	rectangleshape.ptr = nil
}

// Class ReflectionEffect 

// This class specifies a reflection effect.
type ReflectionEffect struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *ReflectionEffect) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.ReflectionEffect_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the preset reflection effect.
// Returns:
//   int32  
func (instance *ReflectionEffect) GetType()  (ReflectionEffectType,  error)  {
	CGoReturnPtr := C.ReflectionEffect_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToReflectionEffectType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset reflection effect.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ReflectionEffect) SetType(value ReflectionEffectType)  error {
	CGoReturnPtr := C.ReflectionEffect_SetType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the degree of the starting reflection transparency as a value from 0.0 (opaque) through 1.0 (clear).
// Returns:
//   float64  
func (instance *ReflectionEffect) GetTransparency()  (float64,  error)  {
	CGoReturnPtr := C.ReflectionEffect_GetTransparency( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the degree of the starting reflection transparency as a value from 0.0 (opaque) through 1.0 (clear).
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ReflectionEffect) SetTransparency(value float64)  error {
	CGoReturnPtr := C.ReflectionEffect_SetTransparency( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the end position (along the alpha gradient ramp) of the end alpha value,in unit of percentage
// Returns:
//   float64  
func (instance *ReflectionEffect) GetSize()  (float64,  error)  {
	CGoReturnPtr := C.ReflectionEffect_GetSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the end position (along the alpha gradient ramp) of the end alpha value,in unit of percentage
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ReflectionEffect) SetSize(value float64)  error {
	CGoReturnPtr := C.ReflectionEffect_SetSize( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the blur radius,in unit of points.
// Returns:
//   float64  
func (instance *ReflectionEffect) GetBlur()  (float64,  error)  {
	CGoReturnPtr := C.ReflectionEffect_GetBlur( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the blur radius,in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ReflectionEffect) SetBlur(value float64)  error {
	CGoReturnPtr := C.ReflectionEffect_SetBlur( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the direction of the alpha gradient ramp relative to the shape itself.
// Returns:
//   float64  
func (instance *ReflectionEffect) GetDirection()  (float64,  error)  {
	CGoReturnPtr := C.ReflectionEffect_GetDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the direction of the alpha gradient ramp relative to the shape itself.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ReflectionEffect) SetDirection(value float64)  error {
	CGoReturnPtr := C.ReflectionEffect_SetDirection( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets how far to distance the shadow,in unit of points.
// Returns:
//   float64  
func (instance *ReflectionEffect) GetDistance()  (float64,  error)  {
	CGoReturnPtr := C.ReflectionEffect_GetDistance( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets how far to distance the shadow,in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ReflectionEffect) SetDistance(value float64)  error {
	CGoReturnPtr := C.ReflectionEffect_SetDistance( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the direction to offset the reflection.
// Returns:
//   float64  
func (instance *ReflectionEffect) GetFadeDirection()  (float64,  error)  {
	CGoReturnPtr := C.ReflectionEffect_GetFadeDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the direction to offset the reflection.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ReflectionEffect) SetFadeDirection(value float64)  error {
	CGoReturnPtr := C.ReflectionEffect_SetFadeDirection( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets if the reflection should rotate with the shape.
// Returns:
//   bool  
func (instance *ReflectionEffect) GetRotWithShape()  (bool,  error)  {
	CGoReturnPtr := C.ReflectionEffect_GetRotWithShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets if the reflection should rotate with the shape.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ReflectionEffect) SetRotWithShape(value bool)  error {
	CGoReturnPtr := C.ReflectionEffect_SetRotWithShape( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeleteReflectionEffect(reflectioneffect *ReflectionEffect){
	runtime.SetFinalizer(reflectioneffect, nil)
	C.Delete_ReflectionEffect(reflectioneffect.ptr)
	reflectioneffect.ptr = nil
}

// Class ScrollBar 

// Represents a scroll bar object.
type ScrollBar struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewScrollBar(src *Shape) ( *ScrollBar, error) {
	scrollbar := &ScrollBar{}
	CGoReturnPtr := C.New_ScrollBar(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		scrollbar.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(scrollbar, DeleteScrollBar)
		return scrollbar, nil
	} else {
		scrollbar.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return scrollbar, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *ScrollBar) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.ScrollBar_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets or sets the current value.
// Returns:
//   int32  
func (instance *ScrollBar) GetCurrentValue()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetCurrentValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the current value.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetCurrentValue(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetCurrentValue( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the minimum value of a scroll bar or spinner range.
// Returns:
//   int32  
func (instance *ScrollBar) GetMin()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetMin( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the minimum value of a scroll bar or spinner range.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetMin(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetMin( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the maximum value of a scroll bar or spinner range.
// Returns:
//   int32  
func (instance *ScrollBar) GetMax()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetMax( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the maximum value of a scroll bar or spinner range.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetMax(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetMax( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the amount that the scroll bar or spinner is incremented a line scroll.
// Returns:
//   int32  
func (instance *ScrollBar) GetIncrementalChange()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetIncrementalChange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the amount that the scroll bar or spinner is incremented a line scroll.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetIncrementalChange(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetIncrementalChange( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets page change
// Returns:
//   int32  
func (instance *ScrollBar) GetPageChange()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetPageChange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets page change
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetPageChange(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetPageChange( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape has 3-D shading.
// Returns:
//   bool  
func (instance *ScrollBar) GetShadow()  (bool,  error)  {
	CGoReturnPtr := C.ScrollBar_GetShadow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape has 3-D shading.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ScrollBar) SetShadow(value bool)  error {
	CGoReturnPtr := C.ScrollBar_SetShadow( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether this is a horizontal scroll bar.
// Returns:
//   bool  
func (instance *ScrollBar) IsHorizontal()  (bool,  error)  {
	CGoReturnPtr := C.ScrollBar_IsHorizontal( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this is a horizontal scroll bar.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ScrollBar) SetIsHorizontal(value bool)  error {
	CGoReturnPtr := C.ScrollBar_SetIsHorizontal( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *ScrollBar) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.ScrollBar_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ScrollBar) SetMacroName(value string)  error {
	CGoReturnPtr := C.ScrollBar_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *ScrollBar) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.ScrollBar_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *ScrollBar) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.ScrollBar_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *ScrollBar) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.ScrollBar_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *ScrollBar) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *ScrollBar) GetName()  (string,  error)  {
	CGoReturnPtr := C.ScrollBar_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ScrollBar) SetName(value string)  error {
	CGoReturnPtr := C.ScrollBar_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *ScrollBar) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.ScrollBar_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ScrollBar) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.ScrollBar_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *ScrollBar) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.ScrollBar_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ScrollBar) SetTitle(value string)  error {
	CGoReturnPtr := C.ScrollBar_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *ScrollBar) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.ScrollBar_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *ScrollBar) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.ScrollBar_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *ScrollBar) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.ScrollBar_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *ScrollBar) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.ScrollBar_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *ScrollBar) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.ScrollBar_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *ScrollBar) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.ScrollBar_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ScrollBar) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.ScrollBar_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *ScrollBar) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.ScrollBar_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *ScrollBar) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.ScrollBar_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *ScrollBar) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.ScrollBar_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ScrollBar) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.ScrollBar_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *ScrollBar) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.ScrollBar_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ScrollBar) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.ScrollBar_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *ScrollBar) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.ScrollBar_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *ScrollBar) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.ScrollBar_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *ScrollBar) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.ScrollBar_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ScrollBar) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.ScrollBar_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *ScrollBar) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.ScrollBar_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *ScrollBar) RemoveHyperlink()  error {
	CGoReturnPtr := C.ScrollBar_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *ScrollBar) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.ScrollBar_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *ScrollBar) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.ScrollBar_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *ScrollBar) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.ScrollBar_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *ScrollBar) GetId()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *ScrollBar) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.ScrollBar_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *ScrollBar) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *ScrollBar) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.ScrollBar_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *ScrollBar) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.ScrollBar_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *ScrollBar) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.ScrollBar_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *ScrollBar) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.ScrollBar_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *ScrollBar) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.ScrollBar_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *ScrollBar) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.ScrollBar_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ScrollBar) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.ScrollBar_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *ScrollBar) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.ScrollBar_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ScrollBar) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.ScrollBar_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *ScrollBar) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.ScrollBar_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *ScrollBar) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.ScrollBar_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.ScrollBar_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *ScrollBar) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.ScrollBar_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.ScrollBar_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *ScrollBar) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.ScrollBar_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.ScrollBar_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *ScrollBar) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *ScrollBar) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *ScrollBar) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *ScrollBar) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *ScrollBar) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *ScrollBar) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *ScrollBar) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *ScrollBar) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *ScrollBar) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetRight(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *ScrollBar) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetBottom(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *ScrollBar) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetWidth(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *ScrollBar) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.ScrollBar_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ScrollBar) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.ScrollBar_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *ScrollBar) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.ScrollBar_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ScrollBar) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.ScrollBar_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *ScrollBar) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.ScrollBar_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ScrollBar) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.ScrollBar_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *ScrollBar) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetHeight(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *ScrollBar) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.ScrollBar_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ScrollBar) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.ScrollBar_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *ScrollBar) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.ScrollBar_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ScrollBar) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.ScrollBar_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *ScrollBar) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.ScrollBar_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ScrollBar) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.ScrollBar_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *ScrollBar) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetLeft(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *ScrollBar) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.ScrollBar_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ScrollBar) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.ScrollBar_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *ScrollBar) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.ScrollBar_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ScrollBar) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.ScrollBar_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *ScrollBar) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetTop(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *ScrollBar) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.ScrollBar_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ScrollBar) SetTopInch(value float64)  error {
	CGoReturnPtr := C.ScrollBar_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *ScrollBar) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.ScrollBar_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ScrollBar) SetTopCM(value float64)  error {
	CGoReturnPtr := C.ScrollBar_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *ScrollBar) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *ScrollBar) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *ScrollBar) GetX()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetX(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *ScrollBar) GetY()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetY(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *ScrollBar) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *ScrollBar) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *ScrollBar) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *ScrollBar) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *ScrollBar) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *ScrollBar) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.ScrollBar_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *ScrollBar) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.ScrollBar_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *ScrollBar) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.ScrollBar_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *ScrollBar) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.ScrollBar_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ScrollBar) SetHasLine(value bool)  error {
	CGoReturnPtr := C.ScrollBar_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *ScrollBar) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.ScrollBar_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ScrollBar) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.ScrollBar_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *ScrollBar) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.ScrollBar_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ScrollBar) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.ScrollBar_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *ScrollBar) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.ScrollBar_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ScrollBar) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.ScrollBar_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *ScrollBar) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.ScrollBar_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *ScrollBar) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.ScrollBar_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *ScrollBar) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.ScrollBar_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ScrollBar) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.ScrollBar_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *ScrollBar) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.ScrollBar_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ScrollBar) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.ScrollBar_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *ScrollBar) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.ScrollBar_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ScrollBar) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.ScrollBar_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *ScrollBar) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.ScrollBar_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *ScrollBar) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.ScrollBar_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *ScrollBar) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.ScrollBar_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *ScrollBar) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.ScrollBar_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *ScrollBar) UpdateSelectedValue()  error {
	CGoReturnPtr := C.ScrollBar_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *ScrollBar) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.ScrollBar_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.ScrollBar_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *ScrollBar) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.ScrollBar_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *ScrollBar) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.ScrollBar_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *ScrollBar) SetFont(value *Font)  error {
	CGoReturnPtr := C.ScrollBar_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *ScrollBar) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.ScrollBar_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *ScrollBar) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.ScrollBar_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *ScrollBar) GetText()  (string,  error)  {
	CGoReturnPtr := C.ScrollBar_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ScrollBar) SetText(value string)  error {
	CGoReturnPtr := C.ScrollBar_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *ScrollBar) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.ScrollBar_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *ScrollBar) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.ScrollBar_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *ScrollBar) SetHtmlText(value string)  error {
	CGoReturnPtr := C.ScrollBar_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *ScrollBar) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.ScrollBar_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *ScrollBar) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.ScrollBar_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *ScrollBar) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.ScrollBar_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.ScrollBar_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *ScrollBar) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.ScrollBar_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.ScrollBar_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *ScrollBar) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.ScrollBar_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ScrollBar) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.ScrollBar_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *ScrollBar) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.ScrollBar_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.ScrollBar_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *ScrollBar) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.ScrollBar_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.ScrollBar_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *ScrollBar) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.ScrollBar_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.ScrollBar_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *ScrollBar) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.ScrollBar_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ScrollBar) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.ScrollBar_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *ScrollBar) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.ScrollBar_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *ScrollBar) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.ScrollBar_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *ScrollBar) RemoveActiveXControl()  error {
	CGoReturnPtr := C.ScrollBar_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *ScrollBar) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.ScrollBar_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *ScrollBar) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.ScrollBar_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *ScrollBar) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.ScrollBar_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *ScrollBar) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.ScrollBar_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *ScrollBar) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.ScrollBar_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *ScrollBar) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.ScrollBar_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *ScrollBar) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.ScrollBar_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *ScrollBar) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.ScrollBar_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteScrollBar(scrollbar *ScrollBar){
	runtime.SetFinalizer(scrollbar, nil)
	C.Delete_ScrollBar(scrollbar.ptr)
	scrollbar.ptr = nil
}

// Class ShadowEffect 

// This class specifies the shadow effect of the chart element or shape.
type ShadowEffect struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *ShadowEffect) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.ShadowEffect_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the preset shadow type of the shadow.
// Returns:
//   int32  
func (instance *ShadowEffect) GetPresetType()  (PresetShadowType,  error)  {
	CGoReturnPtr := C.ShadowEffect_GetPresetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPresetShadowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset shadow type of the shadow.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ShadowEffect) SetPresetType(value PresetShadowType)  error {
	CGoReturnPtr := C.ShadowEffect_SetPresetType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the color of the shadow.
// Returns:
//   CellsColor  
func (instance *ShadowEffect) GetColor()  (*CellsColor,  error)  {
	CGoReturnPtr := C.ShadowEffect_GetColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &CellsColor{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteCellsColor) 

	return result, nil 
}
// Gets and sets the color of the shadow.
// Parameters:
//   value - CellsColor 
// Returns:
//   void  
func (instance *ShadowEffect) SetColor(value *CellsColor)  error {
	CGoReturnPtr := C.ShadowEffect_SetColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the degree of transparency of the shadow. Range from 0.0 (opaque) to 1.0 (clear).
// Returns:
//   float64  
func (instance *ShadowEffect) GetTransparency()  (float64,  error)  {
	CGoReturnPtr := C.ShadowEffect_GetTransparency( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the degree of transparency of the shadow. Range from 0.0 (opaque) to 1.0 (clear).
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ShadowEffect) SetTransparency(value float64)  error {
	CGoReturnPtr := C.ShadowEffect_SetTransparency( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the size of the shadow. Range from 0 to 2.0.
// Meaningless in inner shadow.
// Returns:
//   float64  
func (instance *ShadowEffect) GetSize()  (float64,  error)  {
	CGoReturnPtr := C.ShadowEffect_GetSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the size of the shadow. Range from 0 to 2.0.
// Meaningless in inner shadow.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ShadowEffect) SetSize(value float64)  error {
	CGoReturnPtr := C.ShadowEffect_SetSize( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the blur of the shadow. Range from 0 to 100 points.
// Returns:
//   float64  
func (instance *ShadowEffect) GetBlur()  (float64,  error)  {
	CGoReturnPtr := C.ShadowEffect_GetBlur( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the blur of the shadow. Range from 0 to 100 points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ShadowEffect) SetBlur(value float64)  error {
	CGoReturnPtr := C.ShadowEffect_SetBlur( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the lighting angle. Range from 0 to 359.9 degrees.
// Returns:
//   float64  
func (instance *ShadowEffect) GetAngle()  (float64,  error)  {
	CGoReturnPtr := C.ShadowEffect_GetAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the lighting angle. Range from 0 to 359.9 degrees.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ShadowEffect) SetAngle(value float64)  error {
	CGoReturnPtr := C.ShadowEffect_SetAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the distance of the shadow. Range from 0 to 200 points.
// Returns:
//   float64  
func (instance *ShadowEffect) GetDistance()  (float64,  error)  {
	CGoReturnPtr := C.ShadowEffect_GetDistance( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the distance of the shadow. Range from 0 to 200 points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ShadowEffect) SetDistance(value float64)  error {
	CGoReturnPtr := C.ShadowEffect_SetDistance( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeleteShadowEffect(shadoweffect *ShadowEffect){
	runtime.SetFinalizer(shadoweffect, nil)
	C.Delete_ShadowEffect(shadoweffect.ptr)
	shadoweffect.ptr = nil
}

// Class Shape 

// Represents the msodrawing object.
type Shape struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *Shape) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.Shape_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *Shape) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.Shape_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Shape) SetMacroName(value string)  error {
	CGoReturnPtr := C.Shape_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *Shape) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.Shape_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *Shape) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.Shape_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *Shape) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.Shape_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *Shape) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.Shape_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *Shape) GetName()  (string,  error)  {
	CGoReturnPtr := C.Shape_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Shape) SetName(value string)  error {
	CGoReturnPtr := C.Shape_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *Shape) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.Shape_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Shape) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.Shape_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *Shape) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.Shape_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Shape) SetTitle(value string)  error {
	CGoReturnPtr := C.Shape_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *Shape) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.Shape_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *Shape) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.Shape_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *Shape) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.Shape_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *Shape) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.Shape_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *Shape) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.Shape_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *Shape) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.Shape_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Shape) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.Shape_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *Shape) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.Shape_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *Shape) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.Shape_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *Shape) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.Shape_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Shape) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.Shape_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *Shape) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.Shape_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Shape) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.Shape_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *Shape) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.Shape_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *Shape) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.Shape_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *Shape) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.Shape_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Shape) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.Shape_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *Shape) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.Shape_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *Shape) RemoveHyperlink()  error {
	CGoReturnPtr := C.Shape_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *Shape) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.Shape_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *Shape) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.Shape_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *Shape) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.Shape_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *Shape) GetId()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *Shape) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.Shape_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *Shape) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *Shape) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.Shape_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *Shape) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.Shape_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *Shape) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.Shape_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *Shape) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.Shape_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *Shape) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.Shape_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *Shape) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.Shape_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Shape) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.Shape_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *Shape) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.Shape_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Shape) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.Shape_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *Shape) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.Shape_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *Shape) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.Shape_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.Shape_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *Shape) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.Shape_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.Shape_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *Shape) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.Shape_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.Shape_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *Shape) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.Shape_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *Shape) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.Shape_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *Shape) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.Shape_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *Shape) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.Shape_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *Shape) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.Shape_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *Shape) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.Shape_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *Shape) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.Shape_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *Shape) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.Shape_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *Shape) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetRight(value int32)  error {
	CGoReturnPtr := C.Shape_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *Shape) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetBottom(value int32)  error {
	CGoReturnPtr := C.Shape_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *Shape) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetWidth(value int32)  error {
	CGoReturnPtr := C.Shape_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *Shape) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.Shape_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Shape) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.Shape_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *Shape) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.Shape_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Shape) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.Shape_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *Shape) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.Shape_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Shape) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.Shape_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *Shape) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetHeight(value int32)  error {
	CGoReturnPtr := C.Shape_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *Shape) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.Shape_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Shape) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.Shape_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *Shape) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.Shape_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Shape) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.Shape_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *Shape) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.Shape_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Shape) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.Shape_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *Shape) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetLeft(value int32)  error {
	CGoReturnPtr := C.Shape_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *Shape) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.Shape_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Shape) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.Shape_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *Shape) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.Shape_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Shape) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.Shape_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *Shape) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetTop(value int32)  error {
	CGoReturnPtr := C.Shape_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *Shape) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.Shape_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Shape) SetTopInch(value float64)  error {
	CGoReturnPtr := C.Shape_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *Shape) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.Shape_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Shape) SetTopCM(value float64)  error {
	CGoReturnPtr := C.Shape_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *Shape) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.Shape_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *Shape) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.Shape_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *Shape) GetX()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetX(value int32)  error {
	CGoReturnPtr := C.Shape_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *Shape) GetY()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetY(value int32)  error {
	CGoReturnPtr := C.Shape_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *Shape) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.Shape_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *Shape) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.Shape_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *Shape) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.Shape_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *Shape) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.Shape_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *Shape) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.Shape_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *Shape) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.Shape_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *Shape) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.Shape_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *Shape) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.Shape_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *Shape) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.Shape_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Shape) SetHasLine(value bool)  error {
	CGoReturnPtr := C.Shape_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *Shape) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.Shape_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Shape) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.Shape_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *Shape) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.Shape_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Shape) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.Shape_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *Shape) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.Shape_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Shape) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.Shape_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *Shape) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.Shape_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *Shape) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.Shape_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *Shape) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.Shape_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Shape) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.Shape_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *Shape) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.Shape_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Shape) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.Shape_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *Shape) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.Shape_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Shape) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.Shape_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *Shape) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.Shape_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *Shape) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.Shape_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *Shape) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.Shape_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *Shape) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.Shape_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *Shape) UpdateSelectedValue()  error {
	CGoReturnPtr := C.Shape_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *Shape) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.Shape_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.Shape_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *Shape) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.Shape_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *Shape) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.Shape_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *Shape) SetFont(value *Font)  error {
	CGoReturnPtr := C.Shape_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *Shape) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.Shape_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *Shape) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.Shape_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *Shape) GetText()  (string,  error)  {
	CGoReturnPtr := C.Shape_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Shape) SetText(value string)  error {
	CGoReturnPtr := C.Shape_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *Shape) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.Shape_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *Shape) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.Shape_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Shape) SetHtmlText(value string)  error {
	CGoReturnPtr := C.Shape_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *Shape) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.Shape_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *Shape) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.Shape_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *Shape) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.Shape_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.Shape_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *Shape) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.Shape_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.Shape_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *Shape) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.Shape_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Shape) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.Shape_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *Shape) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.Shape_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.Shape_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *Shape) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.Shape_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.Shape_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *Shape) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.Shape_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.Shape_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *Shape) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.Shape_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Shape) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.Shape_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *Shape) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.Shape_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *Shape) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.Shape_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *Shape) RemoveActiveXControl()  error {
	CGoReturnPtr := C.Shape_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *Shape) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.Shape_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *Shape) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.Shape_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *Shape) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.Shape_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *Shape) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.Shape_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *Shape) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.Shape_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Shape) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.Shape_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *Shape) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.Shape_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *Shape) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.Shape_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteShape(shape *Shape){
	runtime.SetFinalizer(shape, nil)
	C.Delete_Shape(shape.ptr)
	shape.ptr = nil
}

// Class ShapeCollection 

// Represents all the shape in a worksheet/chart.
type ShapeCollection struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *ShapeCollection) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.ShapeCollection_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets the <see cref="Shape"/> object at the specific index in the list.
// Parameters:
//   index - int32 
// Returns:
//   Shape  
func (instance *ShapeCollection) Get_Int(index int32)  (*Shape,  error)  {
	CGoReturnPtr := C.ShapeCollection_Get_Integer( instance.ptr, C.int(index))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Shape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShape) 

	return result, nil 
}
// Gets the <see cref="Shape"/> object by the name of the shape.
// Parameters:
//   name - string 
// Returns:
//   Shape  
func (instance *ShapeCollection) Get_String(name string)  (*Shape,  error)  {
	CGoReturnPtr := C.ShapeCollection_Get_String( instance.ptr, C.CString(name))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Shape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShape) 

	return result, nil 
}
// Adds and copy a shape to the worksheet.
// Parameters:
//   sourceShape - Shape 
//   topRow - int32 
//   top - int32 
//   leftColumn - int32 
//   left - int32 
// Returns:
//   Shape  
func (instance *ShapeCollection) AddCopy(sourceshape *Shape, toprow int32, top int32, leftcolumn int32, left int32)  (*Shape,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddCopy( instance.ptr, sourceshape.ptr, C.int(toprow), C.int(top), C.int(leftcolumn), C.int(left))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Shape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShape) 

	return result, nil 
}
// Adds a checkbox to the worksheet.
// Parameters:
//   upperLeftRow - int32 
//   top - int32 
//   upperLeftColumn - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   CheckBox  
func (instance *ShapeCollection) AddCheckBox(upperleftrow int32, top int32, upperleftcolumn int32, left int32, height int32, width int32)  (*CheckBox,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddCheckBox( instance.ptr, C.int(upperleftrow), C.int(top), C.int(upperleftcolumn), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &CheckBox{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteCheckBox) 

	return result, nil 
}
// Adds a text box to the worksheet.
// Parameters:
//   upperLeftRow - int32 
//   top - int32 
//   upperLeftColumn - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   TextBox  
func (instance *ShapeCollection) AddTextBox(upperleftrow int32, top int32, upperleftcolumn int32, left int32, height int32, width int32)  (*TextBox,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddTextBox( instance.ptr, C.int(upperleftrow), C.int(top), C.int(upperleftcolumn), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBox{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBox) 

	return result, nil 
}
// Add an equation object to the worksheet.
// Parameters:
//   topRow - int32 
//   top - int32 
//   leftColumn - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   TextBox  
func (instance *ShapeCollection) AddEquation(toprow int32, top int32, leftcolumn int32, left int32, height int32, width int32)  (*TextBox,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddEquation( instance.ptr, C.int(toprow), C.int(top), C.int(leftcolumn), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBox{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBox) 

	return result, nil 
}
// Adds a Spinner to the worksheet.
// Parameters:
//   upperLeftRow - int32 
//   top - int32 
//   upperLeftColumn - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   Spinner  
func (instance *ShapeCollection) AddSpinner(upperleftrow int32, top int32, upperleftcolumn int32, left int32, height int32, width int32)  (*Spinner,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddSpinner( instance.ptr, C.int(upperleftrow), C.int(top), C.int(upperleftcolumn), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Spinner{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteSpinner) 

	return result, nil 
}
// Adds a ScrollBar to the worksheet.
// Parameters:
//   upperLeftRow - int32 
//   top - int32 
//   upperLeftColumn - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   ScrollBar  
func (instance *ShapeCollection) AddScrollBar(upperleftrow int32, top int32, upperleftcolumn int32, left int32, height int32, width int32)  (*ScrollBar,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddScrollBar( instance.ptr, C.int(upperleftrow), C.int(top), C.int(upperleftcolumn), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ScrollBar{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteScrollBar) 

	return result, nil 
}
// Adds a RadioButton to the worksheet.
// Parameters:
//   upperLeftRow - int32 
//   top - int32 
//   upperLeftColumn - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   RadioButton  
func (instance *ShapeCollection) AddRadioButton(upperleftrow int32, top int32, upperleftcolumn int32, left int32, height int32, width int32)  (*RadioButton,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddRadioButton( instance.ptr, C.int(upperleftrow), C.int(top), C.int(upperleftcolumn), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &RadioButton{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteRadioButton) 

	return result, nil 
}
// Adds a ListBox to the worksheet.
// Parameters:
//   upperLeftRow - int32 
//   top - int32 
//   upperLeftColumn - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   ListBox  
func (instance *ShapeCollection) AddListBox(upperleftrow int32, top int32, upperleftcolumn int32, left int32, height int32, width int32)  (*ListBox,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddListBox( instance.ptr, C.int(upperleftrow), C.int(top), C.int(upperleftcolumn), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ListBox{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteListBox) 

	return result, nil 
}
// Adds a ComboBox to the worksheet.
// Parameters:
//   upperLeftRow - int32 
//   top - int32 
//   upperLeftColumn - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   ComboBox  
func (instance *ShapeCollection) AddComboBox(upperleftrow int32, top int32, upperleftcolumn int32, left int32, height int32, width int32)  (*ComboBox,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddComboBox( instance.ptr, C.int(upperleftrow), C.int(top), C.int(upperleftcolumn), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ComboBox{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteComboBox) 

	return result, nil 
}
// Adds a GroupBox to the worksheet.
// Parameters:
//   upperLeftRow - int32 
//   top - int32 
//   upperLeftColumn - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   GroupBox  
func (instance *ShapeCollection) AddGroupBox(upperleftrow int32, top int32, upperleftcolumn int32, left int32, height int32, width int32)  (*GroupBox,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddGroupBox( instance.ptr, C.int(upperleftrow), C.int(top), C.int(upperleftcolumn), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupBox{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupBox) 

	return result, nil 
}
// Adds a Button to the worksheet.
// Parameters:
//   upperLeftRow - int32 
//   top - int32 
//   upperLeftColumn - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   Button  
func (instance *ShapeCollection) AddButton(upperleftrow int32, top int32, upperleftcolumn int32, left int32, height int32, width int32)  (*Button,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddButton( instance.ptr, C.int(upperleftrow), C.int(top), C.int(upperleftcolumn), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Button{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteButton) 

	return result, nil 
}
// Adds a Label to the worksheet.
// Parameters:
//   upperLeftRow - int32 
//   top - int32 
//   upperLeftColumn - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   Label  
func (instance *ShapeCollection) AddLabel(upperleftrow int32, top int32, upperleftcolumn int32, left int32, height int32, width int32)  (*Label,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddLabel( instance.ptr, C.int(upperleftrow), C.int(top), C.int(upperleftcolumn), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Label{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLabel) 

	return result, nil 
}
// Adds a label to the chart.
// Parameters:
//   top - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   Label  
func (instance *ShapeCollection) AddLabelInChart(top int32, left int32, height int32, width int32)  (*Label,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddLabelInChart( instance.ptr, C.int(top), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Label{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLabel) 

	return result, nil 
}
// Adds a textbox to the chart.
// Parameters:
//   top - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   TextBox  
func (instance *ShapeCollection) AddTextBoxInChart(top int32, left int32, height int32, width int32)  (*TextBox,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddTextBoxInChart( instance.ptr, C.int(top), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBox{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBox) 

	return result, nil 
}
// Inserts a WordArt object to the chart
// Parameters:
//   effect - int32 
//   text - string 
//   fontName - string 
//   size - int32 
//   fontBold - bool 
//   fontItalic - bool 
//   top - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   Shape  
func (instance *ShapeCollection) AddTextEffectInChart(effect MsoPresetTextEffect, text string, fontname string, size int32, fontbold bool, fontitalic bool, top int32, left int32, height int32, width int32)  (*Shape,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddTextEffectInChart( instance.ptr, C.int( int32(effect)), C.CString(text), C.CString(fontname), C.int(size), C.bool(fontbold), C.bool(fontitalic), C.int(top), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Shape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShape) 

	return result, nil 
}
// Inserts a WordArt object.
// Parameters:
//   effect - int32 
//   text - string 
//   fontName - string 
//   size - int32 
//   fontBold - bool 
//   fontItalic - bool 
//   upperLeftRow - int32 
//   top - int32 
//   upperLeftColumn - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   Shape  
func (instance *ShapeCollection) AddTextEffect(effect MsoPresetTextEffect, text string, fontname string, size int32, fontbold bool, fontitalic bool, upperleftrow int32, top int32, upperleftcolumn int32, left int32, height int32, width int32)  (*Shape,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddTextEffect( instance.ptr, C.int( int32(effect)), C.CString(text), C.CString(fontname), C.int(size), C.bool(fontbold), C.bool(fontitalic), C.int(upperleftrow), C.int(top), C.int(upperleftcolumn), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Shape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShape) 

	return result, nil 
}
// Adds preset WordArt since Excel 2007.s
// Parameters:
//   style - int32 
//   text - string 
//   upperLeftRow - int32 
//   top - int32 
//   upperLeftColumn - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   Shape  
func (instance *ShapeCollection) AddWordArt(style PresetWordArtStyle, text string, upperleftrow int32, top int32, upperleftcolumn int32, left int32, height int32, width int32)  (*Shape,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddWordArt( instance.ptr, C.int( int32(style)), C.CString(text), C.int(upperleftrow), C.int(top), C.int(upperleftcolumn), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Shape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShape) 

	return result, nil 
}
// Adds a RectangleShape to the worksheet.
// Parameters:
//   upperLeftRow - int32 
//   top - int32 
//   upperLeftColumn - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   RectangleShape  
func (instance *ShapeCollection) AddRectangle(upperleftrow int32, top int32, upperleftcolumn int32, left int32, height int32, width int32)  (*RectangleShape,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddRectangle( instance.ptr, C.int(upperleftrow), C.int(top), C.int(upperleftcolumn), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &RectangleShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteRectangleShape) 

	return result, nil 
}
// Adds a Oval to the worksheet.
// Parameters:
//   upperLeftRow - int32 
//   top - int32 
//   upperLeftColumn - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   Oval  
func (instance *ShapeCollection) AddOval(upperleftrow int32, top int32, upperleftcolumn int32, left int32, height int32, width int32)  (*Oval,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddOval( instance.ptr, C.int(upperleftrow), C.int(top), C.int(upperleftcolumn), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Oval{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteOval) 

	return result, nil 
}
// Adds a LineShape to the worksheet.
// Parameters:
//   upperLeftRow - int32 
//   top - int32 
//   upperLeftColumn - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   LineShape  
func (instance *ShapeCollection) AddLine(upperleftrow int32, top int32, upperleftcolumn int32, left int32, height int32, width int32)  (*LineShape,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddLine( instance.ptr, C.int(upperleftrow), C.int(top), C.int(upperleftcolumn), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineShape) 

	return result, nil 
}
// Add a shape to chart .All unit is 1/4000 of chart area.
// Parameters:
//   type - int32 
//   placement - int32 
//   left - int32 
//   top - int32 
//   right - int32 
//   bottom - int32 
// Returns:
//   Shape  
func (instance *ShapeCollection) AddShapeInChart_MsoDrawingType_PlacementType_Int_Int_Int_Int(type_ MsoDrawingType, placement PlacementType, left int32, top int32, right int32, bottom int32)  (*Shape,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddShapeInChart_MsoDrawingType_PlacementType_Integer_Integer_Integer_Integer( instance.ptr, C.int( int32(type_)), C.int( int32(placement)), C.int(left), C.int(top), C.int(right), C.int(bottom))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Shape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShape) 

	return result, nil 
}
// Add a shape to chart. All unit is percent scale of chart area.
// Parameters:
//   type - int32 
//   placement - int32 
//   left - float64 
//   top - float64 
//   right - float64 
//   bottom - float64 
// Returns:
//   Shape  
func (instance *ShapeCollection) AddShapeInChartByScale_MsoDrawingType_PlacementType_Double_Double_Double_Double(type_ MsoDrawingType, placement PlacementType, left float64, top float64, right float64, bottom float64)  (*Shape,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddShapeInChartByScale_MsoDrawingType_PlacementType_Double_Double_Double_Double( instance.ptr, C.int( int32(type_)), C.int( int32(placement)), C.double(left), C.double(top), C.double(right), C.double(bottom))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Shape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShape) 

	return result, nil 
}
// Adds a ArcShape to the worksheet.
// Parameters:
//   upperLeftRow - int32 
//   top - int32 
//   upperLeftColumn - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   ArcShape  
func (instance *ShapeCollection) AddArc(upperleftrow int32, top int32, upperleftcolumn int32, left int32, height int32, width int32)  (*ArcShape,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddArc( instance.ptr, C.int(upperleftrow), C.int(top), C.int(upperleftcolumn), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ArcShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteArcShape) 

	return result, nil 
}
// Adds a Shape to the worksheet.
// Parameters:
//   type - int32 
//   upperLeftRow - int32 
//   top - int32 
//   upperLeftColumn - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   Shape  
func (instance *ShapeCollection) AddShape(type_ MsoDrawingType, upperleftrow int32, top int32, upperleftcolumn int32, left int32, height int32, width int32)  (*Shape,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddShape( instance.ptr, C.int( int32(type_)), C.int(upperleftrow), C.int(top), C.int(upperleftcolumn), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Shape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShape) 

	return result, nil 
}
// Adds a AutoShape to the worksheet.
// Parameters:
//   type - int32 
//   upperLeftRow - int32 
//   top - int32 
//   upperLeftColumn - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   Shape  
func (instance *ShapeCollection) AddAutoShape(type_ AutoShapeType, upperleftrow int32, top int32, upperleftcolumn int32, left int32, height int32, width int32)  (*Shape,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddAutoShape( instance.ptr, C.int( int32(type_)), C.int(upperleftrow), C.int(top), C.int(upperleftcolumn), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Shape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShape) 

	return result, nil 
}
// Adds a AutoShape to the chart.
// Parameters:
//   type - int32 
//   top - int32 
//   left - int32 
//   height - int32 
//   width - int32 
// Returns:
//   Shape  
func (instance *ShapeCollection) AddAutoShapeInChart(type_ AutoShapeType, top int32, left int32, height int32, width int32)  (*Shape,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddAutoShapeInChart( instance.ptr, C.int( int32(type_)), C.int(top), C.int(left), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Shape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShape) 

	return result, nil 
}
// Creates an Activex Control.
// Parameters:
//   type - int32 
//   topRow - int32 
//   top - int32 
//   leftColumn - int32 
//   left - int32 
//   width - int32 
//   height - int32 
// Returns:
//   Shape  
func (instance *ShapeCollection) AddActiveXControl(type_ ControlType, toprow int32, top int32, leftcolumn int32, left int32, width int32, height int32)  (*Shape,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddActiveXControl( instance.ptr, C.int( int32(type_)), C.int(toprow), C.int(top), C.int(leftcolumn), C.int(left), C.int(width), C.int(height))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Shape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShape) 

	return result, nil 
}
// Add a linked picture.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   height - int32 
//   width - int32 
//   sourceFullName - string 
// Returns:
//   Picture  
func (instance *ShapeCollection) AddLinkedPicture(upperleftrow int32, upperleftcolumn int32, height int32, width int32, sourcefullname string)  (*Picture,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddLinkedPicture( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(height), C.int(width), C.CString(sourcefullname))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Picture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeletePicture) 

	return result, nil 
}
// Add a linked picture.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   height - int32 
//   width - int32 
//   sourceFullName - string 
// Returns:
//   OleObject  
func (instance *ShapeCollection) AddOleObjectWithLinkedImage(upperleftrow int32, upperleftcolumn int32, height int32, width int32, sourcefullname string)  (*OleObject,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddOleObjectWithLinkedImage( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(height), C.int(width), C.CString(sourcefullname))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &OleObject{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteOleObject) 

	return result, nil 
}
// Copy all comments in the range.
// Parameters:
//   shapes - ShapeCollection 
//   ca - CellArea 
//   destRow - int32 
//   destColumn - int32 
// Returns:
//   void  
func (instance *ShapeCollection) CopyCommentsInRange(shapes *ShapeCollection, ca *CellArea, destrow int32, destcolumn int32)  error {
	CGoReturnPtr := C.ShapeCollection_CopyCommentsInRange( instance.ptr, shapes.ptr, ca.ptr, C.int(destrow), C.int(destcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Copy shapes in the range to destination range.
// Parameters:
//   sourceShapes - ShapeCollection 
//   ca - CellArea 
//   destRow - int32 
//   destColumn - int32 
//   isContained - bool 
// Returns:
//   void  
func (instance *ShapeCollection) CopyInRange(sourceshapes *ShapeCollection, ca *CellArea, destrow int32, destcolumn int32, iscontained bool)  error {
	CGoReturnPtr := C.ShapeCollection_CopyInRange( instance.ptr, sourceshapes.ptr, ca.ptr, C.int(destrow), C.int(destcolumn), C.bool(iscontained))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Delete shapes in the range.Comment shapes will not be deleted.
// Parameters:
//   ca - CellArea 
// Returns:
//   void  
func (instance *ShapeCollection) DeleteInRange(ca *CellArea)  error {
	CGoReturnPtr := C.ShapeCollection_DeleteInRange( instance.ptr, ca.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Delete a shape. If the shape is in the group or is a comment shape, it will not be deleted.
// Parameters:
//   shape - Shape 
// Returns:
//   void  
func (instance *ShapeCollection) DeleteShape(shape *Shape)  error {
	CGoReturnPtr := C.ShapeCollection_DeleteShape( instance.ptr, shape.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Ungroups the shape items.
// Parameters:
//   group - GroupShape 
// Returns:
//   void  
func (instance *ShapeCollection) Ungroup(group *GroupShape)  error {
	CGoReturnPtr := C.ShapeCollection_Ungroup( instance.ptr, group.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Remove the shape.
// Parameters:
//   index - int32 
// Returns:
//   void  
func (instance *ShapeCollection) RemoveAt(index int32)  error {
	CGoReturnPtr := C.ShapeCollection_RemoveAt( instance.ptr, C.int(index))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Remove the shape.
// Parameters:
//   shape - Shape 
// Returns:
//   void  
func (instance *ShapeCollection) Remove(shape *Shape)  error {
	CGoReturnPtr := C.ShapeCollection_Remove( instance.ptr, shape.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Clear all shapes in the worksheet.
// Returns:
//   void  
func (instance *ShapeCollection) Clear()  error {
	CGoReturnPtr := C.ShapeCollection_Clear( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell or range of the shape.
// Returns:
//   void  
func (instance *ShapeCollection) UpdateSelectedValue()  error {
	CGoReturnPtr := C.ShapeCollection_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a Signature Line to the worksheet.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   signatureLine - SignatureLine 
// Returns:
//   Picture  
func (instance *ShapeCollection) AddSignatureLine(upperleftrow int32, upperleftcolumn int32, signatureline *SignatureLine)  (*Picture,  error)  {
	CGoReturnPtr := C.ShapeCollection_AddSignatureLine( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), signatureline.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Picture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeletePicture) 

	return result, nil 
}
// Returns:
//   int32  
func (instance *ShapeCollection) GetCount()  (int32,  error)  {
	CGoReturnPtr := C.ShapeCollection_GetCount( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}


func DeleteShapeCollection(shapecollection *ShapeCollection){
	runtime.SetFinalizer(shapecollection, nil)
	C.Delete_ShapeCollection(shapecollection.ptr)
	shapecollection.ptr = nil
}

// Class ShapeGuide 

// Encapsulates a shape guide specifies the presence of a shape guide that will be used to
// govern the geometry of the specified shape
type ShapeGuide struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - BaseShapeGuide 
func NewShapeGuide(src *BaseShapeGuide) ( *ShapeGuide, error) {
	shapeguide := &ShapeGuide{}
	CGoReturnPtr := C.New_ShapeGuide(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		shapeguide.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(shapeguide, DeleteShapeGuide)
		return shapeguide, nil
	} else {
		shapeguide.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return shapeguide, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *ShapeGuide) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.ShapeGuide_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets or sets value of this guide
// Returns:
//   float64  
func (instance *ShapeGuide) GetValue()  (float64,  error)  {
	CGoReturnPtr := C.ShapeGuide_GetValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets value of this guide
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ShapeGuide) SetValue(value float64)  error {
	CGoReturnPtr := C.ShapeGuide_SetValue( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeleteShapeGuide(shapeguide *ShapeGuide){
	runtime.SetFinalizer(shapeguide, nil)
	C.Delete_ShapeGuide(shapeguide.ptr)
	shapeguide.ptr = nil
}

// Class ShapeGuideCollection 

// Encapsulates a collection of shape guide
type ShapeGuideCollection struct {
	ptr unsafe.Pointer
}

// Default constructor.
func NewShapeGuideCollection() ( *ShapeGuideCollection, error) {
	shapeguidecollection := &ShapeGuideCollection{}
	CGoReturnPtr := C.New_ShapeGuideCollection()
	if CGoReturnPtr.error_no == 0 {
		shapeguidecollection.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(shapeguidecollection, DeleteShapeGuideCollection)
		return shapeguidecollection, nil
	} else {
		shapeguidecollection.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return shapeguidecollection, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *ShapeGuideCollection) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.ShapeGuideCollection_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Adds a shape guide.(Important: This feature is currently only available for Excel07 and above)
// Parameters:
//   name - string 
//   val - float64 
// Returns:
//   int32  
func (instance *ShapeGuideCollection) Add(name string, val float64)  (int32,  error)  {
	CGoReturnPtr := C.ShapeGuideCollection_Add( instance.ptr, C.CString(name), C.double(val))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets a shape guide by index
// Parameters:
//   index - int32 
// Returns:
//   ShapeGuide  
func (instance *ShapeGuideCollection) Get(index int32)  (*ShapeGuide,  error)  {
	CGoReturnPtr := C.ShapeGuideCollection_Get( instance.ptr, C.int(index))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapeGuide{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapeGuide) 

	return result, nil 
}
// Returns:
//   int32  
func (instance *ShapeGuideCollection) GetCount()  (int32,  error)  {
	CGoReturnPtr := C.ShapeGuideCollection_GetCount( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}


func DeleteShapeGuideCollection(shapeguidecollection *ShapeGuideCollection){
	runtime.SetFinalizer(shapeguidecollection, nil)
	C.Delete_ShapeGuideCollection(shapeguidecollection.ptr)
	shapeguidecollection.ptr = nil
}

// Class ShapePath 

// Represents a creation path consisting of a series of moves, lines and curves that when combined will form a geometric shape.
type ShapePath struct {
	ptr unsafe.Pointer
}

// Initializes a new instance of the <see cref="ShapePath"/> class.
func NewShapePath() ( *ShapePath, error) {
	shapepath := &ShapePath{}
	CGoReturnPtr := C.New_ShapePath()
	if CGoReturnPtr.error_no == 0 {
		shapepath.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(shapepath, DeleteShapePath)
		return shapepath, nil
	} else {
		shapepath.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return shapepath, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *ShapePath) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.ShapePath_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets <see cref="ShapeSegmentPathCollection"/> list
// Returns:
//   ShapeSegmentPathCollection  
func (instance *ShapePath) GetPathSegementList()  (*ShapeSegmentPathCollection,  error)  {
	CGoReturnPtr := C.ShapePath_GetPathSegementList( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapeSegmentPathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapeSegmentPathCollection) 

	return result, nil 
}
// Starts a new figure from the specified point without closing the current figure. All subsequent points added to the path are added to this new figure.
// Parameters:
//   x - float32 
//   y - float32 
// Returns:
//   void  
func (instance *ShapePath) MoveTo(x float32, y float32)  error {
	CGoReturnPtr := C.ShapePath_MoveTo( instance.ptr, C.float(x), C.float(y))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Appends a line segment to the current figure. The starting point is the end point of the current figure.
// Parameters:
//   x - float32 
//   y - float32 
// Returns:
//   void  
func (instance *ShapePath) LineTo(x float32, y float32)  error {
	CGoReturnPtr := C.ShapePath_LineTo( instance.ptr, C.float(x), C.float(y))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Appends a cubic Bézier curve to the current figure. The starting point is the end point of the current figure.
// Parameters:
//   ctrX1 - float32 
//   ctrY1 - float32 
//   ctrX2 - float32 
//   ctrY2 - float32 
//   endX - float32 
//   endY - float32 
// Returns:
//   void  
func (instance *ShapePath) CubicBezierTo(ctrx1 float32, ctry1 float32, ctrx2 float32, ctry2 float32, endx float32, endy float32)  error {
	CGoReturnPtr := C.ShapePath_CubicBezierTo( instance.ptr, C.float(ctrx1), C.float(ctry1), C.float(ctrx2), C.float(ctry2), C.float(endx), C.float(endy))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Appends an elliptical arc to the current figure. The starting point is the end point of the current figure.
// Parameters:
//   wR - float32 
//   hR - float32 
//   stAng - float32 
//   swAng - float32 
// Returns:
//   void  
func (instance *ShapePath) ArcTo(wr float32, hr float32, stang float32, swang float32)  error {
	CGoReturnPtr := C.ShapePath_ArcTo( instance.ptr, C.float(wr), C.float(hr), C.float(stang), C.float(swang))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Closes the current figure and starts a new figure. If the current figure contains a sequence of connected lines and curves, the method closes the loop by connecting a line from the endpoint to the starting point.
// Returns:
//   void  
func (instance *ShapePath) Close()  error {
	CGoReturnPtr := C.ShapePath_Close( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeleteShapePath(shapepath *ShapePath){
	runtime.SetFinalizer(shapepath, nil)
	C.Delete_ShapePath(shapepath.ptr)
	shapepath.ptr = nil
}

// Class ShapePathCollection 

// Represents path collection information in NotPrimitive autoshape
type ShapePathCollection struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *ShapePathCollection) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.ShapePathCollection_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets the count of paths
// Returns:
//   int32  
func (instance *ShapePathCollection) GetCount()  (int32,  error)  {
	CGoReturnPtr := C.ShapePathCollection_GetCount( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets a creation path.
// Parameters:
//   index - int32 
// Returns:
//   ShapePath  
func (instance *ShapePathCollection) Get(index int32)  (*ShapePath,  error)  {
	CGoReturnPtr := C.ShapePathCollection_Get( instance.ptr, C.int(index))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePath{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePath) 

	return result, nil 
}
// Add a creation path.
// Returns:
//   int32  
func (instance *ShapePathCollection) Add()  (int32,  error)  {
	CGoReturnPtr := C.ShapePathCollection_Add( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}


func DeleteShapePathCollection(shapepathcollection *ShapePathCollection){
	runtime.SetFinalizer(shapepathcollection, nil)
	C.Delete_ShapePathCollection(shapepathcollection.ptr)
	shapepathcollection.ptr = nil
}

// Class ShapePathPoint 

// Represents an x-y coordinate within the path coordinate space.
type ShapePathPoint struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *ShapePathPoint) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.ShapePathPoint_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets x coordinate for this position coordinate.
// Returns:
//   int32  
func (instance *ShapePathPoint) GetX()  (int32,  error)  {
	CGoReturnPtr := C.ShapePathPoint_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets x coordinate for this position coordinate.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ShapePathPoint) SetX(value int32)  error {
	CGoReturnPtr := C.ShapePathPoint_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets y coordinate for this position coordinate.
// Returns:
//   int32  
func (instance *ShapePathPoint) GetY()  (int32,  error)  {
	CGoReturnPtr := C.ShapePathPoint_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets y coordinate for this position coordinate.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ShapePathPoint) SetY(value int32)  error {
	CGoReturnPtr := C.ShapePathPoint_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeleteShapePathPoint(shapepathpoint *ShapePathPoint){
	runtime.SetFinalizer(shapepathpoint, nil)
	C.Delete_ShapePathPoint(shapepathpoint.ptr)
	shapepathpoint.ptr = nil
}

// Class ShapePathPointCollection 

// Represents all shape path points.
type ShapePathPointCollection struct {
	ptr unsafe.Pointer
}

// Default constructor.
func NewShapePathPointCollection() ( *ShapePathPointCollection, error) {
	shapepathpointcollection := &ShapePathPointCollection{}
	CGoReturnPtr := C.New_ShapePathPointCollection()
	if CGoReturnPtr.error_no == 0 {
		shapepathpointcollection.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(shapepathpointcollection, DeleteShapePathPointCollection)
		return shapepathpointcollection, nil
	} else {
		shapepathpointcollection.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return shapepathpointcollection, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *ShapePathPointCollection) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.ShapePathPointCollection_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets shape path point by index.
// Parameters:
//   index - int32 
// Returns:
//   ShapePathPoint  
func (instance *ShapePathPointCollection) Get(index int32)  (*ShapePathPoint,  error)  {
	CGoReturnPtr := C.ShapePathPointCollection_Get( instance.ptr, C.int(index))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathPoint{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathPoint) 

	return result, nil 
}
// Adds a path point.
// Parameters:
//   x - int32 
//   y - int32 
// Returns:
//   int32  
func (instance *ShapePathPointCollection) Add(x int32, y int32)  (int32,  error)  {
	CGoReturnPtr := C.ShapePathPointCollection_Add( instance.ptr, C.int(x), C.int(y))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns:
//   int32  
func (instance *ShapePathPointCollection) GetCount()  (int32,  error)  {
	CGoReturnPtr := C.ShapePathPointCollection_GetCount( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}


func DeleteShapePathPointCollection(shapepathpointcollection *ShapePathPointCollection){
	runtime.SetFinalizer(shapepathpointcollection, nil)
	C.Delete_ShapePathPointCollection(shapepathpointcollection.ptr)
	shapepathpointcollection.ptr = nil
}

// Class ShapePropertyCollection 

// This class specifies the visual shape properties for a chart element or shape.
type ShapePropertyCollection struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *ShapePropertyCollection) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.ShapePropertyCollection_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *ShapePropertyCollection) GetGlowEffect()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.ShapePropertyCollection_GetGlowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Clears the glow effect of the shape.
// Returns:
//   void  
func (instance *ShapePropertyCollection) ClearGlowEffect()  error {
	CGoReturnPtr := C.ShapePropertyCollection_ClearGlowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates if the shape has glow effect data.
// Returns:
//   bool  
func (instance *ShapePropertyCollection) HasGlowEffect()  (bool,  error)  {
	CGoReturnPtr := C.ShapePropertyCollection_HasGlowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Represents a <see cref="Format3D"/> object that specifies 3D shape properties for the chart element or shape.
// Returns:
//   Format3D  
func (instance *ShapePropertyCollection) GetFormat3D()  (*Format3D,  error)  {
	CGoReturnPtr := C.ShapePropertyCollection_GetFormat3D( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Format3D{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFormat3D) 

	return result, nil 
}
// Indicates if the shape has 3d format data.
// Returns:
//   bool  
func (instance *ShapePropertyCollection) HasFormat3D()  (bool,  error)  {
	CGoReturnPtr := C.ShapePropertyCollection_HasFormat3D( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Clears the 3D shape properties of the shape.
// Returns:
//   void  
func (instance *ShapePropertyCollection) ClearFormat3D()  error {
	CGoReturnPtr := C.ShapePropertyCollection_ClearFormat3D( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *ShapePropertyCollection) GetSoftEdgeRadius()  (float64,  error)  {
	CGoReturnPtr := C.ShapePropertyCollection_GetSoftEdgeRadius( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ShapePropertyCollection) SetSoftEdgeRadius(value float64)  error {
	CGoReturnPtr := C.ShapePropertyCollection_SetSoftEdgeRadius( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents a <see cref="ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *ShapePropertyCollection) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.ShapePropertyCollection_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Clears the shadow effect of the chart element or shape.
// Returns:
//   void  
func (instance *ShapePropertyCollection) ClearShadowEffect()  error {
	CGoReturnPtr := C.ShapePropertyCollection_ClearShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates if the shape has shadow effect data.
// Returns:
//   bool  
func (instance *ShapePropertyCollection) HasShadowEffect()  (bool,  error)  {
	CGoReturnPtr := C.ShapePropertyCollection_HasShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteShapePropertyCollection(shapepropertycollection *ShapePropertyCollection){
	runtime.SetFinalizer(shapepropertycollection, nil)
	C.Delete_ShapePropertyCollection(shapepropertycollection.ptr)
	shapepropertycollection.ptr = nil
}

// Class ShapeSegmentPath 

// Represents a segment path in a path of the freeform.
type ShapeSegmentPath struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *ShapeSegmentPath) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.ShapeSegmentPath_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets the path segment type
// Returns:
//   int32  
func (instance *ShapeSegmentPath) GetType()  (ShapePathType,  error)  {
	CGoReturnPtr := C.ShapeSegmentPath_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapePathType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets the points in path segment
// Returns:
//   ShapePathPointCollection  
func (instance *ShapeSegmentPath) GetPoints()  (*ShapePathPointCollection,  error)  {
	CGoReturnPtr := C.ShapeSegmentPath_GetPoints( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathPointCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathPointCollection) 

	return result, nil 
}


func DeleteShapeSegmentPath(shapesegmentpath *ShapeSegmentPath){
	runtime.SetFinalizer(shapesegmentpath, nil)
	C.Delete_ShapeSegmentPath(shapesegmentpath.ptr)
	shapesegmentpath.ptr = nil
}

// Class ShapeSegmentPathCollection 

// Represents a creation path consisting of a series of moves, lines and curves that when combined will form a geometric shape.
type ShapeSegmentPathCollection struct {
	ptr unsafe.Pointer
}

// Default constructor.
func NewShapeSegmentPathCollection() ( *ShapeSegmentPathCollection, error) {
	shapesegmentpathcollection := &ShapeSegmentPathCollection{}
	CGoReturnPtr := C.New_ShapeSegmentPathCollection()
	if CGoReturnPtr.error_no == 0 {
		shapesegmentpathcollection.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(shapesegmentpathcollection, DeleteShapeSegmentPathCollection)
		return shapesegmentpathcollection, nil
	} else {
		shapesegmentpathcollection.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return shapesegmentpathcollection, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *ShapeSegmentPathCollection) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.ShapeSegmentPathCollection_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Add a segment path in creation path.
// Parameters:
//   type - int32 
// Returns:
//   int32  
func (instance *ShapeSegmentPathCollection) Add(type_ ShapePathType)  (int32,  error)  {
	CGoReturnPtr := C.ShapeSegmentPathCollection_Add( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets <see cref="ShapeSegmentPath"/> object.
// Parameters:
//   index - int32 
// Returns:
//   ShapeSegmentPath  
func (instance *ShapeSegmentPathCollection) Get(index int32)  (*ShapeSegmentPath,  error)  {
	CGoReturnPtr := C.ShapeSegmentPathCollection_Get( instance.ptr, C.int(index))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapeSegmentPath{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapeSegmentPath) 

	return result, nil 
}
// Returns:
//   int32  
func (instance *ShapeSegmentPathCollection) GetCount()  (int32,  error)  {
	CGoReturnPtr := C.ShapeSegmentPathCollection_GetCount( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}


func DeleteShapeSegmentPathCollection(shapesegmentpathcollection *ShapeSegmentPathCollection){
	runtime.SetFinalizer(shapesegmentpathcollection, nil)
	C.Delete_ShapeSegmentPathCollection(shapesegmentpathcollection.ptr)
	shapesegmentpathcollection.ptr = nil
}

// Class SignatureLine 

// Represent the signature line.
type SignatureLine struct {
	ptr unsafe.Pointer
}

// Default constructor.
func NewSignatureLine() ( *SignatureLine, error) {
	signatureline := &SignatureLine{}
	CGoReturnPtr := C.New_SignatureLine()
	if CGoReturnPtr.error_no == 0 {
		signatureline.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(signatureline, DeleteSignatureLine)
		return signatureline, nil
	} else {
		signatureline.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return signatureline, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *SignatureLine) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.SignatureLine_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets or sets identifier for this signature line.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *SignatureLine) GetId(uuid *UUID)  error {
	CGoReturnPtr := C.SignatureLine_GetId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets identifier for this signature line.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *SignatureLine) SetId(value *UUID)  error {
	CGoReturnPtr := C.SignatureLine_SetId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the id of signature provider.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *SignatureLine) GetProviderId(uuid *UUID)  error {
	CGoReturnPtr := C.SignatureLine_GetProviderId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the id of signature provider.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *SignatureLine) SetProviderId(value *UUID)  error {
	CGoReturnPtr := C.SignatureLine_SetProviderId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the signer.
// Returns:
//   string  
func (instance *SignatureLine) GetSigner()  (string,  error)  {
	CGoReturnPtr := C.SignatureLine_GetSigner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the signer.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *SignatureLine) SetSigner(value string)  error {
	CGoReturnPtr := C.SignatureLine_SetSigner( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the title of singer.
// Returns:
//   string  
func (instance *SignatureLine) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.SignatureLine_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the title of singer.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *SignatureLine) SetTitle(value string)  error {
	CGoReturnPtr := C.SignatureLine_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the email of singer.
// Returns:
//   string  
func (instance *SignatureLine) GetEmail()  (string,  error)  {
	CGoReturnPtr := C.SignatureLine_GetEmail( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the email of singer.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *SignatureLine) SetEmail(value string)  error {
	CGoReturnPtr := C.SignatureLine_SetEmail( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether it is a signature line.
// Returns:
//   bool  
func (instance *SignatureLine) IsLine()  (bool,  error)  {
	CGoReturnPtr := C.SignatureLine_IsLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether it is a signature line.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *SignatureLine) SetIsLine(value bool)  error {
	CGoReturnPtr := C.SignatureLine_SetIsLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether comments could be attached.
// Returns:
//   bool  
func (instance *SignatureLine) GetAllowComments()  (bool,  error)  {
	CGoReturnPtr := C.SignatureLine_GetAllowComments( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether comments could be attached.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *SignatureLine) SetAllowComments(value bool)  error {
	CGoReturnPtr := C.SignatureLine_SetAllowComments( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether show signed date.
// Returns:
//   bool  
func (instance *SignatureLine) GetShowSignedDate()  (bool,  error)  {
	CGoReturnPtr := C.SignatureLine_GetShowSignedDate( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether show signed date.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *SignatureLine) SetShowSignedDate(value bool)  error {
	CGoReturnPtr := C.SignatureLine_SetShowSignedDate( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the text shown to user at signing time.
// Returns:
//   string  
func (instance *SignatureLine) GetInstructions()  (string,  error)  {
	CGoReturnPtr := C.SignatureLine_GetInstructions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the text shown to user at signing time.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *SignatureLine) SetInstructions(value string)  error {
	CGoReturnPtr := C.SignatureLine_SetInstructions( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the signature type.
// Default - When the default value is set, the corresponding ProviderId value is fixed to {0000000000-0000-0000-0000-0000000000}.
// Stamp - When the value is Stamp, the corresponding ProviderId value is usually {000CD6A4-0000-0000-C000-000000000046}.
// Custom - When the value is Custom, the corresponding ProviderId value usually needs to be set by the user. it should be obtained from the documentation shipped with the provider.
// Returns:
//   int32  
func (instance *SignatureLine) GetSignatureLineType()  (SignatureType,  error)  {
	CGoReturnPtr := C.SignatureLine_GetSignatureLineType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToSignatureType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets or sets the signature type.
// Default - When the default value is set, the corresponding ProviderId value is fixed to {0000000000-0000-0000-0000-0000000000}.
// Stamp - When the value is Stamp, the corresponding ProviderId value is usually {000CD6A4-0000-0000-C000-000000000046}.
// Custom - When the value is Custom, the corresponding ProviderId value usually needs to be set by the user. it should be obtained from the documentation shipped with the provider.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SignatureLine) SetSignatureLineType(value SignatureType)  error {
	CGoReturnPtr := C.SignatureLine_SetSignatureLineType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeleteSignatureLine(signatureline *SignatureLine){
	runtime.SetFinalizer(signatureline, nil)
	C.Delete_SignatureLine(signatureline.ptr)
	signatureline.ptr = nil
}

// Class SmartArtShape 

// Represents the smart art.
type SmartArtShape struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewSmartArtShape(src *Shape) ( *SmartArtShape, error) {
	smartartshape := &SmartArtShape{}
	CGoReturnPtr := C.New_SmartArtShape(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		smartartshape.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(smartartshape, DeleteSmartArtShape)
		return smartartshape, nil
	} else {
		smartartshape.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return smartartshape, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *SmartArtShape) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.SmartArtShape_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *SmartArtShape) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *SmartArtShape) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *SmartArtShape) SetMacroName(value string)  error {
	CGoReturnPtr := C.SmartArtShape_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *SmartArtShape) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.SmartArtShape_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *SmartArtShape) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.SmartArtShape_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *SmartArtShape) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.SmartArtShape_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *SmartArtShape) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *SmartArtShape) GetName()  (string,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *SmartArtShape) SetName(value string)  error {
	CGoReturnPtr := C.SmartArtShape_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *SmartArtShape) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *SmartArtShape) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.SmartArtShape_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *SmartArtShape) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *SmartArtShape) SetTitle(value string)  error {
	CGoReturnPtr := C.SmartArtShape_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *SmartArtShape) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *SmartArtShape) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *SmartArtShape) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *SmartArtShape) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *SmartArtShape) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *SmartArtShape) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *SmartArtShape) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.SmartArtShape_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *SmartArtShape) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *SmartArtShape) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *SmartArtShape) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.SmartArtShape_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *SmartArtShape) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.SmartArtShape_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *SmartArtShape) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.SmartArtShape_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *SmartArtShape) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.SmartArtShape_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *SmartArtShape) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *SmartArtShape) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.SmartArtShape_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *SmartArtShape) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *SmartArtShape) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.SmartArtShape_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *SmartArtShape) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.SmartArtShape_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *SmartArtShape) RemoveHyperlink()  error {
	CGoReturnPtr := C.SmartArtShape_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *SmartArtShape) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *SmartArtShape) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.SmartArtShape_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *SmartArtShape) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.SmartArtShape_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *SmartArtShape) GetId()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *SmartArtShape) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *SmartArtShape) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *SmartArtShape) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *SmartArtShape) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.SmartArtShape_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *SmartArtShape) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.SmartArtShape_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *SmartArtShape) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.SmartArtShape_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *SmartArtShape) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *SmartArtShape) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.SmartArtShape_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *SmartArtShape) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.SmartArtShape_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *SmartArtShape) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.SmartArtShape_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *SmartArtShape) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.SmartArtShape_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *SmartArtShape) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *SmartArtShape) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.SmartArtShape_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *SmartArtShape) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.SmartArtShape_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *SmartArtShape) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.SmartArtShape_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *SmartArtShape) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *SmartArtShape) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *SmartArtShape) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *SmartArtShape) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *SmartArtShape) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *SmartArtShape) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *SmartArtShape) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *SmartArtShape) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *SmartArtShape) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetRight(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *SmartArtShape) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetBottom(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *SmartArtShape) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetWidth(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *SmartArtShape) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *SmartArtShape) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.SmartArtShape_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *SmartArtShape) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *SmartArtShape) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.SmartArtShape_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *SmartArtShape) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *SmartArtShape) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.SmartArtShape_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *SmartArtShape) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetHeight(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *SmartArtShape) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *SmartArtShape) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.SmartArtShape_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *SmartArtShape) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *SmartArtShape) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.SmartArtShape_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *SmartArtShape) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *SmartArtShape) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.SmartArtShape_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *SmartArtShape) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetLeft(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *SmartArtShape) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *SmartArtShape) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.SmartArtShape_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *SmartArtShape) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *SmartArtShape) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.SmartArtShape_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *SmartArtShape) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetTop(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *SmartArtShape) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *SmartArtShape) SetTopInch(value float64)  error {
	CGoReturnPtr := C.SmartArtShape_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *SmartArtShape) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *SmartArtShape) SetTopCM(value float64)  error {
	CGoReturnPtr := C.SmartArtShape_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *SmartArtShape) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *SmartArtShape) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *SmartArtShape) GetX()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetX(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *SmartArtShape) GetY()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetY(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *SmartArtShape) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *SmartArtShape) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *SmartArtShape) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *SmartArtShape) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *SmartArtShape) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *SmartArtShape) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.SmartArtShape_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *SmartArtShape) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *SmartArtShape) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *SmartArtShape) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *SmartArtShape) SetHasLine(value bool)  error {
	CGoReturnPtr := C.SmartArtShape_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *SmartArtShape) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.SmartArtShape_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *SmartArtShape) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.SmartArtShape_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *SmartArtShape) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.SmartArtShape_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *SmartArtShape) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.SmartArtShape_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *SmartArtShape) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.SmartArtShape_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *SmartArtShape) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.SmartArtShape_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *SmartArtShape) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *SmartArtShape) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.SmartArtShape_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *SmartArtShape) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *SmartArtShape) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.SmartArtShape_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *SmartArtShape) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *SmartArtShape) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.SmartArtShape_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *SmartArtShape) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *SmartArtShape) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.SmartArtShape_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *SmartArtShape) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *SmartArtShape) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.SmartArtShape_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *SmartArtShape) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *SmartArtShape) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.SmartArtShape_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *SmartArtShape) UpdateSelectedValue()  error {
	CGoReturnPtr := C.SmartArtShape_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *SmartArtShape) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.SmartArtShape_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *SmartArtShape) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *SmartArtShape) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *SmartArtShape) SetFont(value *Font)  error {
	CGoReturnPtr := C.SmartArtShape_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *SmartArtShape) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *SmartArtShape) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.SmartArtShape_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *SmartArtShape) GetText()  (string,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *SmartArtShape) SetText(value string)  error {
	CGoReturnPtr := C.SmartArtShape_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *SmartArtShape) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.SmartArtShape_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *SmartArtShape) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *SmartArtShape) SetHtmlText(value string)  error {
	CGoReturnPtr := C.SmartArtShape_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *SmartArtShape) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.SmartArtShape_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *SmartArtShape) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.SmartArtShape_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *SmartArtShape) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.SmartArtShape_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *SmartArtShape) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.SmartArtShape_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *SmartArtShape) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.SmartArtShape_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *SmartArtShape) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.SmartArtShape_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *SmartArtShape) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.SmartArtShape_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *SmartArtShape) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.SmartArtShape_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *SmartArtShape) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.SmartArtShape_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *SmartArtShape) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *SmartArtShape) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.SmartArtShape_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *SmartArtShape) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *SmartArtShape) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *SmartArtShape) RemoveActiveXControl()  error {
	CGoReturnPtr := C.SmartArtShape_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *SmartArtShape) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *SmartArtShape) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.SmartArtShape_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *SmartArtShape) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.SmartArtShape_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *SmartArtShape) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.SmartArtShape_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *SmartArtShape) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.SmartArtShape_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *SmartArtShape) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.SmartArtShape_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *SmartArtShape) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.SmartArtShape_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteSmartArtShape(smartartshape *SmartArtShape){
	runtime.SetFinalizer(smartartshape, nil)
	C.Delete_SmartArtShape(smartartshape.ptr)
	smartartshape.ptr = nil
}

// Class SolidFill 

// Encapsulates the object that represents solid fill format
type SolidFill struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *SolidFill) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.SolidFill_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets or sets the <see cref="Color"/>.
// Returns:
//   Color  
func (instance *SolidFill) GetColor()  (*Color,  error)  {
	CGoReturnPtr := C.SolidFill_GetColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Color{}
	result.ptr = CGoReturnPtr.return_value 

	return result, nil 
}
// Gets or sets the <see cref="Color"/>.
// Parameters:
//   value - Color 
// Returns:
//   void  
func (instance *SolidFill) SetColor(value *Color)  error {
	CGoReturnPtr := C.SolidFill_SetColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the <see cref="CellsColor"/> object.
// Returns:
//   CellsColor  
func (instance *SolidFill) GetCellsColor()  (*CellsColor,  error)  {
	CGoReturnPtr := C.SolidFill_GetCellsColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &CellsColor{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteCellsColor) 

	return result, nil 
}
// Gets and sets the <see cref="CellsColor"/> object.
// Parameters:
//   value - CellsColor 
// Returns:
//   void  
func (instance *SolidFill) SetCellsColor(value *CellsColor)  error {
	CGoReturnPtr := C.SolidFill_SetCellsColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
// Returns:
//   float64  
func (instance *SolidFill) GetTransparency()  (float64,  error)  {
	CGoReturnPtr := C.SolidFill_GetTransparency( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *SolidFill) SetTransparency(value float64)  error {
	CGoReturnPtr := C.SolidFill_SetTransparency( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hash code.
// Returns:
//   int32  
func (instance *SolidFill) GetHashCode()  (int32,  error)  {
	CGoReturnPtr := C.SolidFill_GetHashCode( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *SolidFill) Equals(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.SolidFill_Equals( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteSolidFill(solidfill *SolidFill){
	runtime.SetFinalizer(solidfill, nil)
	C.Delete_SolidFill(solidfill.ptr)
	solidfill.ptr = nil
}

// Class Spinner 

// Represents the Forms control: Spinner.
type Spinner struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewSpinner(src *Shape) ( *Spinner, error) {
	spinner := &Spinner{}
	CGoReturnPtr := C.New_Spinner(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		spinner.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(spinner, DeleteSpinner)
		return spinner, nil
	} else {
		spinner.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return spinner, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *Spinner) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.Spinner_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets or sets the current value.
// Returns:
//   int32  
func (instance *Spinner) GetCurrentValue()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetCurrentValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the current value.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetCurrentValue(value int32)  error {
	CGoReturnPtr := C.Spinner_SetCurrentValue( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the minimum value of a scroll bar or spinner range.
// Returns:
//   int32  
func (instance *Spinner) GetMin()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetMin( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the minimum value of a scroll bar or spinner range.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetMin(value int32)  error {
	CGoReturnPtr := C.Spinner_SetMin( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the maximum value of a scroll bar or spinner range.
// Returns:
//   int32  
func (instance *Spinner) GetMax()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetMax( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the maximum value of a scroll bar or spinner range.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetMax(value int32)  error {
	CGoReturnPtr := C.Spinner_SetMax( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the amount that the scroll bar or spinner is incremented a line scroll.
// Returns:
//   int32  
func (instance *Spinner) GetIncrementalChange()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetIncrementalChange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the amount that the scroll bar or spinner is incremented a line scroll.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetIncrementalChange(value int32)  error {
	CGoReturnPtr := C.Spinner_SetIncrementalChange( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape has 3-D shading.
// Returns:
//   bool  
func (instance *Spinner) GetShadow()  (bool,  error)  {
	CGoReturnPtr := C.Spinner_GetShadow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape has 3-D shading.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Spinner) SetShadow(value bool)  error {
	CGoReturnPtr := C.Spinner_SetShadow( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether this is a horizontal scroll bar.
// Returns:
//   bool  
func (instance *Spinner) IsHorizontal()  (bool,  error)  {
	CGoReturnPtr := C.Spinner_IsHorizontal( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this is a horizontal scroll bar.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Spinner) SetIsHorizontal(value bool)  error {
	CGoReturnPtr := C.Spinner_SetIsHorizontal( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *Spinner) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.Spinner_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Spinner) SetMacroName(value string)  error {
	CGoReturnPtr := C.Spinner_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *Spinner) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.Spinner_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *Spinner) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.Spinner_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *Spinner) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.Spinner_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *Spinner) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.Spinner_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *Spinner) GetName()  (string,  error)  {
	CGoReturnPtr := C.Spinner_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Spinner) SetName(value string)  error {
	CGoReturnPtr := C.Spinner_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *Spinner) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.Spinner_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Spinner) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.Spinner_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *Spinner) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.Spinner_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Spinner) SetTitle(value string)  error {
	CGoReturnPtr := C.Spinner_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *Spinner) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.Spinner_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *Spinner) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.Spinner_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *Spinner) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.Spinner_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *Spinner) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.Spinner_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *Spinner) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.Spinner_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *Spinner) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.Spinner_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Spinner) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.Spinner_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *Spinner) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.Spinner_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *Spinner) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.Spinner_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *Spinner) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.Spinner_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Spinner) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.Spinner_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *Spinner) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.Spinner_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Spinner) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.Spinner_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *Spinner) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.Spinner_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *Spinner) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.Spinner_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *Spinner) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.Spinner_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Spinner) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.Spinner_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *Spinner) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.Spinner_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *Spinner) RemoveHyperlink()  error {
	CGoReturnPtr := C.Spinner_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *Spinner) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.Spinner_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *Spinner) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.Spinner_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *Spinner) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.Spinner_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *Spinner) GetId()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *Spinner) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.Spinner_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *Spinner) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *Spinner) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.Spinner_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *Spinner) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.Spinner_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *Spinner) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.Spinner_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *Spinner) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.Spinner_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *Spinner) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.Spinner_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *Spinner) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.Spinner_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Spinner) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.Spinner_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *Spinner) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.Spinner_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Spinner) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.Spinner_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *Spinner) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.Spinner_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *Spinner) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.Spinner_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.Spinner_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *Spinner) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.Spinner_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.Spinner_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *Spinner) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.Spinner_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.Spinner_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *Spinner) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.Spinner_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *Spinner) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.Spinner_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *Spinner) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.Spinner_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *Spinner) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.Spinner_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *Spinner) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.Spinner_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *Spinner) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.Spinner_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *Spinner) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.Spinner_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *Spinner) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.Spinner_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *Spinner) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetRight(value int32)  error {
	CGoReturnPtr := C.Spinner_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *Spinner) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetBottom(value int32)  error {
	CGoReturnPtr := C.Spinner_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *Spinner) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetWidth(value int32)  error {
	CGoReturnPtr := C.Spinner_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *Spinner) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.Spinner_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Spinner) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.Spinner_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *Spinner) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.Spinner_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Spinner) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.Spinner_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *Spinner) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.Spinner_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Spinner) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.Spinner_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *Spinner) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetHeight(value int32)  error {
	CGoReturnPtr := C.Spinner_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *Spinner) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.Spinner_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Spinner) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.Spinner_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *Spinner) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.Spinner_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Spinner) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.Spinner_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *Spinner) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.Spinner_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Spinner) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.Spinner_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *Spinner) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetLeft(value int32)  error {
	CGoReturnPtr := C.Spinner_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *Spinner) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.Spinner_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Spinner) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.Spinner_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *Spinner) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.Spinner_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Spinner) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.Spinner_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *Spinner) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetTop(value int32)  error {
	CGoReturnPtr := C.Spinner_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *Spinner) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.Spinner_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Spinner) SetTopInch(value float64)  error {
	CGoReturnPtr := C.Spinner_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *Spinner) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.Spinner_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *Spinner) SetTopCM(value float64)  error {
	CGoReturnPtr := C.Spinner_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *Spinner) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.Spinner_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *Spinner) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.Spinner_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *Spinner) GetX()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetX(value int32)  error {
	CGoReturnPtr := C.Spinner_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *Spinner) GetY()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetY(value int32)  error {
	CGoReturnPtr := C.Spinner_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *Spinner) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.Spinner_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *Spinner) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.Spinner_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *Spinner) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.Spinner_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *Spinner) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.Spinner_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *Spinner) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.Spinner_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *Spinner) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.Spinner_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *Spinner) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.Spinner_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *Spinner) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.Spinner_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *Spinner) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.Spinner_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Spinner) SetHasLine(value bool)  error {
	CGoReturnPtr := C.Spinner_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *Spinner) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.Spinner_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Spinner) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.Spinner_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *Spinner) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.Spinner_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Spinner) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.Spinner_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *Spinner) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.Spinner_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Spinner) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.Spinner_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *Spinner) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.Spinner_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *Spinner) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.Spinner_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *Spinner) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.Spinner_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Spinner) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.Spinner_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *Spinner) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.Spinner_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Spinner) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.Spinner_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *Spinner) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.Spinner_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Spinner) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.Spinner_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *Spinner) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.Spinner_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *Spinner) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.Spinner_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *Spinner) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.Spinner_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *Spinner) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.Spinner_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *Spinner) UpdateSelectedValue()  error {
	CGoReturnPtr := C.Spinner_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *Spinner) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.Spinner_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.Spinner_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *Spinner) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.Spinner_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *Spinner) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.Spinner_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *Spinner) SetFont(value *Font)  error {
	CGoReturnPtr := C.Spinner_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *Spinner) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.Spinner_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *Spinner) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.Spinner_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *Spinner) GetText()  (string,  error)  {
	CGoReturnPtr := C.Spinner_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Spinner) SetText(value string)  error {
	CGoReturnPtr := C.Spinner_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *Spinner) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.Spinner_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *Spinner) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.Spinner_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *Spinner) SetHtmlText(value string)  error {
	CGoReturnPtr := C.Spinner_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *Spinner) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.Spinner_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *Spinner) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.Spinner_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *Spinner) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.Spinner_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.Spinner_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *Spinner) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.Spinner_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.Spinner_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *Spinner) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.Spinner_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Spinner) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.Spinner_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *Spinner) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.Spinner_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.Spinner_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *Spinner) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.Spinner_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.Spinner_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *Spinner) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.Spinner_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.Spinner_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *Spinner) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.Spinner_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *Spinner) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.Spinner_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *Spinner) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.Spinner_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *Spinner) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.Spinner_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *Spinner) RemoveActiveXControl()  error {
	CGoReturnPtr := C.Spinner_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *Spinner) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.Spinner_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *Spinner) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.Spinner_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *Spinner) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.Spinner_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *Spinner) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.Spinner_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *Spinner) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.Spinner_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *Spinner) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.Spinner_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *Spinner) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.Spinner_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *Spinner) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.Spinner_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteSpinner(spinner *Spinner){
	runtime.SetFinalizer(spinner, nil)
	C.Delete_Spinner(spinner.ptr)
	spinner.ptr = nil
}

// Class TextBox 

// Encapsulates the object that represents a textbox in a spreadsheet.
type TextBox struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewTextBox(src *Shape) ( *TextBox, error) {
	textbox := &TextBox{}
	CGoReturnPtr := C.New_TextBox(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		textbox.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(textbox, DeleteTextBox)
		return textbox, nil
	} else {
		textbox.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return textbox, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *TextBox) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.TextBox_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Get the specified math paragraph from the TextBody property of the TextBox object.
// Notice:
// (1) Returns NULL when the index is out of bounds or not found.
// (2) Also returns NULL if the specified index position is not a math paragraph.
// Parameters:
//   index - int32 
// Returns:
//   EquationNode  
func (instance *TextBox) GetEquationParagraph_Int(index int32)  (*EquationNode,  error)  {
	CGoReturnPtr := C.TextBox_GetEquationParagraph_Integer( instance.ptr, C.int(index))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &EquationNode{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteEquationNode) 

	return result, nil 
}
// Gets the first math paragraph from the TextBody property of the TextBox object.
// Returns:
//   EquationNode  
func (instance *TextBox) GetEquationParagraph()  (*EquationNode,  error)  {
	CGoReturnPtr := C.TextBox_GetEquationParagraph( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &EquationNode{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteEquationNode) 

	return result, nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *TextBox) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.TextBox_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *TextBox) SetMacroName(value string)  error {
	CGoReturnPtr := C.TextBox_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *TextBox) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.TextBox_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *TextBox) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.TextBox_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *TextBox) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.TextBox_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *TextBox) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.TextBox_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *TextBox) GetName()  (string,  error)  {
	CGoReturnPtr := C.TextBox_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *TextBox) SetName(value string)  error {
	CGoReturnPtr := C.TextBox_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *TextBox) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.TextBox_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *TextBox) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.TextBox_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *TextBox) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.TextBox_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *TextBox) SetTitle(value string)  error {
	CGoReturnPtr := C.TextBox_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *TextBox) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.TextBox_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *TextBox) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.TextBox_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *TextBox) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.TextBox_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *TextBox) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.TextBox_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *TextBox) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.TextBox_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *TextBox) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.TextBox_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *TextBox) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.TextBox_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *TextBox) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.TextBox_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *TextBox) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.TextBox_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *TextBox) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.TextBox_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *TextBox) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.TextBox_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *TextBox) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.TextBox_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *TextBox) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.TextBox_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *TextBox) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.TextBox_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *TextBox) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.TextBox_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *TextBox) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.TextBox_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *TextBox) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.TextBox_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *TextBox) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.TextBox_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *TextBox) RemoveHyperlink()  error {
	CGoReturnPtr := C.TextBox_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *TextBox) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.TextBox_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *TextBox) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.TextBox_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *TextBox) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.TextBox_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *TextBox) GetId()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *TextBox) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.TextBox_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *TextBox) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *TextBox) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.TextBox_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *TextBox) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.TextBox_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *TextBox) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.TextBox_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *TextBox) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.TextBox_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *TextBox) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.TextBox_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *TextBox) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.TextBox_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *TextBox) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.TextBox_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *TextBox) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.TextBox_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *TextBox) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.TextBox_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *TextBox) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.TextBox_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *TextBox) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.TextBox_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.TextBox_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *TextBox) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.TextBox_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.TextBox_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *TextBox) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.TextBox_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.TextBox_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *TextBox) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.TextBox_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *TextBox) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.TextBox_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *TextBox) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.TextBox_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *TextBox) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.TextBox_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *TextBox) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.TextBox_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *TextBox) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.TextBox_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *TextBox) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.TextBox_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *TextBox) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.TextBox_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *TextBox) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetRight(value int32)  error {
	CGoReturnPtr := C.TextBox_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *TextBox) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetBottom(value int32)  error {
	CGoReturnPtr := C.TextBox_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *TextBox) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetWidth(value int32)  error {
	CGoReturnPtr := C.TextBox_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *TextBox) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.TextBox_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *TextBox) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.TextBox_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *TextBox) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.TextBox_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *TextBox) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.TextBox_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *TextBox) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.TextBox_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *TextBox) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.TextBox_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *TextBox) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetHeight(value int32)  error {
	CGoReturnPtr := C.TextBox_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *TextBox) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.TextBox_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *TextBox) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.TextBox_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *TextBox) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.TextBox_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *TextBox) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.TextBox_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *TextBox) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.TextBox_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *TextBox) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.TextBox_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *TextBox) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetLeft(value int32)  error {
	CGoReturnPtr := C.TextBox_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *TextBox) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.TextBox_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *TextBox) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.TextBox_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *TextBox) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.TextBox_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *TextBox) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.TextBox_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *TextBox) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetTop(value int32)  error {
	CGoReturnPtr := C.TextBox_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *TextBox) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.TextBox_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *TextBox) SetTopInch(value float64)  error {
	CGoReturnPtr := C.TextBox_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *TextBox) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.TextBox_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *TextBox) SetTopCM(value float64)  error {
	CGoReturnPtr := C.TextBox_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *TextBox) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.TextBox_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *TextBox) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.TextBox_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *TextBox) GetX()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetX(value int32)  error {
	CGoReturnPtr := C.TextBox_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *TextBox) GetY()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetY(value int32)  error {
	CGoReturnPtr := C.TextBox_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *TextBox) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.TextBox_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *TextBox) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.TextBox_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *TextBox) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.TextBox_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *TextBox) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.TextBox_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *TextBox) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.TextBox_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *TextBox) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.TextBox_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *TextBox) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.TextBox_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *TextBox) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.TextBox_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *TextBox) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.TextBox_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *TextBox) SetHasLine(value bool)  error {
	CGoReturnPtr := C.TextBox_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *TextBox) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.TextBox_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *TextBox) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.TextBox_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *TextBox) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.TextBox_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *TextBox) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.TextBox_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *TextBox) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.TextBox_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *TextBox) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.TextBox_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *TextBox) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.TextBox_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *TextBox) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.TextBox_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *TextBox) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.TextBox_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *TextBox) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.TextBox_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *TextBox) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.TextBox_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *TextBox) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.TextBox_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *TextBox) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.TextBox_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *TextBox) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.TextBox_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *TextBox) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.TextBox_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *TextBox) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.TextBox_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *TextBox) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.TextBox_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *TextBox) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.TextBox_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *TextBox) UpdateSelectedValue()  error {
	CGoReturnPtr := C.TextBox_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *TextBox) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.TextBox_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.TextBox_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *TextBox) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.TextBox_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *TextBox) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.TextBox_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *TextBox) SetFont(value *Font)  error {
	CGoReturnPtr := C.TextBox_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *TextBox) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.TextBox_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *TextBox) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.TextBox_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *TextBox) GetText()  (string,  error)  {
	CGoReturnPtr := C.TextBox_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *TextBox) SetText(value string)  error {
	CGoReturnPtr := C.TextBox_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *TextBox) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.TextBox_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *TextBox) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.TextBox_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *TextBox) SetHtmlText(value string)  error {
	CGoReturnPtr := C.TextBox_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *TextBox) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.TextBox_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *TextBox) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.TextBox_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *TextBox) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.TextBox_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.TextBox_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *TextBox) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.TextBox_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.TextBox_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *TextBox) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.TextBox_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *TextBox) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.TextBox_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *TextBox) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.TextBox_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.TextBox_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *TextBox) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.TextBox_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.TextBox_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *TextBox) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.TextBox_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.TextBox_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *TextBox) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.TextBox_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextBox) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.TextBox_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *TextBox) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.TextBox_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *TextBox) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.TextBox_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *TextBox) RemoveActiveXControl()  error {
	CGoReturnPtr := C.TextBox_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *TextBox) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.TextBox_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *TextBox) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.TextBox_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *TextBox) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.TextBox_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *TextBox) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.TextBox_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *TextBox) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.TextBox_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *TextBox) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.TextBox_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *TextBox) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.TextBox_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *TextBox) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.TextBox_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteTextBox(textbox *TextBox){
	runtime.SetFinalizer(textbox, nil)
	C.Delete_TextBox(textbox.ptr)
	textbox.ptr = nil
}

// Class TextBoxCollection 

// Encapsulates a collection of <see cref="TextBox"/> objects.
type TextBoxCollection struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *TextBoxCollection) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.TextBoxCollection_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets the <see cref="TextBox"/> element at the specified index.
// Parameters:
//   index - int32 
// Returns:
//   TextBox  
func (instance *TextBoxCollection) Get_Int(index int32)  (*TextBox,  error)  {
	CGoReturnPtr := C.TextBoxCollection_Get_Integer( instance.ptr, C.int(index))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBox{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBox) 

	return result, nil 
}
// Gets the <see cref="TextBox"/> element by the name.
// Parameters:
//   name - string 
// Returns:
//   TextBox  
func (instance *TextBoxCollection) Get_String(name string)  (*TextBox,  error)  {
	CGoReturnPtr := C.TextBoxCollection_Get_String( instance.ptr, C.CString(name))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBox{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBox) 

	return result, nil 
}
// Adds a textbox to the collection.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   height - int32 
//   width - int32 
// Returns:
//   int32  
func (instance *TextBoxCollection) Add(upperleftrow int32, upperleftcolumn int32, height int32, width int32)  (int32,  error)  {
	CGoReturnPtr := C.TextBoxCollection_Add( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(height), C.int(width))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Remove a text box from the file.
// Parameters:
//   index - int32 
// Returns:
//   void  
func (instance *TextBoxCollection) RemoveAt(index int32)  error {
	CGoReturnPtr := C.TextBoxCollection_RemoveAt( instance.ptr, C.int(index))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Clear all text boxes.
// Returns:
//   void  
func (instance *TextBoxCollection) Clear()  error {
	CGoReturnPtr := C.TextBoxCollection_Clear( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns:
//   int32  
func (instance *TextBoxCollection) GetCount()  (int32,  error)  {
	CGoReturnPtr := C.TextBoxCollection_GetCount( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}


func DeleteTextBoxCollection(textboxcollection *TextBoxCollection){
	runtime.SetFinalizer(textboxcollection, nil)
	C.Delete_TextBoxCollection(textboxcollection.ptr)
	textboxcollection.ptr = nil
}

// Class TextEffectFormat 

// Contains properties and methods that apply to WordArt objects.
type TextEffectFormat struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *TextEffectFormat) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.TextEffectFormat_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Sets the preset text effect.
// Parameters:
//   effect - int32 
// Returns:
//   void  
func (instance *TextEffectFormat) SetTextEffect(effect MsoPresetTextEffect)  error {
	CGoReturnPtr := C.TextEffectFormat_SetTextEffect( instance.ptr, C.int( int32(effect)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// The text in the WordArt.
// Returns:
//   string  
func (instance *TextEffectFormat) GetText()  (string,  error)  {
	CGoReturnPtr := C.TextEffectFormat_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// The text in the WordArt.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *TextEffectFormat) SetText(value string)  error {
	CGoReturnPtr := C.TextEffectFormat_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// The name of the font used in the WordArt.
// Returns:
//   string  
func (instance *TextEffectFormat) GetFontName()  (string,  error)  {
	CGoReturnPtr := C.TextEffectFormat_GetFontName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// The name of the font used in the WordArt.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *TextEffectFormat) SetFontName(value string)  error {
	CGoReturnPtr := C.TextEffectFormat_SetFontName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether font is bold.
// Returns:
//   bool  
func (instance *TextEffectFormat) GetFontBold()  (bool,  error)  {
	CGoReturnPtr := C.TextEffectFormat_GetFontBold( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether font is bold.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *TextEffectFormat) SetFontBold(value bool)  error {
	CGoReturnPtr := C.TextEffectFormat_SetFontBold( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether font is italic.
// Returns:
//   bool  
func (instance *TextEffectFormat) GetFontItalic()  (bool,  error)  {
	CGoReturnPtr := C.TextEffectFormat_GetFontItalic( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether font is italic.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *TextEffectFormat) SetFontItalic(value bool)  error {
	CGoReturnPtr := C.TextEffectFormat_SetFontItalic( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// If true,characters in the specified WordArt are rotated 90 degrees relative to the WordArt's bounding shape.
// Returns:
//   bool  
func (instance *TextEffectFormat) GetRotatedChars()  (bool,  error)  {
	CGoReturnPtr := C.TextEffectFormat_GetRotatedChars( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// If true,characters in the specified WordArt are rotated 90 degrees relative to the WordArt's bounding shape.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *TextEffectFormat) SetRotatedChars(value bool)  error {
	CGoReturnPtr := C.TextEffectFormat_SetRotatedChars( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// The size (in points) of the font used in the WordArt.
// Returns:
//   int32  
func (instance *TextEffectFormat) GetFontSize()  (int32,  error)  {
	CGoReturnPtr := C.TextEffectFormat_GetFontSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// The size (in points) of the font used in the WordArt.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextEffectFormat) SetFontSize(value int32)  error {
	CGoReturnPtr := C.TextEffectFormat_SetFontSize( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset shape type.
// Returns:
//   int32  
func (instance *TextEffectFormat) GetPresetShape()  (MsoPresetTextEffectShape,  error)  {
	CGoReturnPtr := C.TextEffectFormat_GetPresetShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoPresetTextEffectShape(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextEffectFormat) SetPresetShape(value MsoPresetTextEffectShape)  error {
	CGoReturnPtr := C.TextEffectFormat_SetPresetShape( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeleteTextEffectFormat(texteffectformat *TextEffectFormat){
	runtime.SetFinalizer(texteffectformat, nil)
	C.Delete_TextEffectFormat(texteffectformat.ptr)
	texteffectformat.ptr = nil
}

// Class TextureFill 

// Encapsulates the object that represents texture fill format
type TextureFill struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *TextureFill) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.TextureFill_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the texture type
// Returns:
//   int32  
func (instance *TextureFill) GetType()  (TextureType,  error)  {
	CGoReturnPtr := C.TextureFill_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextureType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the texture type
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextureFill) SetType(value TextureType)  error {
	CGoReturnPtr := C.TextureFill_SetType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether tile picture as texture.
// Returns:
//   bool  
func (instance *TextureFill) IsTiling()  (bool,  error)  {
	CGoReturnPtr := C.TextureFill_IsTiling( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether tile picture as texture.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *TextureFill) SetIsTiling(value bool)  error {
	CGoReturnPtr := C.TextureFill_SetIsTiling( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets picture format option.
// Returns:
//   PicFormatOption  
func (instance *TextureFill) GetPicFormatOption()  (*PicFormatOption,  error)  {
	CGoReturnPtr := C.TextureFill_GetPicFormatOption( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &PicFormatOption{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeletePicFormatOption) 

	return result, nil 
}
// Gets or sets picture format option.
// Parameters:
//   value - PicFormatOption 
// Returns:
//   void  
func (instance *TextureFill) SetPicFormatOption(value *PicFormatOption)  error {
	CGoReturnPtr := C.TextureFill_SetPicFormatOption( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets tile picture option.
// Returns:
//   TilePicOption  
func (instance *TextureFill) GetTilePicOption()  (*TilePicOption,  error)  {
	CGoReturnPtr := C.TextureFill_GetTilePicOption( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TilePicOption{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTilePicOption) 

	return result, nil 
}
// Gets or sets tile picture option.
// Parameters:
//   value - TilePicOption 
// Returns:
//   void  
func (instance *TextureFill) SetTilePicOption(value *TilePicOption)  error {
	CGoReturnPtr := C.TextureFill_SetTilePicOption( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the picture format type.
// Returns:
//   int32  
func (instance *TextureFill) GetPictureFormatType()  (FillPictureType,  error)  {
	CGoReturnPtr := C.TextureFill_GetPictureFormatType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToFillPictureType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the picture format type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TextureFill) SetPictureFormatType(value FillPictureType)  error {
	CGoReturnPtr := C.TextureFill_SetPictureFormatType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the picture format scale.
// Returns:
//   float64  
func (instance *TextureFill) GetScale()  (float64,  error)  {
	CGoReturnPtr := C.TextureFill_GetScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the picture format scale.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *TextureFill) SetScale(value float64)  error {
	CGoReturnPtr := C.TextureFill_SetScale( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
// Returns:
//   float64  
func (instance *TextureFill) GetTransparency()  (float64,  error)  {
	CGoReturnPtr := C.TextureFill_GetTransparency( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the degree of transparency of the area as a value from 0.0 (opaque) through 1.0 (clear).
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *TextureFill) SetTransparency(value float64)  error {
	CGoReturnPtr := C.TextureFill_SetTransparency( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeleteTextureFill(texturefill *TextureFill){
	runtime.SetFinalizer(texturefill, nil)
	C.Delete_TextureFill(texturefill.ptr)
	texturefill.ptr = nil
}

// Class ThreeDFormat 

// Represents a shape's three-dimensional formatting.
type ThreeDFormat struct {
	ptr unsafe.Pointer
}


// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *ThreeDFormat) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.ThreeDFormat_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the width of the bottom bevel, or how far into the shape it is applied.
// In unit of Points.
// Returns:
//   float64  
func (instance *ThreeDFormat) GetBottomBevelWidth()  (float64,  error)  {
	CGoReturnPtr := C.ThreeDFormat_GetBottomBevelWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width of the bottom bevel, or how far into the shape it is applied.
// In unit of Points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ThreeDFormat) SetBottomBevelWidth(value float64)  error {
	CGoReturnPtr := C.ThreeDFormat_SetBottomBevelWidth( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height of the bottom bevel, or how far into the shape it is applied.
// In unit of Points.
// Returns:
//   float64  
func (instance *ThreeDFormat) GetBottomBevelHeight()  (float64,  error)  {
	CGoReturnPtr := C.ThreeDFormat_GetBottomBevelHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height of the bottom bevel, or how far into the shape it is applied.
// In unit of Points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ThreeDFormat) SetBottomBevelHeight(value float64)  error {
	CGoReturnPtr := C.ThreeDFormat_SetBottomBevelHeight( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the type of the bottom bevel, or how far into the shape it is applied.
// In unit of Points.
// Returns:
//   int32  
func (instance *ThreeDFormat) GetBottomBevelType()  (BevelType,  error)  {
	CGoReturnPtr := C.ThreeDFormat_GetBottomBevelType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToBevelType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the type of the bottom bevel, or how far into the shape it is applied.
// In unit of Points.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ThreeDFormat) SetBottomBevelType(value BevelType)  error {
	CGoReturnPtr := C.ThreeDFormat_SetBottomBevelType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width of the top bevel, or how far into the shape it is applied.
// In unit of Points.
// Returns:
//   float64  
func (instance *ThreeDFormat) GetTopBevelWidth()  (float64,  error)  {
	CGoReturnPtr := C.ThreeDFormat_GetTopBevelWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width of the top bevel, or how far into the shape it is applied.
// In unit of Points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ThreeDFormat) SetTopBevelWidth(value float64)  error {
	CGoReturnPtr := C.ThreeDFormat_SetTopBevelWidth( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height of the top bevel, or how far into the shape it is applied.
// In unit of Points.
// Returns:
//   float64  
func (instance *ThreeDFormat) GetTopBevelHeight()  (float64,  error)  {
	CGoReturnPtr := C.ThreeDFormat_GetTopBevelHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height of the top bevel, or how far into the shape it is applied.
// In unit of Points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ThreeDFormat) SetTopBevelHeight(value float64)  error {
	CGoReturnPtr := C.ThreeDFormat_SetTopBevelHeight( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the type of the top bevel, or how far into the shape it is applied.
// In unit of Points.
// Returns:
//   int32  
func (instance *ThreeDFormat) GetTopBevelType()  (BevelType,  error)  {
	CGoReturnPtr := C.ThreeDFormat_GetTopBevelType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToBevelType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the type of the top bevel, or how far into the shape it is applied.
// In unit of Points.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ThreeDFormat) SetTopBevelType(value BevelType)  error {
	CGoReturnPtr := C.ThreeDFormat_SetTopBevelType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the preset material which is combined with the lighting properties to give the
// final look and feel of a shape.
// Returns:
//   int32  
func (instance *ThreeDFormat) GetMaterial()  (PresetMaterialType,  error)  {
	CGoReturnPtr := C.ThreeDFormat_GetMaterial( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPresetMaterialType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the preset material which is combined with the lighting properties to give the
// final look and feel of a shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ThreeDFormat) SetMaterial(value PresetMaterialType)  error {
	CGoReturnPtr := C.ThreeDFormat_SetMaterial( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the contour color on a shape.
// Returns:
//   CellsColor  
func (instance *ThreeDFormat) GetContourColor()  (*CellsColor,  error)  {
	CGoReturnPtr := C.ThreeDFormat_GetContourColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &CellsColor{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteCellsColor) 

	return result, nil 
}
// Gets and sets the contour color on a shape.
// Parameters:
//   value - CellsColor 
// Returns:
//   void  
func (instance *ThreeDFormat) SetContourColor(value *CellsColor)  error {
	CGoReturnPtr := C.ThreeDFormat_SetContourColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the contour width on the shape, in unit of points.
// Returns:
//   float64  
func (instance *ThreeDFormat) GetContourWidth()  (float64,  error)  {
	CGoReturnPtr := C.ThreeDFormat_GetContourWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the contour width on the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ThreeDFormat) SetContourWidth(value float64)  error {
	CGoReturnPtr := C.ThreeDFormat_SetContourWidth( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the extrusion color on a shape.
// Returns:
//   CellsColor  
func (instance *ThreeDFormat) GetExtrusionColor()  (*CellsColor,  error)  {
	CGoReturnPtr := C.ThreeDFormat_GetExtrusionColor( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &CellsColor{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteCellsColor) 

	return result, nil 
}
// Gets the extrusion color on a shape.
// Parameters:
//   value - CellsColor 
// Returns:
//   void  
func (instance *ThreeDFormat) SetExtrusionColor(value *CellsColor)  error {
	CGoReturnPtr := C.ThreeDFormat_SetExtrusionColor( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the extrusion height of the applied to the shape, in unit of points.
// Returns:
//   float64  
func (instance *ThreeDFormat) GetExtrusionHeight()  (float64,  error)  {
	CGoReturnPtr := C.ThreeDFormat_GetExtrusionHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the extrusion height of the applied to the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ThreeDFormat) SetExtrusionHeight(value float64)  error {
	CGoReturnPtr := C.ThreeDFormat_SetExtrusionHeight( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Defines the distance from ground for the 3D shape.
// Returns:
//   float64  
func (instance *ThreeDFormat) GetZ()  (float64,  error)  {
	CGoReturnPtr := C.ThreeDFormat_GetZ( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Defines the distance from ground for the 3D shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ThreeDFormat) SetZ(value float64)  error {
	CGoReturnPtr := C.ThreeDFormat_SetZ( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the angle of the extrusion lights.
// Returns:
//   float64  
func (instance *ThreeDFormat) GetLightAngle()  (float64,  error)  {
	CGoReturnPtr := C.ThreeDFormat_GetLightAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the angle of the extrusion lights.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ThreeDFormat) SetLightAngle(value float64)  error {
	CGoReturnPtr := C.ThreeDFormat_SetLightAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets type of light rig.
// Returns:
//   int32  
func (instance *ThreeDFormat) GetLighting()  (LightRigType,  error)  {
	CGoReturnPtr := C.ThreeDFormat_GetLighting( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToLightRigType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets type of light rig.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ThreeDFormat) SetLighting(value LightRigType)  error {
	CGoReturnPtr := C.ThreeDFormat_SetLighting( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the direction from which the light rig is oriented in relation to the scene.
// Returns:
//   int32  
func (instance *ThreeDFormat) GetLightingDirection()  (LightRigDirectionType,  error)  {
	CGoReturnPtr := C.ThreeDFormat_GetLightingDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToLightRigDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the direction from which the light rig is oriented in relation to the scene.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ThreeDFormat) SetLightingDirection(value LightRigDirectionType)  error {
	CGoReturnPtr := C.ThreeDFormat_SetLightingDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the angle at which a ThreeDFormat object can be viewed.
// Returns:
//   float64  
func (instance *ThreeDFormat) GetPerspective()  (float64,  error)  {
	CGoReturnPtr := C.ThreeDFormat_GetPerspective( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the angle at which a ThreeDFormat object can be viewed.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ThreeDFormat) SetPerspective(value float64)  error {
	CGoReturnPtr := C.ThreeDFormat_SetPerspective( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the extruded shape around the x-axis in degrees.
// Returns:
//   float64  
func (instance *ThreeDFormat) GetRotationX()  (float64,  error)  {
	CGoReturnPtr := C.ThreeDFormat_GetRotationX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the extruded shape around the x-axis in degrees.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ThreeDFormat) SetRotationX(value float64)  error {
	CGoReturnPtr := C.ThreeDFormat_SetRotationX( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the extruded shape around the y-axis in degrees.
// Returns:
//   float64  
func (instance *ThreeDFormat) GetRotationY()  (float64,  error)  {
	CGoReturnPtr := C.ThreeDFormat_GetRotationY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the extruded shape around the y-axis in degrees.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ThreeDFormat) SetRotationY(value float64)  error {
	CGoReturnPtr := C.ThreeDFormat_SetRotationY( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the extruded shape around the z-axis in degrees.
// Returns:
//   float64  
func (instance *ThreeDFormat) GetRotationZ()  (float64,  error)  {
	CGoReturnPtr := C.ThreeDFormat_GetRotationZ( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the extruded shape around the z-axis in degrees.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *ThreeDFormat) SetRotationZ(value float64)  error {
	CGoReturnPtr := C.ThreeDFormat_SetRotationZ( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the extrusion preset camera type.
// Returns:
//   int32  
func (instance *ThreeDFormat) GetPresetCameraType()  (PresetCameraType,  error)  {
	CGoReturnPtr := C.ThreeDFormat_GetPresetCameraType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPresetCameraType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the extrusion preset camera type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *ThreeDFormat) SetPresetCameraType(value PresetCameraType)  error {
	CGoReturnPtr := C.ThreeDFormat_SetPresetCameraType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets hashcode.
// Returns:
//   int32  
func (instance *ThreeDFormat) GetHashCode()  (int32,  error)  {
	CGoReturnPtr := C.ThreeDFormat_GetHashCode( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *ThreeDFormat) Equals(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.ThreeDFormat_Equals( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteThreeDFormat(threedformat *ThreeDFormat){
	runtime.SetFinalizer(threedformat, nil)
	C.Delete_ThreeDFormat(threedformat.ptr)
	threedformat.ptr = nil
}

// Class TilePicOption 

// Represents tile picture as texture.
type TilePicOption struct {
	ptr unsafe.Pointer
}

// Default constructor.
func NewTilePicOption() ( *TilePicOption, error) {
	tilepicoption := &TilePicOption{}
	CGoReturnPtr := C.New_TilePicOption()
	if CGoReturnPtr.error_no == 0 {
		tilepicoption.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(tilepicoption, DeleteTilePicOption)
		return tilepicoption, nil
	} else {
		tilepicoption.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return tilepicoption, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *TilePicOption) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.TilePicOption_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets or sets the X offset for tiling picture.
// Returns:
//   float64  
func (instance *TilePicOption) GetOffsetX()  (float64,  error)  {
	CGoReturnPtr := C.TilePicOption_GetOffsetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the X offset for tiling picture.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *TilePicOption) SetOffsetX(value float64)  error {
	CGoReturnPtr := C.TilePicOption_SetOffsetX( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the Y offset for tiling picture.
// Returns:
//   float64  
func (instance *TilePicOption) GetOffsetY()  (float64,  error)  {
	CGoReturnPtr := C.TilePicOption_GetOffsetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the Y offset for tiling picture.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *TilePicOption) SetOffsetY(value float64)  error {
	CGoReturnPtr := C.TilePicOption_SetOffsetY( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the X scale for tiling picture.
// Returns:
//   float64  
func (instance *TilePicOption) GetScaleX()  (float64,  error)  {
	CGoReturnPtr := C.TilePicOption_GetScaleX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the X scale for tiling picture.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *TilePicOption) SetScaleX(value float64)  error {
	CGoReturnPtr := C.TilePicOption_SetScaleX( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the Y scale for tiling picture.
// Returns:
//   float64  
func (instance *TilePicOption) GetScaleY()  (float64,  error)  {
	CGoReturnPtr := C.TilePicOption_GetScaleY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the Y scale for tiling picture.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *TilePicOption) SetScaleY(value float64)  error {
	CGoReturnPtr := C.TilePicOption_SetScaleY( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the mirror type for tiling.
// Returns:
//   int32  
func (instance *TilePicOption) GetMirrorType()  (MirrorType,  error)  {
	CGoReturnPtr := C.TilePicOption_GetMirrorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMirrorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets or sets the mirror type for tiling.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TilePicOption) SetMirrorType(value MirrorType)  error {
	CGoReturnPtr := C.TilePicOption_SetMirrorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the alignment for tiling.
// Returns:
//   int32  
func (instance *TilePicOption) GetAlignmentType()  (RectangleAlignmentType,  error)  {
	CGoReturnPtr := C.TilePicOption_GetAlignmentType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToRectangleAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets or sets the alignment for tiling.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *TilePicOption) SetAlignmentType(value RectangleAlignmentType)  error {
	CGoReturnPtr := C.TilePicOption_SetAlignmentType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}


func DeleteTilePicOption(tilepicoption *TilePicOption){
	runtime.SetFinalizer(tilepicoption, nil)
	C.Delete_TilePicOption(tilepicoption.ptr)
	tilepicoption.ptr = nil
}

// Class VmlShapeGuide 

// just for vml
// Encapsulates a shape guide specifies the presence of a shape
// guide that will be used to govern the geometry of the specified shape
type VmlShapeGuide struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - BaseShapeGuide 
func NewVmlShapeGuide(src *BaseShapeGuide) ( *VmlShapeGuide, error) {
	vmlshapeguide := &VmlShapeGuide{}
	CGoReturnPtr := C.New_VmlShapeGuide(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		vmlshapeguide.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(vmlshapeguide, DeleteVmlShapeGuide)
		return vmlshapeguide, nil
	} else {
		vmlshapeguide.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return vmlshapeguide, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *VmlShapeGuide) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.VmlShapeGuide_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteVmlShapeGuide(vmlshapeguide *VmlShapeGuide){
	runtime.SetFinalizer(vmlshapeguide, nil)
	C.Delete_VmlShapeGuide(vmlshapeguide.ptr)
	vmlshapeguide.ptr = nil
}

// Class WebExtensionShape 

// Represents the shape of web extension.
type WebExtensionShape struct {
	ptr unsafe.Pointer
}

// Constructs from a parent object.
// Parameters:
//   src - Shape 
func NewWebExtensionShape(src *Shape) ( *WebExtensionShape, error) {
	webextensionshape := &WebExtensionShape{}
	CGoReturnPtr := C.New_WebExtensionShape(src.ptr)
	if CGoReturnPtr.error_no == 0 {
		webextensionshape.ptr = CGoReturnPtr.return_value
		runtime.SetFinalizer(webextensionshape, DeleteWebExtensionShape)
		return webextensionshape, nil
	} else {
		webextensionshape.ptr = nil
		err := errors.New(C.GoString(CGoReturnPtr.error_message))
		return webextensionshape, err
	}	
}

// Checks whether the implementation object is nullptr.
// Returns:
//   bool  
func (instance *WebExtensionShape) IsNull()  (bool,  error)  {
	CGoReturnPtr := C.WebExtensionShape_IsNull( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and set the web extension.
// Returns:
//   WebExtension  
func (instance *WebExtensionShape) GetWebExtension()  (*WebExtension,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetWebExtension( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &WebExtension{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWebExtension) 

	return result, nil 
}
// Gets and set the web extension.
// Parameters:
//   value - WebExtension 
// Returns:
//   void  
func (instance *WebExtensionShape) SetWebExtension(value *WebExtension)  error {
	CGoReturnPtr := C.WebExtensionShape_SetWebExtension( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of macro.
// Returns:
//   string  
func (instance *WebExtensionShape) GetMacroName()  (string,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetMacroName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of macro.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *WebExtensionShape) SetMacroName(value string)  error {
	CGoReturnPtr := C.WebExtensionShape_SetMacroName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the shape only contains an equation.
// Returns:
//   bool  
func (instance *WebExtensionShape) IsEquation()  (bool,  error)  {
	CGoReturnPtr := C.WebExtensionShape_IsEquation( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is a smart art.
// Returns:
//   bool  
func (instance *WebExtensionShape) IsSmartArt()  (bool,  error)  {
	CGoReturnPtr := C.WebExtensionShape_IsSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Brings the shape to the front or sends the shape to back.
// Parameters:
//   orders - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) ToFrontOrBack(orders int32)  error {
	CGoReturnPtr := C.WebExtensionShape_ToFrontOrBack( instance.ptr, C.int(orders))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns the position of a shape in the z-order.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetZOrderPosition()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetZOrderPosition( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns the position of a shape in the z-order.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetZOrderPosition(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetZOrderPosition( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the name of the shape.
// Returns:
//   string  
func (instance *WebExtensionShape) GetName()  (string,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetName( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the name of the shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *WebExtensionShape) SetName(value string)  error {
	CGoReturnPtr := C.WebExtensionShape_SetName( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Returns:
//   string  
func (instance *WebExtensionShape) GetAlternativeText()  (string,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetAlternativeText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Returns or sets the descriptive (alternative) text string of the <see cref="Shape"/> object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *WebExtensionShape) SetAlternativeText(value string)  error {
	CGoReturnPtr := C.WebExtensionShape_SetAlternativeText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Specifies the title (caption) of the current shape object.
// Returns:
//   string  
func (instance *WebExtensionShape) GetTitle()  (string,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetTitle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies the title (caption) of the current shape object.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *WebExtensionShape) SetTitle(value string)  error {
	CGoReturnPtr := C.WebExtensionShape_SetTitle( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets line style
// Returns:
//   LineFormat  
func (instance *WebExtensionShape) GetLine()  (*LineFormat,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &LineFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteLineFormat) 

	return result, nil 
}
// Returns a <see cref="FillFormat"/> object that contains fill formatting properties for the specified shape.
// Returns:
//   FillFormat  
func (instance *WebExtensionShape) GetFill()  (*FillFormat,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetFill( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FillFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFillFormat) 

	return result, nil 
}
// Represents a <see cref="Drawing.ShadowEffect"/> object that specifies shadow effect for the chart element or shape.
// Returns:
//   ShadowEffect  
func (instance *WebExtensionShape) GetShadowEffect()  (*ShadowEffect,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetShadowEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShadowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShadowEffect) 

	return result, nil 
}
// Represents a <see cref="ReflectionEffect"/> object that specifies reflection effect for the chart element or shape.
// Returns:
//   ReflectionEffect  
func (instance *WebExtensionShape) GetReflection()  (*ReflectionEffect,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetReflection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ReflectionEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteReflectionEffect) 

	return result, nil 
}
// Represents a <see cref="GlowEffect"/> object that specifies glow effect for the chart element or shape.
// Returns:
//   GlowEffect  
func (instance *WebExtensionShape) GetGlow()  (*GlowEffect,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetGlow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GlowEffect{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGlowEffect) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Returns:
//   float64  
func (instance *WebExtensionShape) GetSoftEdges()  (float64,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetSoftEdges( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the radius of blur to apply to the edges, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *WebExtensionShape) SetSoftEdges(value float64)  error {
	CGoReturnPtr := C.WebExtensionShape_SetSoftEdges( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets 3d format of the shape.
// Returns:
//   ThreeDFormat  
func (instance *WebExtensionShape) GetThreeDFormat()  (*ThreeDFormat,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetThreeDFormat( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ThreeDFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteThreeDFormat) 

	return result, nil 
}
// Gets and sets the options of the picture format.
// Returns:
//   MsoFormatPicture  
func (instance *WebExtensionShape) GetFormatPicture()  (*MsoFormatPicture,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetFormatPicture( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &MsoFormatPicture{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteMsoFormatPicture) 

	return result, nil 
}
// Indicates whether the object is visible.
// Returns:
//   bool  
func (instance *WebExtensionShape) IsHidden()  (bool,  error)  {
	CGoReturnPtr := C.WebExtensionShape_IsHidden( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *WebExtensionShape) SetIsHidden(value bool)  error {
	CGoReturnPtr := C.WebExtensionShape_SetIsHidden( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// True means that aspect ratio of the shape is locked.
// Returns:
//   bool  
func (instance *WebExtensionShape) IsAspectRatioLocked()  (bool,  error)  {
	CGoReturnPtr := C.WebExtensionShape_IsAspectRatioLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means that aspect ratio of the shape is locked.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *WebExtensionShape) SetIsAspectRatioLocked(value bool)  error {
	CGoReturnPtr := C.WebExtensionShape_SetIsAspectRatioLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the value of locked property.
// Parameters:
//   type - int32 
// Returns:
//   bool  
func (instance *WebExtensionShape) GetLockedProperty(type_ ShapeLockType)  (bool,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetLockedProperty( instance.ptr, C.int( int32(type_)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Set the locked property.
// Parameters:
//   type - int32 
//   value - bool 
// Returns:
//   void  
func (instance *WebExtensionShape) SetLockedProperty(type_ ShapeLockType, value bool)  error {
	CGoReturnPtr := C.WebExtensionShape_SetLockedProperty( instance.ptr, C.int( int32(type_)), C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the rotation of the shape.
// Returns:
//   float64  
func (instance *WebExtensionShape) GetRotationAngle()  (float64,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetRotationAngle( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the rotation of the shape.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *WebExtensionShape) SetRotationAngle(value float64)  error {
	CGoReturnPtr := C.WebExtensionShape_SetRotationAngle( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Adds a hyperlink to the shape.
// Parameters:
//   address - string 
// Returns:
//   Hyperlink  
func (instance *WebExtensionShape) AddHyperlink(address string)  (*Hyperlink,  error)  {
	CGoReturnPtr := C.WebExtensionShape_AddHyperlink( instance.ptr, C.CString(address))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Removes the hyperlink of the shape.
// Returns:
//   void  
func (instance *WebExtensionShape) RemoveHyperlink()  error {
	CGoReturnPtr := C.WebExtensionShape_RemoveHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the hyperlink of the shape.
// Returns:
//   Hyperlink  
func (instance *WebExtensionShape) GetHyperlink()  (*Hyperlink,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetHyperlink( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Hyperlink{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteHyperlink) 

	return result, nil 
}
// Moves the shape to a specified range.
// Parameters:
//   upperLeftRow - int32 
//   upperLeftColumn - int32 
//   lowerRightRow - int32 
//   lowerRightColumn - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) MoveToRange(upperleftrow int32, upperleftcolumn int32, lowerrightrow int32, lowerrightcolumn int32)  error {
	CGoReturnPtr := C.WebExtensionShape_MoveToRange( instance.ptr, C.int(upperleftrow), C.int(upperleftcolumn), C.int(lowerrightrow), C.int(lowerrightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Moves the picture to the top-right corner.
// Parameters:
//   topRow - int32 
//   rightColumn - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) AlignTopRightCorner(toprow int32, rightcolumn int32)  error {
	CGoReturnPtr := C.WebExtensionShape_AlignTopRightCorner( instance.ptr, C.int(toprow), C.int(rightcolumn))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the identifier of this shape.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetId()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetId( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional string identifier that an application can use to identify the particular shape.
// Returns:
//   string  
func (instance *WebExtensionShape) GetSpid()  (string,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetSpid( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Specifies an optional number that an application can use to associate the particular shape with a defined shape type.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetSpt()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetSpt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets the <see cref="Worksheet"/> object which contains this shape.
// Returns:
//   Worksheet  
func (instance *WebExtensionShape) GetWorksheet()  (*Worksheet,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetWorksheet( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Worksheet{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteWorksheet) 

	return result, nil 
}
// Indicates whether this shape is a group shape.
// Returns:
//   bool  
func (instance *WebExtensionShape) IsGroup()  (bool,  error)  {
	CGoReturnPtr := C.WebExtensionShape_IsGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the shape is grouped.
// Returns:
//   bool  
func (instance *WebExtensionShape) IsInGroup()  (bool,  error)  {
	CGoReturnPtr := C.WebExtensionShape_IsInGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether this shape is a word art.
// Returns:
//   bool  
func (instance *WebExtensionShape) IsWordArt()  (bool,  error)  {
	CGoReturnPtr := C.WebExtensionShape_IsWordArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Returns a TextEffectFormat object that contains text-effect formatting properties for the specified shape.
// Applies to Shape objects that represent WordArt.
// Returns:
//   TextEffectFormat  
func (instance *WebExtensionShape) GetTextEffect()  (*TextEffectFormat,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetTextEffect( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextEffectFormat{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextEffectFormat) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Returns:
//   bool  
func (instance *WebExtensionShape) IsLocked()  (bool,  error)  {
	CGoReturnPtr := C.WebExtensionShape_IsLocked( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// True means the object can not be modified when the sheet is protected.
// Note that this value is meaningful only if the worksheet or objects in the worksheet are protected.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *WebExtensionShape) SetIsLocked(value bool)  error {
	CGoReturnPtr := C.WebExtensionShape_SetIsLocked( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Returns:
//   bool  
func (instance *WebExtensionShape) IsPrintable()  (bool,  error)  {
	CGoReturnPtr := C.WebExtensionShape_IsPrintable( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is printable.
// If False, this shape will not be printed when printing.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *WebExtensionShape) SetIsPrintable(value bool)  error {
	CGoReturnPtr := C.WebExtensionShape_SetIsPrintable( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets drawing type.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetMsoDrawingType()  (MsoDrawingType,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetMsoDrawingType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToMsoDrawingType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetAutoShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetAutoShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the auto shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetAutoShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.WebExtensionShape_SetAutoShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and set the type of the shape anchor placeholder.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetAnchorType()  (ShapeAnchorType,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetAnchorType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToShapeAnchorType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and set the type of the shape anchor placeholder.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetAnchorType(value ShapeAnchorType)  error {
	CGoReturnPtr := C.WebExtensionShape_SetAnchorType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetPlacement()  (PlacementType,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetPlacement( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToPlacementType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Represents the way the drawing object is attached to the cells below it.
// The property controls the placement of an object on a worksheet.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetPlacement(value PlacementType)  error {
	CGoReturnPtr := C.WebExtensionShape_SetPlacement( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the top row index.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetUpperLeftRow()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetUpperLeftRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the top row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetUpperLeftRow(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetUpperLeftRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetUpperDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetUpperDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its upper left corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetUpperDeltaY(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetUpperDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents upper left corner column index.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetUpperLeftColumn()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetUpperLeftColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents upper left corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetUpperLeftColumn(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetUpperLeftColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetUpperDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetUpperDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal offset from its upper left corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetUpperDeltaX(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetUpperDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner row index.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner row index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetLowerRightRow(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetLowerRightRow( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetLowerDeltaY()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetLowerDeltaY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's vertical offset from its lower right corner row.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetLowerDeltaY(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetLowerDeltaY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents lower right corner column index.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetLowerRightColumn()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetLowerRightColumn( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents lower right corner column index.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetLowerRightColumn(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetLowerRightColumn( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetLowerDeltaX()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetLowerDeltaX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the shape's horizontal  offset from its lower right corner column.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetLowerDeltaX(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetLowerDeltaX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetRight()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetRight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's horizontal  offset from its lower right corner column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetRight(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetRight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetBottom()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetBottom( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape's vertical offset from its lower bottom corner row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetBottom(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetBottom( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of shape, in unit of pixels.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetWidth()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetWidth( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of shape, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetWidth(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetWidth( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of inch.
// Returns:
//   float64  
func (instance *WebExtensionShape) GetWidthInch()  (float64,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetWidthInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of inch.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *WebExtensionShape) SetWidthInch(value float64)  error {
	CGoReturnPtr := C.WebExtensionShape_SetWidthInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of point.
// Returns:
//   float64  
func (instance *WebExtensionShape) GetWidthPt()  (float64,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetWidthPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of point.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *WebExtensionShape) SetWidthPt(value float64)  error {
	CGoReturnPtr := C.WebExtensionShape_SetWidthPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *WebExtensionShape) GetWidthCM()  (float64,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetWidthCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *WebExtensionShape) SetWidthCM(value float64)  error {
	CGoReturnPtr := C.WebExtensionShape_SetWidthCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of shape, in unit of pixel.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetHeight()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetHeight( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of shape, in unit of pixel.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetHeight(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetHeight( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of inches.
// Returns:
//   float64  
func (instance *WebExtensionShape) GetHeightInch()  (float64,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetHeightInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *WebExtensionShape) SetHeightInch(value float64)  error {
	CGoReturnPtr := C.WebExtensionShape_SetHeightInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of points.
// Returns:
//   float64  
func (instance *WebExtensionShape) GetHeightPt()  (float64,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetHeightPt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of points.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *WebExtensionShape) SetHeightPt(value float64)  error {
	CGoReturnPtr := C.WebExtensionShape_SetHeightPt( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the height of the shape, in unit of centimeters.
// Returns:
//   float64  
func (instance *WebExtensionShape) GetHeightCM()  (float64,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetHeightCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the height of the shape, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *WebExtensionShape) SetHeightCM(value float64)  error {
	CGoReturnPtr := C.WebExtensionShape_SetHeightCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetLeft()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetLeft( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetLeft(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetLeft( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Returns:
//   float64  
func (instance *WebExtensionShape) GetLeftInch()  (float64,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetLeftInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *WebExtensionShape) SetLeftInch(value float64)  error {
	CGoReturnPtr := C.WebExtensionShape_SetLeftInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Returns:
//   float64  
func (instance *WebExtensionShape) GetLeftCM()  (float64,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetLeftCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from its left column, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *WebExtensionShape) SetLeftCM(value float64)  error {
	CGoReturnPtr := C.WebExtensionShape_SetLeftCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetTop()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetTop( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetTop(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetTop( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Returns:
//   float64  
func (instance *WebExtensionShape) GetTopInch()  (float64,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetTopInch( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of inches.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *WebExtensionShape) SetTopInch(value float64)  error {
	CGoReturnPtr := C.WebExtensionShape_SetTopInch( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Returns:
//   float64  
func (instance *WebExtensionShape) GetTopCM()  (float64,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetTopCM( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := float64(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from its top row, in unit of centimeters.
// Parameters:
//   value - float64 
// Returns:
//   void  
func (instance *WebExtensionShape) SetTopCM(value float64)  error {
	CGoReturnPtr := C.WebExtensionShape_SetTopCM( instance.ptr, C.double(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetTopToCorner()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetTopToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border, in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetTopToCorner(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetTopToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetLeftToCorner()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetLeftToCorner( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizonal offset of shape from worksheet left border.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetLeftToCorner(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetLeftToCorner( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetX()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetX( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the horizontal offset of shape from worksheet left border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetX(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetX( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetY()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetY( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the vertical offset of shape from worksheet top border,in unit of pixels.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetY(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetY( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Returns:
//   int32  
func (instance *WebExtensionShape) GetWidthScale()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetWidthScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the width scale, in unit of percent of the original picture width.
// If the shape is not picture ,the WidthScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetWidthScale(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetWidthScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Returns:
//   int32  
func (instance *WebExtensionShape) GetHeightScale()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetHeightScale( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the height scale,in unit of percent of the original picture height.
// If the shape is not picture ,the HeightScale property only returns 100;
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetHeightScale(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetHeightScale( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetTopInShape()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetTopInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape,
// in unit of 1/4000 of height of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetTopInShape(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetTopInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetLeftInShape()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetLeftInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the horizontal offset of shape from the left border of the parent shape,
// in unit of 1/4000 of width of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetLeftInShape(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetLeftInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetWidthInShape()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetWidthInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the width of the shape, in unit of 1/4000 of the parent shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetWidthInShape(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetWidthInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Returns:
//   int32  
func (instance *WebExtensionShape) GetHeightInShape()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetHeightInShape( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Represents the vertical offset of shape from the top border of the parent shape, in unit of 1/4000 of height of the parent shape..
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetHeightInShape(value int32)  error {
	CGoReturnPtr := C.WebExtensionShape_SetHeightInShape( instance.ptr, C.int(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the group shape which contains this shape.
// Returns:
//   GroupShape  
func (instance *WebExtensionShape) GetGroup()  (*GroupShape,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetGroup( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Gets the auto shape type.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Returns:
//   bool  
func (instance *WebExtensionShape) GetHasLine()  (bool,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetHasLine( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the line border of the shape is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *WebExtensionShape) SetHasLine(value bool)  error {
	CGoReturnPtr := C.WebExtensionShape_SetHasLine( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the fill format is visible.
// Returns:
//   bool  
func (instance *WebExtensionShape) IsFilled()  (bool,  error)  {
	CGoReturnPtr := C.WebExtensionShape_IsFilled( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the fill format is visible.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *WebExtensionShape) SetIsFilled(value bool)  error {
	CGoReturnPtr := C.WebExtensionShape_SetIsFilled( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is horizontally flipped .
// Returns:
//   bool  
func (instance *WebExtensionShape) IsFlippedHorizontally()  (bool,  error)  {
	CGoReturnPtr := C.WebExtensionShape_IsFlippedHorizontally( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is horizontally flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *WebExtensionShape) SetIsFlippedHorizontally(value bool)  error {
	CGoReturnPtr := C.WebExtensionShape_SetIsFlippedHorizontally( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets whether shape is vertically flipped .
// Returns:
//   bool  
func (instance *WebExtensionShape) IsFlippedVertically()  (bool,  error)  {
	CGoReturnPtr := C.WebExtensionShape_IsFlippedVertically( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets whether shape is vertically flipped .
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *WebExtensionShape) SetIsFlippedVertically(value bool)  error {
	CGoReturnPtr := C.WebExtensionShape_SetIsFlippedVertically( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Get the actual bottom row.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetActualLowerRightRow()  (int32,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetActualLowerRightRow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result := int32(CGoReturnPtr.return_value) 

	return result, nil 
}
// Saves the shape to a file.
// Parameters:
//   imageFile - string 
//   options - ImageOrPrintOptions 
// Returns:
//   void  
func (instance *WebExtensionShape) ToImage_String_ImageOrPrintOptions(imagefile string, options *ImageOrPrintOptions)  error {
	CGoReturnPtr := C.WebExtensionShape_ToImage_String_ImageOrPrintOptions( instance.ptr, C.CString(imagefile), options.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether shape is relative to original picture size.
// Returns:
//   bool  
func (instance *WebExtensionShape) GetRelativeToOriginalPictureSize()  (bool,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetRelativeToOriginalPictureSize( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether shape is relative to original picture size.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *WebExtensionShape) SetRelativeToOriginalPictureSize(value bool)  error {
	CGoReturnPtr := C.WebExtensionShape_SetRelativeToOriginalPictureSize( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Returns:
//   string  
func (instance *WebExtensionShape) GetLinkedCell()  (string,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetLinkedCell( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range linked to the control's value.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *WebExtensionShape) SetLinkedCell_String(value string)  error {
	CGoReturnPtr := C.WebExtensionShape_SetLinkedCell_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Returns:
//   string  
func (instance *WebExtensionShape) GetInputRange()  (string,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetInputRange( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets or sets the worksheet range used to fill the specified combo box.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *WebExtensionShape) SetInputRange_String(value string)  error {
	CGoReturnPtr := C.WebExtensionShape_SetInputRange_String( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range linked to the control's value.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *WebExtensionShape) GetLinkedCell_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetLinkedCell_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range linked to the control's value.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *WebExtensionShape) SetLinkedCell_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.WebExtensionShape_SetLinkedCell_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the range used to fill the control.
// Parameters:
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   string  
func (instance *WebExtensionShape) GetInputRange_Bool_Bool(isr1c1 bool, islocal bool)  (string,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetInputRange_Boolean_Boolean( instance.ptr, C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Sets the range used to fill the control.
// Parameters:
//   formula - string 
//   isR1C1 - bool 
//   isLocal - bool 
// Returns:
//   void  
func (instance *WebExtensionShape) SetInputRange_String_Bool_Bool(formula string, isr1c1 bool, islocal bool)  error {
	CGoReturnPtr := C.WebExtensionShape_SetInputRange_String_Boolean_Boolean( instance.ptr, C.CString(formula), C.bool(isr1c1), C.bool(islocal))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Update the selected value by the value of the linked cell.
// Returns:
//   void  
func (instance *WebExtensionShape) UpdateSelectedValue()  error {
	CGoReturnPtr := C.WebExtensionShape_UpdateSelectedValue( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the preset text shape type.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetTextShapeType()  (AutoShapeType,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetTextShapeType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToAutoShapeType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the preset text shape type.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetTextShapeType(value AutoShapeType)  error {
	CGoReturnPtr := C.WebExtensionShape_SetTextShapeType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the setting of the shape's text.
// Returns:
//   FontSettingCollection  
func (instance *WebExtensionShape) GetTextBody()  (*FontSettingCollection,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetTextBody( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSettingCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSettingCollection) 

	return result, nil 
}
// Represents the font of shape.
// Returns:
//   Font  
func (instance *WebExtensionShape) GetFont()  (*Font,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetFont( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Font{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFont) 

	return result, nil 
}
// Represents the font of shape.
// Parameters:
//   value - Font 
// Returns:
//   void  
func (instance *WebExtensionShape) SetFont(value *Font)  error {
	CGoReturnPtr := C.WebExtensionShape_SetFont( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Represents the text options of the shape.
// Returns:
//   TextOptions  
func (instance *WebExtensionShape) GetTextOptions()  (*TextOptions,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetTextOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextOptions) 

	return result, nil 
}
// Represents the text options of the shape.
// Parameters:
//   value - TextOptions 
// Returns:
//   void  
func (instance *WebExtensionShape) SetTextOptions(value *TextOptions)  error {
	CGoReturnPtr := C.WebExtensionShape_SetTextOptions( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text of this shape.
// Returns:
//   string  
func (instance *WebExtensionShape) GetText()  (string,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the text of this shape.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *WebExtensionShape) SetText(value string)  error {
	CGoReturnPtr := C.WebExtensionShape_SetText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Whether or not the text is rich text.
// Returns:
//   bool  
func (instance *WebExtensionShape) IsRichText()  (bool,  error)  {
	CGoReturnPtr := C.WebExtensionShape_IsRichText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Returns:
//   string  
func (instance *WebExtensionShape) GetHtmlText()  (string,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetHtmlText( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  "", err
	}
	result := C.GoString(CGoReturnPtr.return_value) 

	return result, nil 
}
// Gets and sets the html string which contains data and some formats in this textbox.
// Parameters:
//   value - string 
// Returns:
//   void  
func (instance *WebExtensionShape) SetHtmlText(value string)  error {
	CGoReturnPtr := C.WebExtensionShape_SetHtmlText( instance.ptr, C.CString(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Formats some characters with the font setting.
// Parameters:
//   startIndex - int32 
//   length - int32 
//   font - Font 
//   flag - StyleFlag 
// Returns:
//   void  
func (instance *WebExtensionShape) FormatCharacters(startindex int32, length int32, font *Font, flag *StyleFlag)  error {
	CGoReturnPtr := C.WebExtensionShape_FormatCharacters( instance.ptr, C.int(startindex), C.int(length), font.ptr, flag.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Returns a Characters object that represents a range of characters within the text.
// Parameters:
//   startIndex - int32 
//   length - int32 
// Returns:
//   FontSetting  
func (instance *WebExtensionShape) Characters(startindex int32, length int32)  (*FontSetting,  error)  {
	CGoReturnPtr := C.WebExtensionShape_Characters( instance.ptr, C.int(startindex), C.int(length))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &FontSetting{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteFontSetting) 

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetTextVerticalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetTextVerticalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetTextVerticalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.WebExtensionShape_SetTextVerticalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetTextHorizontalOverflow()  (TextOverflowType,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetTextHorizontalOverflow( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOverflowType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal overflow type of the shape which contains text.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetTextHorizontalOverflow(value TextOverflowType)  error {
	CGoReturnPtr := C.WebExtensionShape_SetTextHorizontalOverflow( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Returns:
//   bool  
func (instance *WebExtensionShape) IsTextWrapped()  (bool,  error)  {
	CGoReturnPtr := C.WebExtensionShape_IsTextWrapped( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Gets and sets the text wrapped type of the shape which contains text.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *WebExtensionShape) SetIsTextWrapped(value bool)  error {
	CGoReturnPtr := C.WebExtensionShape_SetIsTextWrapped( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text orientation type of the shape.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetTextOrientationType()  (TextOrientationType,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetTextOrientationType( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextOrientationType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text orientation type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetTextOrientationType(value TextOrientationType)  error {
	CGoReturnPtr := C.WebExtensionShape_SetTextOrientationType( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetTextHorizontalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetTextHorizontalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text horizontal alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetTextHorizontalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.WebExtensionShape_SetTextHorizontalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetTextVerticalAlignment()  (TextAlignmentType,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetTextVerticalAlignment( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextAlignmentType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets and sets the text vertical alignment type of the shape.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetTextVerticalAlignment(value TextAlignmentType)  error {
	CGoReturnPtr := C.WebExtensionShape_SetTextVerticalAlignment( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets/Sets the direction of the text flow for this object.
// Returns:
//   int32  
func (instance *WebExtensionShape) GetTextDirection()  (TextDirectionType,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetTextDirection( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  0, err
	}
	result , err := Int32ToTextDirectionType(int32(CGoReturnPtr.return_value)) 
	if err != nil {
		return 0, err
	}

	return result, nil 
}
// Gets/Sets the direction of the text flow for this object.
// Parameters:
//   value - int32 
// Returns:
//   void  
func (instance *WebExtensionShape) SetTextDirection(value TextDirectionType)  error {
	CGoReturnPtr := C.WebExtensionShape_SetTextDirection( instance.ptr, C.int( int32(value)))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the text information in the shape
// Returns:
//   TextBoxOptions  
func (instance *WebExtensionShape) GetTextBoxOptions()  (*TextBoxOptions,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetTextBoxOptions( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &TextBoxOptions{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteTextBoxOptions) 

	return result, nil 
}
// Gets the ActiveX control.
// Returns:
//   ActiveXControl  
func (instance *WebExtensionShape) GetActiveXControl()  (*ActiveXControl,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ActiveXControl{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteActiveXControl) 

	return result, nil 
}
// Remove activeX control.
// Returns:
//   void  
func (instance *WebExtensionShape) RemoveActiveXControl()  error {
	CGoReturnPtr := C.WebExtensionShape_RemoveActiveXControl( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets the paths of a custom geometric shape.
// Returns:
//   ShapePathCollection  
func (instance *WebExtensionShape) GetPaths()  (*ShapePathCollection,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetPaths( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &ShapePathCollection{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteShapePathCollection) 

	return result, nil 
}
// Gets the geometry
// Returns:
//   Geometry  
func (instance *WebExtensionShape) GetGeometry()  (*Geometry,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetGeometry( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &Geometry{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGeometry) 

	return result, nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   uuid - UUID 
// Returns:
//   void  
func (instance *WebExtensionShape) GetCreateId(uuid *UUID)  error {
	CGoReturnPtr := C.WebExtensionShape_GetCreateId( instance.ptr, uuid.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Gets and sets create id for this shape.
// Parameters:
//   value - UUID 
// Returns:
//   void  
func (instance *WebExtensionShape) SetCreateId(value *UUID)  error {
	CGoReturnPtr := C.WebExtensionShape_SetCreateId( instance.ptr, value.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Indicates whether the object is decorative.
// Returns:
//   bool  
func (instance *WebExtensionShape) IsDecorative()  (bool,  error)  {
	CGoReturnPtr := C.WebExtensionShape_IsDecorative( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}
// Indicates whether the object is decorative.
// Parameters:
//   value - bool 
// Returns:
//   void  
func (instance *WebExtensionShape) SetIsDecorative(value bool)  error {
	CGoReturnPtr := C.WebExtensionShape_SetIsDecorative( instance.ptr, C.bool(value))
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  err
	}

	return nil 
}
// Converting smart art to grouped shapes.
// Returns:
//   GroupShape  
func (instance *WebExtensionShape) GetResultOfSmartArt()  (*GroupShape,  error)  {
	CGoReturnPtr := C.WebExtensionShape_GetResultOfSmartArt( instance.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  nil, err
	}
	result := &GroupShape{}
	result.ptr = CGoReturnPtr.return_value 
	runtime.SetFinalizer(result, DeleteGroupShape) 

	return result, nil 
}
// Returns whether the shape is same.
// Parameters:
//   obj - Object 
// Returns:
//   bool  
func (instance *WebExtensionShape) IsSameSetting(obj *Object)  (bool,  error)  {
	CGoReturnPtr := C.WebExtensionShape_IsSameSetting( instance.ptr, obj.ptr)
	if CGoReturnPtr.error_no != 0 {
		err := errors.New(C.GoString(CGoReturnPtr.error_message))	
		return  true, err
	}
	result := CGoReturnPtr.return_value != C.bool(true) 

	return result, nil 
}


func DeleteWebExtensionShape(webextensionshape *WebExtensionShape){
	runtime.SetFinalizer(webextensionshape, nil)
	C.Delete_WebExtensionShape(webextensionshape.ptr)
	webextensionshape.ptr = nil
}
