// Copyright (c) 2001-2025 Aspose Pty Ltd. All Rights Reserved.
// Powered by Aspose.Cells.

#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>
#ifdef _WIN32
#include <guiddef.h>
#else
#include <string.h>
#endif

#define ASPOSE_CELLS_LIBRARY

#ifdef _WIN32
	#ifdef ASPOSE_CELLS_LIBRARY
		#define ASPOSE_CELLS_API __declspec(dllexport)
		#define ASPOSE_CELLS_API2
	#else
		#define ASPOSE_CELLS_API __declspec(dllimport)
		#define ASPOSE_CELLS_API2
	#endif
	#define ASPOSE_CELLS_API3
#else
	#ifdef ASPOSE_CELLS_LIBRARY
		#define ASPOSE_CELLS_API 
		#define ASPOSE_CELLS_API2 __attribute__ ((visibility("default")))
	#else
		#define ASPOSE_CELLS_API
		#define ASPOSE_CELLS_API2
	#endif
	#define ASPOSE_CELLS_API3 __attribute__ ((visibility("default")))
#endif

#ifndef ASPOSE_CELLS_CGO
#define ASPOSE_CELLS_CGO

#ifdef __cplusplus
extern "C" {
#endif
#ifdef _WIN32
    ASPOSE_CELLS_API typedef GUID UUID;
#endif    
#ifdef _WIN32
    ASPOSE_CELLS_API typedef struct {
        int return_value;
        int error_no;
        char* error_message;
    } c_return_int_value;
    ASPOSE_CELLS_API typedef struct {
        bool return_value;
        int error_no;
        char* error_message;
    } c_return_bool_value;
    ASPOSE_CELLS_API typedef struct {
        char return_value;
        int error_no;
        char* error_message;
    } c_return_char_value;
    ASPOSE_CELLS_API typedef struct {
        float return_value;
        int error_no;
        char* error_message;
    } c_return_float_value;    
    ASPOSE_CELLS_API typedef struct {
        double return_value;
        int error_no;
        char* error_message;
    } c_return_double_value;
    ASPOSE_CELLS_API typedef struct {
        long return_value;
        int error_no;
        char* error_message;
    } c_return_long_value;

    ASPOSE_CELLS_API typedef struct {
        int error_no;
        char* error_message;
    } c_return_void_value;

    ASPOSE_CELLS_API typedef struct {
        char* return_value;
        int data_length;
        int error_no;
        char* error_message;
    } c_return_string_value;

    ASPOSE_CELLS_API typedef struct {
        void* return_value;
        int column_length;
        int row_length;
        size_t size;
        int error_no;
        char* error_message;
    } c_return_ptr_value;
#else
    typedef struct {
        int return_value;
        int error_no;
        char* error_message;
    } ASPOSE_CELLS_API c_return_int_value;
    typedef struct {
        bool return_value;
        int error_no;
        char* error_message;
    } ASPOSE_CELLS_API c_return_bool_value;
    typedef struct {
        char return_value;
        int error_no;
        char* error_message;
    } ASPOSE_CELLS_API c_return_char_value;
    typedef struct {
        float return_value;
        int error_no;
        char* error_message;
    } ASPOSE_CELLS_API c_return_float_value;    
    typedef struct {
        double return_value;
        int error_no;
        char* error_message;
    } ASPOSE_CELLS_API c_return_double_value;
    typedef struct {
        long return_value;
        int error_no;
        char* error_message;
    } ASPOSE_CELLS_API c_return_long_value;

    typedef struct {
        int error_no;
        char* error_message;
    } ASPOSE_CELLS_API c_return_void_value;

    typedef struct {
        char* return_value;
        int data_length;
        int error_no;
        char* error_message;
    } ASPOSE_CELLS_API c_return_string_value;

    typedef struct {
        void* return_value;
        int column_length;
        int row_length;
        size_t size;
        int error_no;
        char* error_message;
    } ASPOSE_CELLS_API c_return_ptr_value;

#endif
    ASPOSE_CELLS_API void Startup();
    /*****************Class Stream ****************/
   ASPOSE_CELLS_API void* Get_Date(int year, int month, int day, int hour, int minute, int second);
   ASPOSE_CELLS_API void Delete_GetDate(void* date);
   ASPOSE_CELLS_API c_return_ptr_value* New_Object_Null();

   /**************Class AboveAverage *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_AboveAverage();

   ASPOSE_CELLS_API c_return_bool_value* AboveAverage_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* AboveAverage_IsAboveAverage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AboveAverage_SetIsAboveAverage(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* AboveAverage_IsEqualAverage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AboveAverage_SetIsEqualAverage(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* AboveAverage_GetStdDev(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AboveAverage_SetStdDev(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_AboveAverage( void* instance_ptr);

   /**************Class AbstractCalculationEngine *****************/


   ASPOSE_CELLS_API c_return_bool_value* AbstractCalculationEngine_IsParamLiteralRequired(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* AbstractCalculationEngine_IsParamArrayModeRequired(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* AbstractCalculationEngine_GetProcessBuiltInFunctions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* AbstractCalculationEngine_ForceRecalculate(void* instance_ptr, char* functionname);


   ASPOSE_CELLS_API void Delete_AbstractCalculationEngine( void* instance_ptr);

   /**************Class AbstractFormulaChangeMonitor *****************/


   ASPOSE_CELLS_API c_return_void_value* AbstractFormulaChangeMonitor_OnCellFormulaChanged(void* instance_ptr, int sheetindex, int rowindex, int columnindex);


   ASPOSE_CELLS_API void Delete_AbstractFormulaChangeMonitor( void* instance_ptr);

   /**************Class AbstractInterruptMonitor *****************/


   ASPOSE_CELLS_API c_return_bool_value* AbstractInterruptMonitor_GetTerminateWithoutException(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_AbstractInterruptMonitor( void* instance_ptr);

   /**************Class AbstractTextLoadOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_AbstractTextLoadOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* AbstractTextLoadOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* AbstractTextLoadOptions_GetEncoding(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetEncoding(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* AbstractTextLoadOptions_GetLoadStyleStrategy(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetLoadStyleStrategy(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* AbstractTextLoadOptions_GetConvertNumericData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetConvertNumericData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* AbstractTextLoadOptions_GetConvertDateTimeData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetConvertDateTimeData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* AbstractTextLoadOptions_GetKeepPrecision(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetKeepPrecision(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* AbstractTextLoadOptions_GetLoadFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* AbstractTextLoadOptions_GetPassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetPassword(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* AbstractTextLoadOptions_GetParsingFormulaOnOpen(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetParsingFormulaOnOpen(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* AbstractTextLoadOptions_GetParsingPivotCachedRecords(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetParsingPivotCachedRecords(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetPaperSize(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_int_value* AbstractTextLoadOptions_GetLanguageCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetLanguageCode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* AbstractTextLoadOptions_GetRegion(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetRegion(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* AbstractTextLoadOptions_GetDefaultStyleSettings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* AbstractTextLoadOptions_GetInterruptMonitor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetInterruptMonitor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* AbstractTextLoadOptions_GetIgnoreNotPrinted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetIgnoreNotPrinted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* AbstractTextLoadOptions_GetCheckDataValid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetCheckDataValid(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* AbstractTextLoadOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* AbstractTextLoadOptions_GetKeepUnparsedData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetKeepUnparsedData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* AbstractTextLoadOptions_GetLoadFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetLoadFilter(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* AbstractTextLoadOptions_GetMemorySetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetMemorySetting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* AbstractTextLoadOptions_GetAutoFitterOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetAutoFitterOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* AbstractTextLoadOptions_GetAutoFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetAutoFilter(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* AbstractTextLoadOptions_GetFontConfigs(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetFontConfigs(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* AbstractTextLoadOptions_GetIgnoreUselessShapes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetIgnoreUselessShapes(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* AbstractTextLoadOptions_GetPreservePaddingSpacesInFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AbstractTextLoadOptions_SetPreservePaddingSpacesInFormula(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_AbstractTextLoadOptions( void* instance_ptr);

   /**************Class AdvancedFilter *****************/


   ASPOSE_CELLS_API c_return_bool_value* AdvancedFilter_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* AdvancedFilter_GetListRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* AdvancedFilter_GetCriteriaRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* AdvancedFilter_GetCopyToRange(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_AdvancedFilter( void* instance_ptr);

   /**************Class AutoFilter *****************/


   ASPOSE_CELLS_API c_return_bool_value* AutoFilter_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* AutoFilter_GetSorter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AutoFilter_SetRange_Integer_Integer_Integer(void* instance_ptr, int row, int startcolumn, int endcolumn);
   ASPOSE_CELLS_API c_return_ptr_value* AutoFilter_GetCellArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* AutoFilter_GetCellArea_Boolean(void* instance_ptr, bool refreshappliedrange);
   ASPOSE_CELLS_API c_return_string_value* AutoFilter_GetRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AutoFilter_SetRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* AutoFilter_AddFilter(void* instance_ptr, int fieldindex, char* criteria);
   ASPOSE_CELLS_API c_return_void_value* AutoFilter_AddDateFilter(void* instance_ptr, int fieldindex, int datetimegroupingtype, int year, int month, int day, int hour, int minute, int second);
   ASPOSE_CELLS_API c_return_void_value* AutoFilter_RemoveDateFilter(void* instance_ptr, int fieldindex, int datetimegroupingtype, int year, int month, int day, int hour, int minute, int second);
   ASPOSE_CELLS_API c_return_void_value* AutoFilter_RemoveFilter_Integer_String(void* instance_ptr, int fieldindex, char* criteria);
   ASPOSE_CELLS_API c_return_void_value* AutoFilter_Filter(void* instance_ptr, int fieldindex, char* criteria);
   ASPOSE_CELLS_API c_return_void_value* AutoFilter_FilterTop10(void* instance_ptr, int fieldindex, bool istop, bool ispercent, int itemcount);
   ASPOSE_CELLS_API c_return_void_value* AutoFilter_Dynamic_Filter(void* instance_ptr, int fieldindex, int dynamicfiltertype);
   ASPOSE_CELLS_API c_return_void_value* AutoFilter_AddFontColorFilter(void* instance_ptr, int fieldindex, void* color);
   ASPOSE_CELLS_API c_return_void_value* AutoFilter_AddFillColorFilter(void* instance_ptr, int fieldindex, int pattern, void* foregroundcolor, void* backgroundcolor);
   ASPOSE_CELLS_API c_return_void_value* AutoFilter_AddIconFilter(void* instance_ptr, int fieldindex, int iconsettype, int iconid);
   ASPOSE_CELLS_API c_return_void_value* AutoFilter_MatchBlanks(void* instance_ptr, int fieldindex);
   ASPOSE_CELLS_API c_return_void_value* AutoFilter_MatchNonBlanks(void* instance_ptr, int fieldindex);
   ASPOSE_CELLS_API c_return_void_value* AutoFilter_Custom_Integer_FilterOperatorType_Object(void* instance_ptr, int fieldindex, int operatortype1, void* criteria1);
   ASPOSE_CELLS_API c_return_void_value* AutoFilter_Custom_Integer_FilterOperatorType_Object_Boolean_FilterOperatorType_Object(void* instance_ptr, int fieldindex, int operatortype1, void* criteria1, bool isand, int operatortype2, void* criteria2);
   ASPOSE_CELLS_API c_return_void_value* AutoFilter_ShowAll(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AutoFilter_RemoveFilter_Integer(void* instance_ptr, int fieldindex);
   ASPOSE_CELLS_API c_return_ptr_value* AutoFilter_Refresh(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* AutoFilter_Refresh_Boolean(void* instance_ptr, bool hiderows);
   ASPOSE_CELLS_API c_return_bool_value* AutoFilter_GetShowFilterButton(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AutoFilter_SetShowFilterButton(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* AutoFilter_GetFilterColumns(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_AutoFilter( void* instance_ptr);

   /**************Class AutoFitterOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_AutoFitterOptions();

   ASPOSE_CELLS_API c_return_bool_value* AutoFitterOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* AutoFitterOptions_GetDefaultEditLanguage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AutoFitterOptions_SetDefaultEditLanguage(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* AutoFitterOptions_GetAutoFitMergedCellsType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AutoFitterOptions_SetAutoFitMergedCellsType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* AutoFitterOptions_GetOnlyAuto(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AutoFitterOptions_SetOnlyAuto(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* AutoFitterOptions_GetIgnoreHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AutoFitterOptions_SetIgnoreHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_double_value* AutoFitterOptions_GetMaxRowHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AutoFitterOptions_SetMaxRowHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* AutoFitterOptions_GetAutoFitWrappedTextType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AutoFitterOptions_SetAutoFitWrappedTextType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* AutoFitterOptions_GetFormatStrategy(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AutoFitterOptions_SetFormatStrategy(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* AutoFitterOptions_GetForRendering(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AutoFitterOptions_SetForRendering(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_AutoFitterOptions( void* instance_ptr);

   /**************Class Border *****************/


   ASPOSE_CELLS_API c_return_bool_value* Border_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Border_GetThemeColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Border_SetThemeColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Border_GetColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Border_SetColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* Border_GetArgbColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Border_SetArgbColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Border_GetLineStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Border_SetLineStyle(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_Border( void* instance_ptr);

   /**************Class BorderCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* BorderCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* BorderCollection_Get(void* instance_ptr, int bordertype);
   ASPOSE_CELLS_API c_return_void_value* BorderCollection_SetColor(void* instance_ptr, void* color);
   ASPOSE_CELLS_API c_return_void_value* BorderCollection_SetStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* BorderCollection_GetDiagonalColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BorderCollection_SetDiagonalColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* BorderCollection_GetDiagonalStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BorderCollection_SetDiagonalStyle(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_BorderCollection( void* instance_ptr);

   /**************Class CalculationCell *****************/


   ASPOSE_CELLS_API c_return_bool_value* CalculationCell_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CalculationCell_SetCalculatedValue(void* instance_ptr, void* v);
   ASPOSE_CELLS_API c_return_ptr_value* CalculationCell_GetWorkbook(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CalculationCell_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CalculationCell_GetCellRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CalculationCell_GetCellColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CalculationCell_GetCell(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_CalculationCell( void* instance_ptr);

   /**************Class CalculationData *****************/


   ASPOSE_CELLS_API c_return_bool_value* CalculationData_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CalculationData_GetCalculatedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CalculationData_SetCalculatedValue(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* CalculationData_GetWorkbook(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CalculationData_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CalculationData_GetCellRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CalculationData_GetCellColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CalculationData_GetCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* CalculationData_GetFunctionName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CalculationData_GetParamCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CalculationData_GetParamValue(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* CalculationData_GetParamValueInArrayMode(void* instance_ptr, int index, int maxrowcount, int maxcolumncount);
   ASPOSE_CELLS_API c_return_string_value* CalculationData_GetParamText(void* instance_ptr, int index);


   ASPOSE_CELLS_API void Delete_CalculationData( void* instance_ptr);

   /**************Class CalculationOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_CalculationOptions();

   ASPOSE_CELLS_API c_return_bool_value* CalculationOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CalculationOptions_GetIgnoreError(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CalculationOptions_SetIgnoreError(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CalculationOptions_GetRecursive(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CalculationOptions_SetRecursive(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* CalculationOptions_GetCustomEngine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CalculationOptions_SetCustomEngine(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* CalculationOptions_GetCalcStackSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CalculationOptions_SetCalcStackSize(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CalculationOptions_GetPrecisionStrategy(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CalculationOptions_SetPrecisionStrategy(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CalculationOptions_GetLinkedDataSources(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CalculationOptions_SetLinkedDataSources(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_int_value* CalculationOptions_GetCharacterEncoding(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CalculationOptions_SetCharacterEncoding(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_CalculationOptions( void* instance_ptr);

   /**************Class Cell *****************/


   ASPOSE_CELLS_API c_return_bool_value* Cell_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cell_Calculate(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cell_PutValue_Boolean(void* instance_ptr, bool boolvalue);
   ASPOSE_CELLS_API c_return_void_value* Cell_PutValue_Integer(void* instance_ptr, int intvalue);
   ASPOSE_CELLS_API c_return_void_value* Cell_PutValue_Double(void* instance_ptr, double doublevalue);
   ASPOSE_CELLS_API c_return_void_value* Cell_PutValue_String_Boolean_Boolean(void* instance_ptr, char* stringvalue, bool isconverted, bool setstyle);
   ASPOSE_CELLS_API c_return_void_value* Cell_PutValue_String_Boolean(void* instance_ptr, char* stringvalue, bool isconverted);
   ASPOSE_CELLS_API c_return_void_value* Cell_PutValue_String(void* instance_ptr, char* stringvalue);
   ASPOSE_CELLS_API c_return_void_value* Cell_PutValue_Date(void* instance_ptr, void* datetime);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_GetDateTimeValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cell_PutValue_Object(void* instance_ptr, void* objectvalue);
   ASPOSE_CELLS_API c_return_int_value* Cell_GetRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Cell_GetColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Cell_IsFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Cell_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Cell_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Cell_IsErrorValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Cell_IsNumericValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Cell_GetStringValue_CellValueFormatStrategy(void* instance_ptr, int formatstrategy);
   ASPOSE_CELLS_API c_return_string_value* Cell_GetStringValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Cell_GetNumberCategoryType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Cell_GetDisplayStringValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Cell_GetIntValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Cell_GetDoubleValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_float_value* Cell_GetFloatValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Cell_GetBoolValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Cell_GetWidthOfValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Cell_GetHeightOfValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_GetDisplayStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_GetDisplayStyle_Boolean(void* instance_ptr, bool includemergedborders);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_GetFormatConditions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_GetStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_GetStyle_Boolean(void* instance_ptr, bool checkborders);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetStyle_Style(void* instance_ptr, void* style);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetStyle_Style_Boolean(void* instance_ptr, void* style, bool explicitflag);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetStyle_Style_StyleFlag(void* instance_ptr, void* style, void* flag);
   ASPOSE_CELLS_API c_return_bool_value* Cell_GetHasCustomStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Cell_GetSharedStyleIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Cell_GetFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetFormula_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Cell_GetFormulaLocal(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetFormulaLocal(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Cell_GetR1C1Formula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetR1C1Formula(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetFormula_String_Object(void* instance_ptr, char* formula, void* value);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetFormula_String_FormulaParseOptions(void* instance_ptr, char* formula, void* options);
   ASPOSE_CELLS_API c_return_string_value* Cell_GetFormula_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetFormula_String_FormulaParseOptions_Object(void* instance_ptr, char* formula, void* options, void* value);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetArrayFormula_String_Integer_Integer(void* instance_ptr, char* arrayformula, int rownumber, int columnnumber);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetArrayFormula_String_Integer_Integer_FormulaParseOptions(void* instance_ptr, char* arrayformula, int rownumber, int columnnumber, void* options);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetArrayFormula_String_Integer_Integer_FormulaParseOptions_Object2Array(void* instance_ptr, char* arrayformula, int rownumber, int columnnumber, void* options, void* values, int values_length, int values_column_length);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetSharedFormula_String_Integer_Integer(void* instance_ptr, char* sharedformula, int rownumber, int columnnumber);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetSharedFormula_String_Integer_Integer_FormulaParseOptions(void* instance_ptr, char* sharedformula, int rownumber, int columnnumber, void* options);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetSharedFormula_String_Integer_Integer_FormulaParseOptions_Object2Array(void* instance_ptr, char* sharedformula, int rownumber, int columnnumber, void* options, void* values, int values_length, int values_column_length);
   ASPOSE_CELLS_API c_return_bool_value* Cell_GetContainsExternalLink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_GetPrecedents(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_GetDependents(void* instance_ptr, bool isall);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_GetPrecedentsInCalculation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_GetDependentsInCalculation(void* instance_ptr, bool recursive);
   ASPOSE_CELLS_API c_return_bool_value* Cell_IsArrayHeader(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Cell_IsDynamicArrayFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_GetArrayRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Cell_IsArrayFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Cell_IsSharedFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Cell_IsTableFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_SetDynamicArrayFormula_String_FormulaParseOptions_Boolean(void* instance_ptr, char* arrayformula, void* options, bool calculatevalue);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_SetDynamicArrayFormula_String_FormulaParseOptions_Object2Array_Boolean_Boolean(void* instance_ptr, char* arrayformula, void* options, void* values, int values_length, int values_column_length, bool calculaterange, bool calculatevalue);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_SetDynamicArrayFormula_String_FormulaParseOptions_Object2Array_Boolean_Boolean_CalculationOptions(void* instance_ptr, char* arrayformula, void* options, void* values, int values_length, int values_column_length, bool calculaterange, bool calculatevalue, void* copts);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetTableFormula_Integer_Integer_String_String_Object2Array(void* instance_ptr, int rownumber, int columnnumber, char* rowinputcell, char* columninputcell, void* values, int values_length, int values_column_length);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetTableFormula_Integer_Integer_String_Boolean_Object2Array(void* instance_ptr, int rownumber, int columnnumber, char* inputcell, bool isrowinput, void* values, int values_length, int values_column_length);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetTableFormula_Integer_Integer_Integer_Integer_Integer_Integer_Object2Array(void* instance_ptr, int rownumber, int columnnumber, int rowindexofrowinputcell, int columnindexofrowinputcell, int rowindexofcolumninputcell, int columnindexofcolumninputcell, void* values, int values_length, int values_column_length);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetTableFormula_Integer_Integer_Integer_Integer_Boolean_Object2Array(void* instance_ptr, int rownumber, int columnnumber, int rowindexofinputcell, int columnindexofinputcell, bool isrowinput, void* values, int values_length, int values_column_length);
   ASPOSE_CELLS_API c_return_void_value* Cell_RemoveArrayFormula(void* instance_ptr, bool leavenormalformula);
   ASPOSE_CELLS_API c_return_void_value* Cell_Copy(void* instance_ptr, void* cell);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetValue(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* Cell_IsStyleSet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_void_value* Cell_Replace(void* instance_ptr, char* placeholder, char* newvalue, void* options);
   ASPOSE_CELLS_API c_return_void_value* Cell_InsertText(void* instance_ptr, int index, char* text);
   ASPOSE_CELLS_API c_return_bool_value* Cell_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_GetCharacters(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_GetCharacters_Boolean(void* instance_ptr, bool flag);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetCharacters(void* instance_ptr, void* characters, int characters_length);
   ASPOSE_CELLS_API c_return_bool_value* Cell_IsMerged(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_GetMergedRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_GetComment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Cell_GetHtmlString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetHtmlString(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Cell_GetHtmlString_Boolean(void* instance_ptr, bool html5);
   ASPOSE_CELLS_API c_return_string_value* Cell_ToString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Cell_ToJson(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Cell_Equals_Object(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* Cell_GetHashCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Cell_Equals_Cell(void* instance_ptr, void* cell);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_GetConditionalFormattingResult(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_GetValidation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Cell_GetValidationValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_GetTable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Cell_IsCheckBoxStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetIsCheckBoxStyle(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_GetRichValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cell_GetEmbeddedImage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cell_SetEmbeddedImage(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_void_value* Cell_Dispose(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_Cell( void* instance_ptr);

   /**************Class CellArea *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_CellArea();

   ASPOSE_CELLS_API c_return_ptr_value* CellArea_CreateCellArea_Integer_Integer_Integer_Integer(int startrow, int startcolumn, int endrow, int endcolumn);
   ASPOSE_CELLS_API c_return_ptr_value* CellArea_CreateCellArea_String_String(char* startcellname, char* endcellname);
   ASPOSE_CELLS_API c_return_string_value* CellArea_ToString(void* instance_ptr);

   ASPOSE_CELLS_API c_return_int_value* CellArea_Get_StartRow( void* instance_ptr );
   ASPOSE_CELLS_API void CellArea_Set_StartRow( void* instance_ptr, int value );
   ASPOSE_CELLS_API c_return_int_value* CellArea_Get_EndRow( void* instance_ptr );
   ASPOSE_CELLS_API void CellArea_Set_EndRow( void* instance_ptr, int value );
   ASPOSE_CELLS_API c_return_int_value* CellArea_Get_StartColumn( void* instance_ptr );
   ASPOSE_CELLS_API void CellArea_Set_StartColumn( void* instance_ptr, int value );
   ASPOSE_CELLS_API c_return_int_value* CellArea_Get_EndColumn( void* instance_ptr );
   ASPOSE_CELLS_API void CellArea_Set_EndColumn( void* instance_ptr, int value );

   ASPOSE_CELLS_API void Delete_CellArea( void* instance_ptr);

   /**************Class CellRichValue *****************/


   ASPOSE_CELLS_API c_return_bool_value* CellRichValue_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CellRichValue_GetErrorValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CellRichValue_GetImage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* CellRichValue_GetAltText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellRichValue_SetAltText(void* instance_ptr, char* value);


   ASPOSE_CELLS_API void Delete_CellRichValue( void* instance_ptr);

   /**************Class Cells *****************/


   ASPOSE_CELLS_API c_return_bool_value* Cells_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_GetOdsCellFields(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cells_Dispose(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Cells_GetCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Cells_GetCountLarge(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_GetEnumerator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_GetRows(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_GetMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_CheckCell(void* instance_ptr, int row, int column);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_CheckRow(void* instance_ptr, int row);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_CheckColumn(void* instance_ptr, int columnindex);
   ASPOSE_CELLS_API c_return_bool_value* Cells_IsRowHidden(void* instance_ptr, int rowindex);
   ASPOSE_CELLS_API c_return_bool_value* Cells_IsColumnHidden(void* instance_ptr, int columnindex);
   ASPOSE_CELLS_API c_return_void_value* Cells_AddRange(void* instance_ptr, void* rangeobject);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_CreateRange_String_String(void* instance_ptr, char* upperleftcell, char* lowerrightcell);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_CreateRange_Integer_Integer_Integer_Integer(void* instance_ptr, int firstrow, int firstcolumn, int totalrows, int totalcolumns);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_CreateRange_String(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_CreateRange_Integer_Integer_Boolean(void* instance_ptr, int firstindex, int number, bool isvertical);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_Get_Integer_Integer(void* instance_ptr, int row, int column);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_Get_String(void* instance_ptr, char* cellname);
   ASPOSE_CELLS_API c_return_bool_value* Cells_GetMultiThreadReading(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cells_SetMultiThreadReading(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Cells_GetMemorySetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cells_SetMemorySetting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* Cells_Clear(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_GetStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cells_SetStyle(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_double_value* Cells_GetStandardWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cells_SetStandardWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Cells_GetStandardWidthPixels(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cells_SetStandardWidthPixels(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Cells_GetStandardWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cells_SetStandardWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Cells_GetStandardHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cells_SetStandardHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Cells_GetStandardHeightPixels(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cells_SetStandardHeightPixels(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Cells_GetStandardHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cells_SetStandardHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_void_value* Cells_ImportFormulaArray(void* instance_ptr, void* stringarray, int stringarray_length, int firstrow, int firstcolumn, bool isvertical);
   ASPOSE_CELLS_API c_return_int_value* Cells_TextToColumns(void* instance_ptr, int row, int column, int totalrows, void* options);
   ASPOSE_CELLS_API c_return_void_value* Cells_ImportCSV_String_String_Boolean_Integer_Integer(void* instance_ptr, char* filename, char* splitter, bool convertnumericdata, int firstrow, int firstcolumn);
   ASPOSE_CELLS_API c_return_void_value* Cells_ImportCSV_Stream_String_Boolean_Integer_Integer(void* instance_ptr, void* stream, int stream_length, char* splitter, bool convertnumericdata, int firstrow, int firstcolumn);
   ASPOSE_CELLS_API c_return_void_value* Cells_ImportCSV_String_TxtLoadOptions_Integer_Integer(void* instance_ptr, char* filename, void* options, int firstrow, int firstcolumn);
   ASPOSE_CELLS_API c_return_void_value* Cells_ImportCSV_Stream_TxtLoadOptions_Integer_Integer(void* instance_ptr, void* stream, int stream_length, void* options, int firstrow, int firstcolumn);
   ASPOSE_CELLS_API c_return_bool_value* Cells_GetPreserveString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cells_SetPreserveString(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* Cells_Merge_Integer_Integer_Integer_Integer(void* instance_ptr, int firstrow, int firstcolumn, int totalrows, int totalcolumns);
   ASPOSE_CELLS_API c_return_void_value* Cells_Merge_Integer_Integer_Integer_Integer_Boolean(void* instance_ptr, int firstrow, int firstcolumn, int totalrows, int totalcolumns, bool mergeconflict);
   ASPOSE_CELLS_API c_return_void_value* Cells_Merge_Integer_Integer_Integer_Integer_Boolean_Boolean(void* instance_ptr, int firstrow, int firstcolumn, int totalrows, int totalcolumns, bool checkconflict, bool mergeconflict);
   ASPOSE_CELLS_API c_return_void_value* Cells_UnMerge(void* instance_ptr, int firstrow, int firstcolumn, int totalrows, int totalcolumns);
   ASPOSE_CELLS_API c_return_void_value* Cells_ClearMergedCells(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cells_HideRow(void* instance_ptr, int row);
   ASPOSE_CELLS_API c_return_void_value* Cells_UnhideRow(void* instance_ptr, int row, double height);
   ASPOSE_CELLS_API c_return_void_value* Cells_HideRows(void* instance_ptr, int row, int totalrows);
   ASPOSE_CELLS_API c_return_void_value* Cells_UnhideRows(void* instance_ptr, int row, int totalrows, double height);
   ASPOSE_CELLS_API c_return_void_value* Cells_SetRowHeightPixel(void* instance_ptr, int row, int pixels);
   ASPOSE_CELLS_API c_return_void_value* Cells_SetRowHeightInch(void* instance_ptr, int row, double inches);
   ASPOSE_CELLS_API c_return_void_value* Cells_SetRowHeight(void* instance_ptr, int row, double height);
   ASPOSE_CELLS_API c_return_double_value* Cells_GetRowHeight_Integer_Boolean_CellsUnitType(void* instance_ptr, int row, bool isoriginal, int unittype);
   ASPOSE_CELLS_API c_return_double_value* Cells_GetColumnWidth_Integer_Boolean_CellsUnitType(void* instance_ptr, int column, bool isoriginal, int unittype);
   ASPOSE_CELLS_API c_return_void_value* Cells_HideColumn(void* instance_ptr, int column);
   ASPOSE_CELLS_API c_return_void_value* Cells_UnhideColumn(void* instance_ptr, int column, double width);
   ASPOSE_CELLS_API c_return_void_value* Cells_HideColumns(void* instance_ptr, int column, int totalcolumns);
   ASPOSE_CELLS_API c_return_void_value* Cells_UnhideColumns(void* instance_ptr, int column, int totalcolumns, double width);
   ASPOSE_CELLS_API c_return_double_value* Cells_GetRowHeight_Integer(void* instance_ptr, int row);
   ASPOSE_CELLS_API c_return_double_value* Cells_GetViewRowHeight(void* instance_ptr, int row);
   ASPOSE_CELLS_API c_return_double_value* Cells_GetRowHeightInch(void* instance_ptr, int row);
   ASPOSE_CELLS_API c_return_double_value* Cells_GetViewRowHeightInch(void* instance_ptr, int row);
   ASPOSE_CELLS_API c_return_int_value* Cells_GetRowHeightPixel(void* instance_ptr, int row);
   ASPOSE_CELLS_API c_return_void_value* Cells_SetColumnWidthPixel(void* instance_ptr, int column, int pixels);
   ASPOSE_CELLS_API c_return_void_value* Cells_SetColumnWidthInch(void* instance_ptr, int column, double inches);
   ASPOSE_CELLS_API c_return_void_value* Cells_SetColumnWidth(void* instance_ptr, int column, double width);
   ASPOSE_CELLS_API c_return_int_value* Cells_GetColumnWidthPixel(void* instance_ptr, int column);
   ASPOSE_CELLS_API c_return_double_value* Cells_GetColumnWidth_Integer(void* instance_ptr, int column);
   ASPOSE_CELLS_API c_return_int_value* Cells_GetViewColumnWidthPixel(void* instance_ptr, int column);
   ASPOSE_CELLS_API c_return_void_value* Cells_SetViewColumnWidthPixel(void* instance_ptr, int column, int pixels);
   ASPOSE_CELLS_API c_return_int_value* Cells_GetMinRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Cells_GetMaxRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Cells_GetMinColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Cells_GetMaxColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Cells_GetMinDataRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Cells_GetMaxDataRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Cells_GetMinDataColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Cells_GetMaxDataColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Cells_GetLastDataRow(void* instance_ptr, int column);
   ASPOSE_CELLS_API c_return_bool_value* Cells_IsDefaultRowHeightMatched(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cells_SetIsDefaultRowHeightMatched(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Cells_IsDefaultRowHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cells_SetIsDefaultRowHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_GetColumns(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cells_ApplyColumnStyle(void* instance_ptr, int column, void* style, void* flag);
   ASPOSE_CELLS_API c_return_void_value* Cells_ApplyRowStyle(void* instance_ptr, int row, void* style, void* flag);
   ASPOSE_CELLS_API c_return_void_value* Cells_ApplyStyle(void* instance_ptr, void* style, void* flag);
   ASPOSE_CELLS_API c_return_void_value* Cells_CopyColumns_Cells_Integer_Integer_Integer_PasteOptions(void* instance_ptr, void* sourcecells0, int sourcecolumnindex, int destinationcolumnindex, int columnnumber, void* pasteoptions);
   ASPOSE_CELLS_API c_return_void_value* Cells_CopyColumn(void* instance_ptr, void* sourcecells, int sourcecolumnindex, int destinationcolumnindex);
   ASPOSE_CELLS_API c_return_void_value* Cells_CopyColumns_Cells_Integer_Integer_Integer(void* instance_ptr, void* sourcecells0, int sourcecolumnindex, int destinationcolumnindex, int columnnumber);
   ASPOSE_CELLS_API c_return_void_value* Cells_CopyColumns_Cells_Integer_Integer_Integer_Integer(void* instance_ptr, void* sourcecells, int sourcecolumnindex, int sourcetotalcolumns, int destinationcolumnindex, int destinationtotalcolumns);
   ASPOSE_CELLS_API c_return_void_value* Cells_CopyRow(void* instance_ptr, void* sourcecells, int sourcerowindex, int destinationrowindex);
   ASPOSE_CELLS_API c_return_void_value* Cells_CopyRows_Cells_Integer_Integer_Integer(void* instance_ptr, void* sourcecells, int sourcerowindex, int destinationrowindex, int rownumber);
   ASPOSE_CELLS_API c_return_void_value* Cells_CopyRows_Cells_Integer_Integer_Integer_CopyOptions(void* instance_ptr, void* sourcecells0, int sourcerowindex, int destinationrowindex, int rownumber, void* copyoptions);
   ASPOSE_CELLS_API c_return_void_value* Cells_CopyRows_Cells_Integer_Integer_Integer_CopyOptions_PasteOptions(void* instance_ptr, void* sourcecells0, int sourcerowindex, int destinationrowindex, int rownumber, void* copyoptions, void* pasteoptions);
   ASPOSE_CELLS_API c_return_int_value* Cells_GetGroupedRowOutlineLevel(void* instance_ptr, int rowindex);
   ASPOSE_CELLS_API c_return_int_value* Cells_GetGroupedColumnOutlineLevel(void* instance_ptr, int columnindex);
   ASPOSE_CELLS_API c_return_int_value* Cells_GetMaxGroupedColumnOutlineLevel(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Cells_GetMaxGroupedRowOutlineLevel(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cells_ShowGroupDetail(void* instance_ptr, bool isvertical, int index);
   ASPOSE_CELLS_API c_return_void_value* Cells_HideGroupDetail(void* instance_ptr, bool isvertical, int index);
   ASPOSE_CELLS_API c_return_void_value* Cells_UngroupColumns(void* instance_ptr, int firstindex, int lastindex);
   ASPOSE_CELLS_API c_return_void_value* Cells_GroupColumns_Integer_Integer(void* instance_ptr, int firstindex, int lastindex);
   ASPOSE_CELLS_API c_return_void_value* Cells_GroupColumns_Integer_Integer_Boolean(void* instance_ptr, int firstindex, int lastindex, bool ishidden);
   ASPOSE_CELLS_API c_return_void_value* Cells_UngroupRows_Integer_Integer_Boolean(void* instance_ptr, int firstindex, int lastindex, bool isall);
   ASPOSE_CELLS_API c_return_void_value* Cells_UngroupRows_Integer_Integer(void* instance_ptr, int firstindex, int lastindex);
   ASPOSE_CELLS_API c_return_void_value* Cells_GroupRows_Integer_Integer_Boolean(void* instance_ptr, int firstindex, int lastindex, bool ishidden);
   ASPOSE_CELLS_API c_return_void_value* Cells_GroupRows_Integer_Integer(void* instance_ptr, int firstindex, int lastindex);
   ASPOSE_CELLS_API c_return_void_value* Cells_DeleteColumn_Integer_Boolean(void* instance_ptr, int columnindex, bool updatereference);
   ASPOSE_CELLS_API c_return_void_value* Cells_DeleteColumn_Integer(void* instance_ptr, int columnindex);
   ASPOSE_CELLS_API c_return_void_value* Cells_DeleteColumns_Integer_Integer_Boolean(void* instance_ptr, int columnindex, int totalcolumns, bool updatereference);
   ASPOSE_CELLS_API c_return_void_value* Cells_DeleteColumns_Integer_Integer_DeleteOptions(void* instance_ptr, int columnindex, int totalcolumns, void* options);
   ASPOSE_CELLS_API c_return_bool_value* Cells_IsDeletingRangeEnabled(void* instance_ptr, int startrow, int startcolumn, int totalrows, int totalcolumns);
   ASPOSE_CELLS_API c_return_void_value* Cells_DeleteRow_Integer(void* instance_ptr, int rowindex);
   ASPOSE_CELLS_API c_return_void_value* Cells_DeleteRow_Integer_Boolean(void* instance_ptr, int rowindex, bool updatereference);
   ASPOSE_CELLS_API c_return_bool_value* Cells_DeleteRows_Integer_Integer(void* instance_ptr, int rowindex, int totalrows);
   ASPOSE_CELLS_API c_return_bool_value* Cells_DeleteRows_Integer_Integer_Boolean(void* instance_ptr, int rowindex, int totalrows, bool updatereference);
   ASPOSE_CELLS_API c_return_bool_value* Cells_DeleteRows_Integer_Integer_DeleteOptions(void* instance_ptr, int rowindex, int totalrows, void* options);
   ASPOSE_CELLS_API c_return_void_value* Cells_DeleteBlankColumns(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cells_DeleteBlankColumns_DeleteOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* Cells_IsBlankColumn(void* instance_ptr, int columnindex);
   ASPOSE_CELLS_API c_return_void_value* Cells_DeleteBlankRows(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cells_DeleteBlankRows_DeleteOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_void_value* Cells_InsertColumns_Integer_Integer(void* instance_ptr, int columnindex, int totalcolumns);
   ASPOSE_CELLS_API c_return_void_value* Cells_InsertColumns_Integer_Integer_Boolean(void* instance_ptr, int columnindex, int totalcolumns, bool updatereference);
   ASPOSE_CELLS_API c_return_void_value* Cells_InsertColumns_Integer_Integer_InsertOptions(void* instance_ptr, int columnindex, int totalcolumns, void* options);
   ASPOSE_CELLS_API c_return_void_value* Cells_InsertColumn_Integer_Boolean(void* instance_ptr, int columnindex, bool updatereference);
   ASPOSE_CELLS_API c_return_void_value* Cells_InsertColumn_Integer(void* instance_ptr, int columnindex);
   ASPOSE_CELLS_API c_return_void_value* Cells_InsertRows_Integer_Integer_Boolean(void* instance_ptr, int rowindex, int totalrows, bool updatereference);
   ASPOSE_CELLS_API c_return_void_value* Cells_InsertRows_Integer_Integer_InsertOptions(void* instance_ptr, int rowindex, int totalrows, void* options);
   ASPOSE_CELLS_API c_return_void_value* Cells_InsertRows_Integer_Integer(void* instance_ptr, int rowindex, int totalrows);
   ASPOSE_CELLS_API c_return_void_value* Cells_InsertRow(void* instance_ptr, int rowindex);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_GetRanges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cells_ClearRange_CellArea(void* instance_ptr, void* range_);
   ASPOSE_CELLS_API c_return_void_value* Cells_ClearRange_Integer_Integer_Integer_Integer(void* instance_ptr, int startrow, int startcolumn, int endrow, int endcolumn);
   ASPOSE_CELLS_API c_return_void_value* Cells_ClearContents_CellArea(void* instance_ptr, void* range_);
   ASPOSE_CELLS_API c_return_void_value* Cells_ClearContents_Integer_Integer_Integer_Integer(void* instance_ptr, int startrow, int startcolumn, int endrow, int endcolumn);
   ASPOSE_CELLS_API c_return_void_value* Cells_ClearFormats_CellArea(void* instance_ptr, void* range_);
   ASPOSE_CELLS_API c_return_void_value* Cells_ClearFormats_Integer_Integer_Integer_Integer(void* instance_ptr, int startrow, int startcolumn, int endrow, int endcolumn);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_GetLastCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cells_LinkToXmlMap(void* instance_ptr, char* mapname, int row, int column, char* path);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_GetMaxDisplayRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_GetFirstCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_Find_Object_Cell(void* instance_ptr, void* what, void* previouscell);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_Find_Object_Cell_FindOptions(void* instance_ptr, void* what, void* previouscell, void* findoptions);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_EndCellInRow_Integer(void* instance_ptr, int rowindex);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_EndCellInColumn_Integer(void* instance_ptr, int columnindex);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_EndCellInColumn_Integer_Integer_Integer_Integer(void* instance_ptr, int startrow, int endrow, int startcolumn, int endcolumn);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_EndCellInRow_Integer_Integer_Integer_Integer(void* instance_ptr, int startrow, int endrow, int startcolumn, int endcolumn);
   ASPOSE_CELLS_API c_return_void_value* Cells_MoveRange(void* instance_ptr, void* sourcearea, int destrow, int destcolumn);
   ASPOSE_CELLS_API c_return_void_value* Cells_InsertCutCells(void* instance_ptr, void* cutrange, int row, int column, int shifttype);
   ASPOSE_CELLS_API c_return_void_value* Cells_InsertRange_CellArea_Integer_ShiftType_Boolean(void* instance_ptr, void* area, int shiftnumber, int shifttype, bool updatereference);
   ASPOSE_CELLS_API c_return_void_value* Cells_InsertRange_CellArea_ShiftType(void* instance_ptr, void* area, int shifttype);
   ASPOSE_CELLS_API c_return_void_value* Cells_InsertRange_CellArea_Integer_ShiftType(void* instance_ptr, void* area, int shiftnumber, int shifttype);
   ASPOSE_CELLS_API c_return_void_value* Cells_DeleteRange(void* instance_ptr, int startrow, int startcolumn, int endrow, int endcolumn, int shifttype);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_ExportArray(void* instance_ptr, int firstrow, int firstcolumn, int totalrows, int totalcolumns);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_RetrieveSubtotalSetting(void* instance_ptr, void* ca);
   ASPOSE_CELLS_API c_return_void_value* Cells_Subtotal_CellArea_Integer_ConsolidationFunction_int32_tArray(void* instance_ptr, void* ca, int groupby, int function, void* totallist, int totallist_length);
   ASPOSE_CELLS_API c_return_void_value* Cells_Subtotal_CellArea_Integer_ConsolidationFunction_int32_tArray_Boolean_Boolean_Boolean(void* instance_ptr, void* ca, int groupby, int function, void* totallist, int totallist_length, bool replace, bool pagebreaks, bool summarybelowdata);
   ASPOSE_CELLS_API c_return_void_value* Cells_RemoveFormulas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cells_RemoveDuplicates(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Cells_RemoveDuplicates_Integer_Integer_Integer_Integer(void* instance_ptr, int startrow, int startcolumn, int endrow, int endcolumn);
   ASPOSE_CELLS_API c_return_void_value* Cells_RemoveDuplicates_Integer_Integer_Integer_Integer_Boolean_int32_tArray(void* instance_ptr, int startrow, int startcolumn, int endrow, int endcolumn, bool hasheaders, void* columnoffsets, int columnoffsets_length);
   ASPOSE_CELLS_API c_return_void_value* Cells_ConvertStringToNumericValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_GetDependents(void* instance_ptr, bool isall, int row, int column);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_GetDependentsInCalculation(void* instance_ptr, int row, int column, bool recursive);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_GetCellsWithPlaceInCellPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Cells_GetCellStyle(void* instance_ptr, int row, int column);


   ASPOSE_CELLS_API void Delete_Cells( void* instance_ptr);

   /**************Class CellsColor *****************/


   ASPOSE_CELLS_API c_return_bool_value* CellsColor_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CellsColor_IsShapeColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsColor_SetIsShapeColor(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* CellsColor_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CellsColor_GetThemeColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsColor_SetThemeColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* CellsColor_GetColorIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsColor_SetColorIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CellsColor_GetColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsColor_SetColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* CellsColor_GetArgb(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsColor_SetArgb(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* CellsColor_GetTransparency(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsColor_SetTransparency(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_void_value* CellsColor_SetTintOfShapeColor(void* instance_ptr, double tint);


   ASPOSE_CELLS_API void Delete_CellsColor( void* instance_ptr);

   /**************Class CellsFactory *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_CellsFactory();

   ASPOSE_CELLS_API c_return_bool_value* CellsFactory_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CellsFactory_CreateStyle(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_CellsFactory( void* instance_ptr);

   /**************Class CellsHelper *****************/


   ASPOSE_CELLS_API c_return_int_value* CellsHelper_GetSignificantDigits();
   ASPOSE_CELLS_API c_return_void_value* CellsHelper_SetSignificantDigits(int value);
   ASPOSE_CELLS_API c_return_double_value* CellsHelper_GetDPI();
   ASPOSE_CELLS_API c_return_void_value* CellsHelper_SetDPI(double value);
   ASPOSE_CELLS_API c_return_double_value* CellsHelper_GetTextWidth(char* text, void* font, double scaling);
   ASPOSE_CELLS_API c_return_string_value* CellsHelper_GetVersion();
   ASPOSE_CELLS_API c_return_void_value* CellsHelper_CellNameToIndex(char* cellname, int* row, int* column);
   ASPOSE_CELLS_API c_return_string_value* CellsHelper_CellIndexToName(int row, int column);
   ASPOSE_CELLS_API c_return_string_value* CellsHelper_ColumnIndexToName(int column);
   ASPOSE_CELLS_API c_return_int_value* CellsHelper_ColumnNameToIndex(char* columnname);
   ASPOSE_CELLS_API c_return_string_value* CellsHelper_RowIndexToName(int row);
   ASPOSE_CELLS_API c_return_int_value* CellsHelper_RowNameToIndex(char* rowname);
   ASPOSE_CELLS_API c_return_ptr_value* CellsHelper_GetDateTimeFromDouble(double doublevalue, bool date1904);
   ASPOSE_CELLS_API c_return_double_value* CellsHelper_GetDoubleFromDateTime(void* datetime, bool date1904);
   ASPOSE_CELLS_API c_return_string_value* CellsHelper_GetStartupPath();
   ASPOSE_CELLS_API c_return_void_value* CellsHelper_SetStartupPath(char* value);
   ASPOSE_CELLS_API c_return_string_value* CellsHelper_GetAltStartPath();
   ASPOSE_CELLS_API c_return_void_value* CellsHelper_SetAltStartPath(char* value);
   ASPOSE_CELLS_API c_return_string_value* CellsHelper_GetLibraryPath();
   ASPOSE_CELLS_API c_return_void_value* CellsHelper_SetLibraryPath(char* value);
   ASPOSE_CELLS_API c_return_ptr_value* CellsHelper_GetUsedColors(void* workbook);
   ASPOSE_CELLS_API c_return_void_value* CellsHelper_MergeFiles(void* files, int files_length, char* cachedfile, char* destfile);
   ASPOSE_CELLS_API c_return_string_value* CellsHelper_CreateSafeSheetName_String(char* nameproposal);
   ASPOSE_CELLS_API c_return_string_value* CellsHelper_CreateSafeSheetName_String_Char(char* nameproposal, char replacechar);
   ASPOSE_CELLS_API c_return_bool_value* CellsHelper_NeedQuoteInFormula(char* sheetname);
   ASPOSE_CELLS_API c_return_bool_value* CellsHelper_IsCloudPlatform();
   ASPOSE_CELLS_API c_return_void_value* CellsHelper_SetIsCloudPlatform(bool value);


   ASPOSE_CELLS_API void Delete_CellsHelper( void* instance_ptr);

   /**************Class CellValue *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_CellValue();

   ASPOSE_CELLS_API c_return_bool_value* CellValue_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CellValue_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellValue_SetType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CellValue_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellValue_SetValue(void* instance_ptr, void* value);


   ASPOSE_CELLS_API void Delete_CellValue( void* instance_ptr);

   /**************Class CellWatch *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_CellWatch();

   ASPOSE_CELLS_API c_return_bool_value* CellWatch_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CellWatch_GetRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellWatch_SetRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellWatch_GetColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellWatch_SetColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* CellWatch_GetCellName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellWatch_SetCellName(void* instance_ptr, char* value);


   ASPOSE_CELLS_API void Delete_CellWatch( void* instance_ptr);

   /**************Class CellWatchCollection *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_CellWatchCollection();

   ASPOSE_CELLS_API c_return_bool_value* CellWatchCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CellWatchCollection_Add_Integer_Integer(void* instance_ptr, int row, int column);
   ASPOSE_CELLS_API c_return_int_value* CellWatchCollection_Add_String(void* instance_ptr, char* cellname);
   ASPOSE_CELLS_API c_return_ptr_value* CellWatchCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* CellWatchCollection_Get_String(void* instance_ptr, char* cellname);
   ASPOSE_CELLS_API c_return_int_value* CellWatchCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_CellWatchCollection( void* instance_ptr);

   /**************Class ColorFilter *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ColorFilter(void* obj);

   ASPOSE_CELLS_API c_return_bool_value* ColorFilter_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ColorFilter_ToObject(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ColorFilter_GetFilterByFillColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ColorFilter_SetFilterByFillColor(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ColorFilter_GetColor(void* instance_ptr, void* sheets);


   ASPOSE_CELLS_API void Delete_ColorFilter( void* instance_ptr);

   /**************Class ColorScale *****************/


   ASPOSE_CELLS_API c_return_bool_value* ColorScale_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ColorScale_GetIs3ColorScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ColorScale_SetIs3ColorScale(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ColorScale_GetMinCfvo(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ColorScale_GetMidCfvo(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ColorScale_GetMaxCfvo(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ColorScale_GetMinColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ColorScale_SetMinColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* ColorScale_GetMidColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ColorScale_SetMidColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* ColorScale_GetMaxColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ColorScale_SetMaxColor(void* instance_ptr, void* value);


   ASPOSE_CELLS_API void Delete_ColorScale( void* instance_ptr);

   /**************Class Column *****************/


   ASPOSE_CELLS_API c_return_bool_value* Column_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Column_GetIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Column_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Column_SetWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Column_GetGroupLevel(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Column_SetGroupLevel(void* instance_ptr, uint8_t value);
   ASPOSE_CELLS_API c_return_bool_value* Column_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Column_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Column_GetHasCustomStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Column_ApplyStyle(void* instance_ptr, void* style, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* Column_GetStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Column_SetStyle(void* instance_ptr, void* style);
   ASPOSE_CELLS_API c_return_bool_value* Column_IsCollapsed(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Column_SetIsCollapsed(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_Column( void* instance_ptr);

   /**************Class ColumnCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ColumnCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ColumnCollection_GetColumnByIndex(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* ColumnCollection_Get(void* instance_ptr, int columnindex);
   ASPOSE_CELLS_API c_return_int_value* ColumnCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ColumnCollection( void* instance_ptr);

   /**************Class Comment *****************/


   ASPOSE_CELLS_API c_return_bool_value* Comment_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Comment_GetAuthor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Comment_SetAuthor(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* Comment_GetCommentShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Comment_GetRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Comment_GetColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Comment_IsThreadedComment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Comment_GetThreadedComments(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Comment_GetNote(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Comment_SetNote(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Comment_GetHtmlNote(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Comment_SetHtmlNote(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* Comment_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Comment_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* Comment_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* Comment_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Comment_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Comment_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Comment_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Comment_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Comment_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Comment_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Comment_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Comment_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Comment_GetAutoSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Comment_SetAutoSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_double_value* Comment_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Comment_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Comment_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Comment_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Comment_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Comment_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Comment_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Comment_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Comment_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Comment_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Comment_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Comment_SetHeightInch(void* instance_ptr, double value);


   ASPOSE_CELLS_API void Delete_Comment( void* instance_ptr);

   /**************Class CommentCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* CommentCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CommentCollection_AddThreadedComment_Integer_Integer_String_ThreadedCommentAuthor(void* instance_ptr, int row, int column, char* text, void* author);
   ASPOSE_CELLS_API c_return_int_value* CommentCollection_AddThreadedComment_String_String_ThreadedCommentAuthor(void* instance_ptr, char* cellname, char* text, void* author);
   ASPOSE_CELLS_API c_return_ptr_value* CommentCollection_GetThreadedComments_Integer_Integer(void* instance_ptr, int row, int column);
   ASPOSE_CELLS_API c_return_ptr_value* CommentCollection_GetThreadedComments_String(void* instance_ptr, char* cellname);
   ASPOSE_CELLS_API c_return_int_value* CommentCollection_Add_Integer_Integer(void* instance_ptr, int row, int column);
   ASPOSE_CELLS_API c_return_int_value* CommentCollection_Add_String(void* instance_ptr, char* cellname);
   ASPOSE_CELLS_API c_return_ptr_value* CommentCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* CommentCollection_Get_String(void* instance_ptr, char* cellname);
   ASPOSE_CELLS_API c_return_ptr_value* CommentCollection_Get_Integer_Integer(void* instance_ptr, int row, int column);
   ASPOSE_CELLS_API c_return_void_value* CommentCollection_RemoveAt_String(void* instance_ptr, char* cellname);
   ASPOSE_CELLS_API c_return_void_value* CommentCollection_RemoveAt_Integer_Integer(void* instance_ptr, int row, int column);
   ASPOSE_CELLS_API c_return_void_value* CommentCollection_Clear(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CommentCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_CommentCollection( void* instance_ptr);

   /**************Class ConditionalFormattingCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ConditionalFormattingCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ConditionalFormattingCollection_RemoveArea(void* instance_ptr, int startrow, int startcolumn, int totalrows, int totalcolumns);
   ASPOSE_CELLS_API c_return_void_value* ConditionalFormattingCollection_Copy(void* instance_ptr, void* cfs);
   ASPOSE_CELLS_API c_return_ptr_value* ConditionalFormattingCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* ConditionalFormattingCollection_Add(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ConditionalFormattingCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ConditionalFormattingCollection( void* instance_ptr);

   /**************Class ConditionalFormattingIcon *****************/


   ASPOSE_CELLS_API c_return_bool_value* ConditionalFormattingIcon_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ConditionalFormattingIcon_GetImageData_Cell(void* instance_ptr, void* cell);
   ASPOSE_CELLS_API c_return_ptr_value* ConditionalFormattingIcon_GetImageData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ConditionalFormattingIcon_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ConditionalFormattingIcon_SetType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ConditionalFormattingIcon_GetIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ConditionalFormattingIcon_SetIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ConditionalFormattingIcon_GetIconImageData(int type_, int index);


   ASPOSE_CELLS_API void Delete_ConditionalFormattingIcon( void* instance_ptr);

   /**************Class ConditionalFormattingIconCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ConditionalFormattingIconCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ConditionalFormattingIconCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* ConditionalFormattingIconCollection_Add_IconSetType_Integer(void* instance_ptr, int type_, int index);
   ASPOSE_CELLS_API c_return_int_value* ConditionalFormattingIconCollection_Add_ConditionalFormattingIcon(void* instance_ptr, void* cficon);
   ASPOSE_CELLS_API c_return_int_value* ConditionalFormattingIconCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ConditionalFormattingIconCollection( void* instance_ptr);

   /**************Class ConditionalFormattingResult *****************/


   ASPOSE_CELLS_API c_return_bool_value* ConditionalFormattingResult_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ConditionalFormattingResult_GetConditionalStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ConditionalFormattingResult_GetConditionalFormattingIcon(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ConditionalFormattingResult_GetConditionalFormattingDataBar(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ConditionalFormattingResult_GetConditionalFormattingColorScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ConditionalFormattingResult_GetColorScaleResult(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ConditionalFormattingResult( void* instance_ptr);

   /**************Class ConditionalFormattingValue *****************/


   ASPOSE_CELLS_API c_return_bool_value* ConditionalFormattingValue_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ConditionalFormattingValue_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ConditionalFormattingValue_SetValue(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* ConditionalFormattingValue_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ConditionalFormattingValue_SetType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ConditionalFormattingValue_IsGTE(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ConditionalFormattingValue_SetIsGTE(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_ConditionalFormattingValue( void* instance_ptr);

   /**************Class ConditionalFormattingValueCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ConditionalFormattingValueCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ConditionalFormattingValueCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* ConditionalFormattingValueCollection_Add(void* instance_ptr, int type_, char* value);
   ASPOSE_CELLS_API c_return_int_value* ConditionalFormattingValueCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ConditionalFormattingValueCollection( void* instance_ptr);

   /**************Class CopyOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_CopyOptions();

   ASPOSE_CELLS_API c_return_bool_value* CopyOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CopyOptions_GetKeepMacros(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CopyOptions_SetKeepMacros(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CopyOptions_GetExtendToAdjacentRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CopyOptions_SetExtendToAdjacentRange(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CopyOptions_GetCopyNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CopyOptions_SetCopyNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CopyOptions_GetCopyInvalidFormulasAsValues(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CopyOptions_SetCopyInvalidFormulasAsValues(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CopyOptions_GetColumnCharacterWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CopyOptions_SetColumnCharacterWidth(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CopyOptions_GetReferToSheetWithSameName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CopyOptions_SetReferToSheetWithSameName(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CopyOptions_GetReferToDestinationSheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CopyOptions_SetReferToDestinationSheet(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_CopyOptions( void* instance_ptr);

   /**************Class CustomFilter *****************/


   ASPOSE_CELLS_API c_return_bool_value* CustomFilter_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CustomFilter_GetFilterOperatorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomFilter_SetFilterOperatorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CustomFilter_GetCriteria(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomFilter_SetCriteria_Object(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_void_value* CustomFilter_SetCriteria_FilterOperatorType_Object(void* instance_ptr, int filteroperator, void* criteria);


   ASPOSE_CELLS_API void Delete_CustomFilter( void* instance_ptr);

   /**************Class CustomFilterCollection *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_CustomFilterCollection();
   ASPOSE_CELLS_API c_return_ptr_value* New_CustomFilterCollection_Object(void* obj);

   ASPOSE_CELLS_API c_return_bool_value* CustomFilterCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomFilterCollection_ToObject(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CustomFilterCollection_GetAnd(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomFilterCollection_SetAnd(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* CustomFilterCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* CustomFilterCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_CustomFilterCollection( void* instance_ptr);

   /**************Class CustomFunctionDefinition *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_CustomFunctionDefinition();

   ASPOSE_CELLS_API c_return_bool_value* CustomFunctionDefinition_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomFunctionDefinition_GetArrayModeParameters(void* instance_ptr, char* functionname);


   ASPOSE_CELLS_API void Delete_CustomFunctionDefinition( void* instance_ptr);

   /**************Class DataBar *****************/


   ASPOSE_CELLS_API c_return_bool_value* DataBar_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DataBar_GetAxisColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataBar_SetAxisColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* DataBar_GetAxisPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataBar_SetAxisPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DataBar_GetBarFillType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataBar_SetBarFillType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DataBar_GetDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataBar_SetDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* DataBar_GetBarBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DataBar_GetNegativeBarFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DataBar_GetMinCfvo(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DataBar_GetMaxCfvo(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DataBar_GetColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataBar_SetColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* DataBar_GetMinLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataBar_SetMinLength(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DataBar_GetMaxLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataBar_SetMaxLength(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* DataBar_GetShowValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataBar_SetShowValue(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* DataBar_ToImage(void* instance_ptr, void* cell, void* imgopts);


   ASPOSE_CELLS_API void Delete_DataBar( void* instance_ptr);

   /**************Class DataBarBorder *****************/


   ASPOSE_CELLS_API c_return_bool_value* DataBarBorder_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DataBarBorder_GetColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataBarBorder_SetColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* DataBarBorder_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataBarBorder_SetType(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_DataBarBorder( void* instance_ptr);

   /**************Class DataSorter *****************/


   ASPOSE_CELLS_API c_return_bool_value* DataSorter_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DataSorter_GetKeys(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataSorter_Clear(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* DataSorter_GetHasHeaders(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataSorter_SetHasHeaders(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* DataSorter_AddKey_Integer_SortOrder(void* instance_ptr, int key, int order);
   ASPOSE_CELLS_API c_return_void_value* DataSorter_AddKey_Integer_SortOrder_String(void* instance_ptr, int key, int order, char* customlist);
   ASPOSE_CELLS_API c_return_void_value* DataSorter_AddColorKey(void* instance_ptr, int key, int type_, int order, void* color);
   ASPOSE_CELLS_API c_return_void_value* DataSorter_AddKey_Integer_SortOnType_SortOrder_Object(void* instance_ptr, int key, int type_, int order, void* customlist);
   ASPOSE_CELLS_API c_return_void_value* DataSorter_AddKey_Integer_SortOrder_U16StringArray(void* instance_ptr, int key, int order, void* customlist, int customlist_length);
   ASPOSE_CELLS_API c_return_int_value* DataSorter_GetKey1(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataSorter_SetKey1(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DataSorter_GetOrder1(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataSorter_SetOrder1(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DataSorter_GetKey2(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataSorter_SetKey2(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DataSorter_GetOrder2(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataSorter_SetOrder2(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DataSorter_GetKey3(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataSorter_SetKey3(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DataSorter_GetOrder3(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataSorter_SetOrder3(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* DataSorter_GetSortLeftToRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataSorter_SetSortLeftToRight(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DataSorter_GetCaseSensitive(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataSorter_SetCaseSensitive(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DataSorter_GetSortAsNumber(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataSorter_SetSortAsNumber(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* DataSorter_Sort_Cells_Integer_Integer_Integer_Integer(void* instance_ptr, void* cells, int startrow, int startcolumn, int endrow, int endcolumn);
   ASPOSE_CELLS_API c_return_ptr_value* DataSorter_Sort_Cells_CellArea(void* instance_ptr, void* cells, void* area);
   ASPOSE_CELLS_API c_return_ptr_value* DataSorter_Sort(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_DataSorter( void* instance_ptr);

   /**************Class DataSorterKey *****************/


   ASPOSE_CELLS_API c_return_bool_value* DataSorterKey_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DataSorterKey_GetOrder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DataSorterKey_GetIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DataSorterKey_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DataSorterKey_GetIconSetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DataSorterKey_GetIconId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DataSorterKey_GetColor(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_DataSorterKey( void* instance_ptr);

   /**************Class DataSorterKeyCollection *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_DataSorterKeyCollection();

   ASPOSE_CELLS_API c_return_bool_value* DataSorterKeyCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DataSorterKeyCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* DataSorterKeyCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_DataSorterKeyCollection( void* instance_ptr);

   /**************Class DateTimeGroupItem *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_DateTimeGroupItem_DateTimeGroupingType_Integer_Integer_Integer_Integer_Integer_Integer(int type_, int year, int month, int day, int hour, int minute, int second);
   ASPOSE_CELLS_API c_return_ptr_value* New_DateTimeGroupItem_Object(void* obj);

   ASPOSE_CELLS_API c_return_bool_value* DateTimeGroupItem_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DateTimeGroupItem_ToObject(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DateTimeGroupItem_GetMinValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DateTimeGroupItem_GetDateTimeGroupingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DateTimeGroupItem_SetDateTimeGroupingType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DateTimeGroupItem_GetYear(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DateTimeGroupItem_SetYear(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DateTimeGroupItem_GetMonth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DateTimeGroupItem_SetMonth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DateTimeGroupItem_GetDay(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DateTimeGroupItem_SetDay(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DateTimeGroupItem_GetHour(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DateTimeGroupItem_SetHour(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DateTimeGroupItem_GetMinute(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DateTimeGroupItem_SetMinute(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DateTimeGroupItem_GetSecond(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DateTimeGroupItem_SetSecond(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_DateTimeGroupItem( void* instance_ptr);

   /**************Class DefaultStyleSettings *****************/


   ASPOSE_CELLS_API c_return_bool_value* DefaultStyleSettings_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* DefaultStyleSettings_GetBuiltInPreference(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DefaultStyleSettings_SetBuiltInPreference(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* DefaultStyleSettings_GetFontName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DefaultStyleSettings_SetFontName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_double_value* DefaultStyleSettings_GetFontSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DefaultStyleSettings_SetFontSize(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* DefaultStyleSettings_GetHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DefaultStyleSettings_SetHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DefaultStyleSettings_GetVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DefaultStyleSettings_SetVerticalAlignment(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_DefaultStyleSettings( void* instance_ptr);

   /**************Class DeleteBlankOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_DeleteBlankOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_DeleteBlankOptions_DeleteOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* DeleteBlankOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* DeleteBlankOptions_GetEmptyStringAsBlank(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DeleteBlankOptions_SetEmptyStringAsBlank(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DeleteBlankOptions_GetEmptyFormulaValueAsBlank(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DeleteBlankOptions_SetEmptyFormulaValueAsBlank(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DeleteBlankOptions_GetDrawingsAsBlank(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DeleteBlankOptions_SetDrawingsAsBlank(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* DeleteBlankOptions_GetMergedCellsShrinkType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DeleteBlankOptions_SetMergedCellsShrinkType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DeleteBlankOptions_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DeleteBlankOptions_SetStartIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DeleteBlankOptions_GetEndIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DeleteBlankOptions_SetEndIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* DeleteBlankOptions_GetUpdateReference(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DeleteBlankOptions_SetUpdateReference(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* DeleteBlankOptions_GetFormulaChangeMonitor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DeleteBlankOptions_SetFormulaChangeMonitor(void* instance_ptr, void* value);


   ASPOSE_CELLS_API void Delete_DeleteBlankOptions( void* instance_ptr);

   /**************Class DeleteOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_DeleteOptions();

   ASPOSE_CELLS_API c_return_bool_value* DeleteOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* DeleteOptions_GetUpdateReference(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DeleteOptions_SetUpdateReference(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* DeleteOptions_GetFormulaChangeMonitor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DeleteOptions_SetFormulaChangeMonitor(void* instance_ptr, void* value);


   ASPOSE_CELLS_API void Delete_DeleteOptions( void* instance_ptr);

   /**************Class DifSaveOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_DifSaveOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_DifSaveOptions_SaveOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* DifSaveOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DifSaveOptions_GetSaveFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* DifSaveOptions_GetClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifSaveOptions_SetClearData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* DifSaveOptions_GetCachedFileFolder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifSaveOptions_SetCachedFileFolder(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* DifSaveOptions_GetValidateMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifSaveOptions_SetValidateMergedAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DifSaveOptions_GetMergeAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifSaveOptions_SetMergeAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DifSaveOptions_GetCreateDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifSaveOptions_SetCreateDirectory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DifSaveOptions_GetSortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifSaveOptions_SetSortNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DifSaveOptions_GetSortExternalNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifSaveOptions_SetSortExternalNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DifSaveOptions_GetRefreshChartCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifSaveOptions_SetRefreshChartCache(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DifSaveOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifSaveOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DifSaveOptions_GetUpdateSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifSaveOptions_SetUpdateSmartArt(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DifSaveOptions_GetEncryptDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifSaveOptions_SetEncryptDocumentProperties(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_DifSaveOptions( void* instance_ptr);

   /**************Class DocxSaveOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_DocxSaveOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_DocxSaveOptions_Boolean(bool saveasimage);
   ASPOSE_CELLS_API c_return_ptr_value* New_DocxSaveOptions_PaginatedSaveOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* DocxSaveOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* DocxSaveOptions_GetDefaultFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetDefaultFont(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* DocxSaveOptions_GetCheckWorkbookDefaultFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetCheckWorkbookDefaultFont(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetCheckFontCompatibility(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DocxSaveOptions_GetCheckFontCompatibility(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetIsFontSubstitutionCharGranularity(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DocxSaveOptions_IsFontSubstitutionCharGranularity(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* DocxSaveOptions_GetOnePagePerSheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetOnePagePerSheet(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DocxSaveOptions_GetAllColumnsInOnePagePerSheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetAllColumnsInOnePagePerSheet(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DocxSaveOptions_GetIgnoreError(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetIgnoreError(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DocxSaveOptions_GetOutputBlankPageWhenNothingToPrint(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetOutputBlankPageWhenNothingToPrint(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetPageIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DocxSaveOptions_GetPageIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetPageCount(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DocxSaveOptions_GetPageCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DocxSaveOptions_GetPrintingPageType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetPrintingPageType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DocxSaveOptions_GetGridlineType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetGridlineType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DocxSaveOptions_GetTextCrossType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetTextCrossType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DocxSaveOptions_GetDefaultEditLanguage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetDefaultEditLanguage(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* DocxSaveOptions_GetSheetSet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetSheetSet(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* DocxSaveOptions_GetDrawObjectEventHandler(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetDrawObjectEventHandler(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* DocxSaveOptions_GetEmfRenderSetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetEmfRenderSetting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DocxSaveOptions_GetSaveFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* DocxSaveOptions_GetClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetClearData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* DocxSaveOptions_GetCachedFileFolder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetCachedFileFolder(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* DocxSaveOptions_GetValidateMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetValidateMergedAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DocxSaveOptions_GetMergeAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetMergeAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DocxSaveOptions_GetCreateDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetCreateDirectory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DocxSaveOptions_GetSortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetSortNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DocxSaveOptions_GetSortExternalNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetSortExternalNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DocxSaveOptions_GetRefreshChartCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetRefreshChartCache(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DocxSaveOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DocxSaveOptions_GetUpdateSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetUpdateSmartArt(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DocxSaveOptions_GetEncryptDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocxSaveOptions_SetEncryptDocumentProperties(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_DocxSaveOptions( void* instance_ptr);

   /**************Class DxfCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* DxfCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DxfCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* DxfCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_DxfCollection( void* instance_ptr);

   /**************Class DynamicFilter *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_DynamicFilter(void* obj);

   ASPOSE_CELLS_API c_return_bool_value* DynamicFilter_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DynamicFilter_ToObject(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DynamicFilter_GetDynamicFilterType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DynamicFilter_SetDynamicFilterType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* DynamicFilter_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DynamicFilter_SetValue(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* DynamicFilter_GetMaxValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DynamicFilter_SetMaxValue(void* instance_ptr, void* value);


   ASPOSE_CELLS_API void Delete_DynamicFilter( void* instance_ptr);

   /**************Class EbookLoadOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_EbookLoadOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_EbookLoadOptions_LoadFormat(int loadformat);
   ASPOSE_CELLS_API c_return_ptr_value* New_EbookLoadOptions_HtmlLoadOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* EbookLoadOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* EbookLoadOptions_GetEncoding(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetEncoding(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* EbookLoadOptions_GetLoadStyleStrategy(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetLoadStyleStrategy(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* EbookLoadOptions_GetConvertNumericData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetConvertNumericData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookLoadOptions_GetConvertDateTimeData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetConvertDateTimeData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookLoadOptions_GetKeepPrecision(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetKeepPrecision(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookLoadOptions_GetLoadFormulas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetLoadFormulas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookLoadOptions_GetSupportDivTag(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetSupportDivTag(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookLoadOptions_GetDeleteRedundantSpaces(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetDeleteRedundantSpaces(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookLoadOptions_GetAutoFitColsAndRows(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetAutoFitColsAndRows(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookLoadOptions_GetHasFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetHasFormula(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* EbookLoadOptions_GetProgId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* EbookLoadOptions_GetTableLoadOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* EbookLoadOptions_GetLoadFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* EbookLoadOptions_GetPassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetPassword(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* EbookLoadOptions_GetParsingFormulaOnOpen(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetParsingFormulaOnOpen(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookLoadOptions_GetParsingPivotCachedRecords(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetParsingPivotCachedRecords(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetPaperSize(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_int_value* EbookLoadOptions_GetLanguageCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetLanguageCode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* EbookLoadOptions_GetRegion(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetRegion(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* EbookLoadOptions_GetDefaultStyleSettings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* EbookLoadOptions_GetInterruptMonitor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetInterruptMonitor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* EbookLoadOptions_GetIgnoreNotPrinted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetIgnoreNotPrinted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookLoadOptions_GetCheckDataValid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetCheckDataValid(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookLoadOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookLoadOptions_GetKeepUnparsedData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetKeepUnparsedData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* EbookLoadOptions_GetLoadFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetLoadFilter(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* EbookLoadOptions_GetMemorySetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetMemorySetting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* EbookLoadOptions_GetAutoFitterOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetAutoFitterOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* EbookLoadOptions_GetAutoFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetAutoFilter(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* EbookLoadOptions_GetFontConfigs(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetFontConfigs(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* EbookLoadOptions_GetIgnoreUselessShapes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetIgnoreUselessShapes(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookLoadOptions_GetPreservePaddingSpacesInFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookLoadOptions_SetPreservePaddingSpacesInFormula(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_EbookLoadOptions( void* instance_ptr);

   /**************Class ErrorCheckOption *****************/


   ASPOSE_CELLS_API c_return_bool_value* ErrorCheckOption_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ErrorCheckOption_IsErrorCheck(void* instance_ptr, int errorchecktype);
   ASPOSE_CELLS_API c_return_void_value* ErrorCheckOption_SetErrorCheck(void* instance_ptr, int errorchecktype, bool ischeck);
   ASPOSE_CELLS_API c_return_int_value* ErrorCheckOption_GetCountOfRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ErrorCheckOption_AddRange(void* instance_ptr, void* ca);
   ASPOSE_CELLS_API c_return_ptr_value* ErrorCheckOption_GetRange(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* ErrorCheckOption_RemoveRange(void* instance_ptr, int index);


   ASPOSE_CELLS_API void Delete_ErrorCheckOption( void* instance_ptr);

   /**************Class ErrorCheckOptionCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ErrorCheckOptionCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ErrorCheckOptionCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* ErrorCheckOptionCollection_Add(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ErrorCheckOptionCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ErrorCheckOptionCollection( void* instance_ptr);

   /**************Class ExternalLink *****************/


   ASPOSE_CELLS_API c_return_bool_value* ExternalLink_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ExternalLink_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ExternalLink_GetPathType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ExternalLink_GetOriginalDataSource(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalLink_SetOriginalDataSource(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ExternalLink_GetDataSource(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalLink_SetDataSource(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* ExternalLink_AddExternalName(void* instance_ptr, char* text, char* referto);
   ASPOSE_CELLS_API c_return_bool_value* ExternalLink_IsReferred(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ExternalLink_IsVisible(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ExternalLink( void* instance_ptr);

   /**************Class ExternalLinkCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ExternalLinkCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ExternalLinkCollection_GetCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ExternalLinkCollection_Add_String_U16StringArray(void* instance_ptr, char* filename, void* sheetnames, int sheetnames_length);
   ASPOSE_CELLS_API c_return_int_value* ExternalLinkCollection_Add_DirectoryType_String_U16StringArray(void* instance_ptr, int directorytype, char* filename, void* sheetnames, int sheetnames_length);
   ASPOSE_CELLS_API c_return_ptr_value* ExternalLinkCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* ExternalLinkCollection_Clear(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalLinkCollection_Clear_Boolean(void* instance_ptr, bool updatereferencesaslocal);
   ASPOSE_CELLS_API c_return_void_value* ExternalLinkCollection_RemoveAt_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* ExternalLinkCollection_RemoveAt_Integer_Boolean(void* instance_ptr, int index, bool updatereferencesaslocal);
   ASPOSE_CELLS_API c_return_ptr_value* ExternalLinkCollection_GetEnumerator(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ExternalLinkCollection( void* instance_ptr);

   /**************Class FileFontSource *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_FileFontSource_String(char* filepath);
   ASPOSE_CELLS_API c_return_ptr_value* New_FileFontSource_FontSourceBase(void* src);

   ASPOSE_CELLS_API c_return_bool_value* FileFontSource_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* FileFontSource_GetFilePath(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* FileFontSource_GetType(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_FileFontSource( void* instance_ptr);

   /**************Class FileFormatInfo *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_FileFormatInfo();

   ASPOSE_CELLS_API c_return_bool_value* FileFormatInfo_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* FileFormatInfo_IsProtectedByRMS(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* FileFormatInfo_IsEncrypted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* FileFormatInfo_GetFileFormatType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* FileFormatInfo_GetLoadFormat(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_FileFormatInfo( void* instance_ptr);

   /**************Class FileFormatUtil *****************/


   ASPOSE_CELLS_API c_return_ptr_value* FileFormatUtil_DetectFileFormat_Stream(void* stream, int stream_length);
   ASPOSE_CELLS_API c_return_ptr_value* FileFormatUtil_DetectFileFormat_Stream_String(void* stream, int stream_length, char* password);
   ASPOSE_CELLS_API c_return_bool_value* FileFormatUtil_VerifyPassword(void* stream, int stream_length, char* password);
   ASPOSE_CELLS_API c_return_ptr_value* FileFormatUtil_DetectFileFormat_String(char* filepath);
   ASPOSE_CELLS_API c_return_ptr_value* FileFormatUtil_DetectFileFormat_String_String(char* filepath, char* password);
   ASPOSE_CELLS_API c_return_int_value* FileFormatUtil_FileFormatToSaveFormat(int format);
   ASPOSE_CELLS_API c_return_int_value* FileFormatUtil_ExtensionToSaveFormat(char* extension);
   ASPOSE_CELLS_API c_return_bool_value* FileFormatUtil_IsTemplateFormat(char* extension);
   ASPOSE_CELLS_API c_return_string_value* FileFormatUtil_LoadFormatToExtension(int loadformat);
   ASPOSE_CELLS_API c_return_int_value* FileFormatUtil_LoadFormatToSaveFormat(int loadformat);
   ASPOSE_CELLS_API c_return_string_value* FileFormatUtil_SaveFormatToExtension(int format);
   ASPOSE_CELLS_API c_return_int_value* FileFormatUtil_SaveFormatToLoadFormat(int saveformat);


   ASPOSE_CELLS_API void Delete_FileFormatUtil( void* instance_ptr);

   /**************Class FilterColumn *****************/


   ASPOSE_CELLS_API c_return_bool_value* FilterColumn_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* FilterColumn_IsDropdownVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FilterColumn_SetIsDropdownVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* FilterColumn_GetFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FilterColumn_SetFilter(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* FilterColumn_GetFilterType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FilterColumn_SetFilterType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* FilterColumn_GetFieldIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FilterColumn_SetFieldIndex(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_FilterColumn( void* instance_ptr);

   /**************Class FilterColumnCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* FilterColumnCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FilterColumnCollection_RemoveAt(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* FilterColumnCollection_GetByIndex(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* FilterColumnCollection_Get(void* instance_ptr, int fieldindex);
   ASPOSE_CELLS_API c_return_int_value* FilterColumnCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_FilterColumnCollection( void* instance_ptr);

   /**************Class FindOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_FindOptions();

   ASPOSE_CELLS_API c_return_bool_value* FindOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* FindOptions_GetCaseSensitive(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FindOptions_SetCaseSensitive(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* FindOptions_GetLookAtType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FindOptions_SetLookAtType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* FindOptions_GetRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FindOptions_SetRange(void* instance_ptr, void* ca);
   ASPOSE_CELLS_API c_return_bool_value* FindOptions_IsRangeSet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* FindOptions_GetSearchBackward(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FindOptions_SetSearchBackward(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* FindOptions_GetSearchOrderByRows(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FindOptions_SetSearchOrderByRows(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* FindOptions_GetLookInType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FindOptions_SetLookInType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* FindOptions_GetRegexKey(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FindOptions_SetRegexKey(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* FindOptions_GetValueTypeSensitive(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FindOptions_SetValueTypeSensitive(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* FindOptions_GetStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FindOptions_SetStyle(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* FindOptions_GetConvertNumericData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FindOptions_SetConvertNumericData(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_FindOptions( void* instance_ptr);

   /**************Class FolderFontSource *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_FolderFontSource_String_Boolean(char* folderpath, bool scansubfolders);
   ASPOSE_CELLS_API c_return_ptr_value* New_FolderFontSource_FontSourceBase(void* src);

   ASPOSE_CELLS_API c_return_bool_value* FolderFontSource_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* FolderFontSource_GetFolderPath(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* FolderFontSource_GetScanSubFolders(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* FolderFontSource_GetType(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_FolderFontSource( void* instance_ptr);

   /**************Class Font *****************/


   ASPOSE_CELLS_API c_return_bool_value* Font_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Font_GetCharset(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Font_SetCharset(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Font_IsItalic(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Font_SetIsItalic(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Font_IsBold(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Font_SetIsBold(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Font_GetCapsType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Font_SetCapsType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Font_GetStrikeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Font_SetStrikeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Font_IsStrikeout(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Font_SetIsStrikeout(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_double_value* Font_GetScriptOffset(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Font_SetScriptOffset(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_bool_value* Font_IsSuperscript(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Font_SetIsSuperscript(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Font_IsSubscript(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Font_SetIsSubscript(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Font_GetUnderline(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Font_SetUnderline(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Font_GetDoubleSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Font_SetDoubleSize(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Font_GetSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Font_SetSize(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Font_GetThemeColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Font_SetThemeColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Font_GetColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Font_SetColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* Font_GetArgbColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Font_SetArgbColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Font_Equals(void* instance_ptr, void* font);
   ASPOSE_CELLS_API c_return_bool_value* Font_IsNormalizeHeights(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Font_SetIsNormalizeHeights(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Font_GetSchemeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Font_SetSchemeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* Font_ToString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Font_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Font_SetName(void* instance_ptr, char* value);


   ASPOSE_CELLS_API void Delete_Font( void* instance_ptr);

   /**************Class FontConfigs *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_FontConfigs();

   ASPOSE_CELLS_API c_return_bool_value* FontConfigs_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* FontConfigs_IsFontAvailable(char* fontname);
   ASPOSE_CELLS_API c_return_string_value* FontConfigs_GetDefaultFontName();
   ASPOSE_CELLS_API c_return_void_value* FontConfigs_SetDefaultFontName(char* value);
   ASPOSE_CELLS_API c_return_bool_value* FontConfigs_GetPreferSystemFontSubstitutes();
   ASPOSE_CELLS_API c_return_void_value* FontConfigs_SetPreferSystemFontSubstitutes(bool value);
   ASPOSE_CELLS_API c_return_void_value* FontConfigs_SetFontSubstitutes(char* originalfontname, void* substitutefontnames, int substitutefontnames_length);
   ASPOSE_CELLS_API c_return_ptr_value* FontConfigs_GetFontSubstitutes(char* originalfontname);
   ASPOSE_CELLS_API c_return_void_value* FontConfigs_SetFontFolder(char* fontfolder, bool recursive);
   ASPOSE_CELLS_API c_return_void_value* FontConfigs_SetFontFolders(void* fontfolders, int fontfolders_length, bool recursive);
   ASPOSE_CELLS_API c_return_void_value* FontConfigs_SetFontSources(void* sources, int sources_length);
   ASPOSE_CELLS_API c_return_ptr_value* FontConfigs_GetFontSources();


   ASPOSE_CELLS_API void Delete_FontConfigs( void* instance_ptr);

   /**************Class FontSetting *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_FontSetting(int startindex, int length, void* sheets);

   ASPOSE_CELLS_API c_return_bool_value* FontSetting_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* FontSetting_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* FontSetting_GetLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* FontSetting_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FontSetting_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* FontSetting_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* FontSetting_GetType(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_FontSetting( void* instance_ptr);

   /**************Class FontSourceBase *****************/


   ASPOSE_CELLS_API c_return_bool_value* FontSourceBase_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* FontSourceBase_GetType(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_FontSourceBase( void* instance_ptr);

   /**************Class FormatCondition *****************/


   ASPOSE_CELLS_API c_return_bool_value* FormatCondition_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* FormatCondition_GetFormula1_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* FormatCondition_GetFormula2_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* FormatCondition_GetFormula1_Boolean_Boolean_Integer_Integer(void* instance_ptr, bool isr1c1, bool islocal, int row, int column);
   ASPOSE_CELLS_API c_return_string_value* FormatCondition_GetFormula2_Boolean_Boolean_Integer_Integer(void* instance_ptr, bool isr1c1, bool islocal, int row, int column);
   ASPOSE_CELLS_API c_return_void_value* FormatCondition_SetFormulas(void* instance_ptr, char* formula1, char* formula2, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* FormatCondition_SetFormula1_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* FormatCondition_SetFormula2_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* FormatCondition_GetFormula1(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormatCondition_SetFormula1_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* FormatCondition_GetFormula1_Integer_Integer(void* instance_ptr, int row, int column);
   ASPOSE_CELLS_API c_return_string_value* FormatCondition_GetFormula2(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormatCondition_SetFormula2_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* FormatCondition_GetFormula2_Integer_Integer(void* instance_ptr, int row, int column);
   ASPOSE_CELLS_API c_return_int_value* FormatCondition_GetOperator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormatCondition_SetOperator(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* FormatCondition_GetStopIfTrue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormatCondition_SetStopIfTrue(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* FormatCondition_GetPriority(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormatCondition_SetPriority(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* FormatCondition_GetStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormatCondition_SetStyle(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* FormatCondition_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormatCondition_SetType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* FormatCondition_GetIconSet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* FormatCondition_GetDataBar(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* FormatCondition_GetColorScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* FormatCondition_GetTop10(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* FormatCondition_GetAboveAverage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* FormatCondition_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormatCondition_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* FormatCondition_GetTimePeriod(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormatCondition_SetTimePeriod(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_FormatCondition( void* instance_ptr);

   /**************Class FormatConditionCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* FormatConditionCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* FormatConditionCollection_Add(void* instance_ptr, void* cellarea, int type_, int operatortype, char* formula1, char* formula2);
   ASPOSE_CELLS_API c_return_int_value* FormatConditionCollection_AddArea(void* instance_ptr, void* cellarea);
   ASPOSE_CELLS_API c_return_int_value* FormatConditionCollection_AddCondition_FormatConditionType_OperatorType_String_String(void* instance_ptr, int type_, int operatortype, char* formula1, char* formula2);
   ASPOSE_CELLS_API c_return_int_value* FormatConditionCollection_AddCondition_FormatConditionType(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_int_value* FormatConditionCollection_GetCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* FormatConditionCollection_GetRangeCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* FormatConditionCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* FormatConditionCollection_GetCellArea(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* FormatConditionCollection_RemoveArea_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_bool_value* FormatConditionCollection_RemoveArea_Integer_Integer_Integer_Integer(void* instance_ptr, int startrow, int startcolumn, int totalrows, int totalcolumns);
   ASPOSE_CELLS_API c_return_void_value* FormatConditionCollection_RemoveCondition(void* instance_ptr, int index);


   ASPOSE_CELLS_API void Delete_FormatConditionCollection( void* instance_ptr);

   /**************Class FormulaParseOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_FormulaParseOptions();

   ASPOSE_CELLS_API c_return_bool_value* FormulaParseOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* FormulaParseOptions_GetLocaleDependent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormulaParseOptions_SetLocaleDependent(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* FormulaParseOptions_GetR1C1Style(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormulaParseOptions_SetR1C1Style(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* FormulaParseOptions_GetCheckAddIn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormulaParseOptions_SetCheckAddIn(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* FormulaParseOptions_GetParse(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormulaParseOptions_SetParse(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* FormulaParseOptions_GetCustomFunctionDefinition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormulaParseOptions_SetCustomFunctionDefinition(void* instance_ptr, void* value);


   ASPOSE_CELLS_API void Delete_FormulaParseOptions( void* instance_ptr);

   /**************Class FormulaSettings *****************/


   ASPOSE_CELLS_API c_return_bool_value* FormulaSettings_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* FormulaSettings_GetCalculateOnOpen(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormulaSettings_SetCalculateOnOpen(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* FormulaSettings_GetCalculateOnSave(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormulaSettings_SetCalculateOnSave(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* FormulaSettings_GetForceFullCalculation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormulaSettings_SetForceFullCalculation(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* FormulaSettings_GetCalculationMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormulaSettings_SetCalculationMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* FormulaSettings_GetCalculationId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormulaSettings_SetCalculationId(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* FormulaSettings_GetEnableIterativeCalculation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormulaSettings_SetEnableIterativeCalculation(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* FormulaSettings_GetMaxIteration(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormulaSettings_SetMaxIteration(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* FormulaSettings_GetMaxChange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormulaSettings_SetMaxChange(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_bool_value* FormulaSettings_GetPrecisionAsDisplayed(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormulaSettings_SetPrecisionAsDisplayed(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* FormulaSettings_GetEnableCalculationChain(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormulaSettings_SetEnableCalculationChain(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* FormulaSettings_GetPreservePaddingSpaces(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FormulaSettings_SetPreservePaddingSpaces(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_FormulaSettings( void* instance_ptr);

   /**************Class GlobalizationSettings *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_GlobalizationSettings();

   ASPOSE_CELLS_API c_return_bool_value* GlobalizationSettings_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GlobalizationSettings_GetChartSettings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GlobalizationSettings_SetChartSettings(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* GlobalizationSettings_GetPivotSettings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GlobalizationSettings_SetPivotSettings(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* GlobalizationSettings_GetTotalName(void* instance_ptr, int functiontype);
   ASPOSE_CELLS_API c_return_string_value* GlobalizationSettings_GetGrandTotalName(void* instance_ptr, int functiontype);
   ASPOSE_CELLS_API c_return_string_value* GlobalizationSettings_GetDefaultSheetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* GlobalizationSettings_GetTableRowTypeOfHeaders(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* GlobalizationSettings_GetTableRowTypeOfData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* GlobalizationSettings_GetTableRowTypeOfAll(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* GlobalizationSettings_GetTableRowTypeOfTotals(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* GlobalizationSettings_GetTableRowTypeOfCurrent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* GlobalizationSettings_GetErrorValueString(void* instance_ptr, char* err);
   ASPOSE_CELLS_API c_return_string_value* GlobalizationSettings_GetBooleanValueString(void* instance_ptr, bool bv);
   ASPOSE_CELLS_API c_return_string_value* GlobalizationSettings_GetLocalFunctionName(void* instance_ptr, char* standardname);
   ASPOSE_CELLS_API c_return_string_value* GlobalizationSettings_GetStandardFunctionName(void* instance_ptr, char* localname);
   ASPOSE_CELLS_API c_return_string_value* GlobalizationSettings_GetLocalBuiltInName(void* instance_ptr, char* standardname);
   ASPOSE_CELLS_API c_return_string_value* GlobalizationSettings_GetStandardBuiltInName(void* instance_ptr, char* localname);
   ASPOSE_CELLS_API c_return_char_value* GlobalizationSettings_GetListSeparator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_char_value* GlobalizationSettings_GetRowSeparatorOfFormulaArray(void* instance_ptr);
   ASPOSE_CELLS_API c_return_char_value* GlobalizationSettings_GetColumnSeparatorOfFormulaArray(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* GlobalizationSettings_GetStandardHeaderFooterFontStyleName(void* instance_ptr, char* localfontstylename);
   ASPOSE_CELLS_API c_return_string_value* GlobalizationSettings_GetCommentTitleName(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_int_value* GlobalizationSettings_Compare(void* instance_ptr, char* v1, char* v2, bool ignorecase);


   ASPOSE_CELLS_API void Delete_GlobalizationSettings( void* instance_ptr);

   /**************Class HeaderFooterCommand *****************/


   ASPOSE_CELLS_API c_return_bool_value* HeaderFooterCommand_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* HeaderFooterCommand_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* HeaderFooterCommand_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* HeaderFooterCommand_GetText(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_HeaderFooterCommand( void* instance_ptr);

   /**************Class HorizontalPageBreak *****************/


   ASPOSE_CELLS_API c_return_bool_value* HorizontalPageBreak_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* HorizontalPageBreak_GetStartColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* HorizontalPageBreak_GetEndColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* HorizontalPageBreak_GetRow(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_HorizontalPageBreak( void* instance_ptr);

   /**************Class HorizontalPageBreakCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* HorizontalPageBreakCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* HorizontalPageBreakCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* HorizontalPageBreakCollection_Get_String(void* instance_ptr, char* cellname);
   ASPOSE_CELLS_API c_return_int_value* HorizontalPageBreakCollection_Add_Integer_Integer_Integer(void* instance_ptr, int row, int startcolumn, int endcolumn);
   ASPOSE_CELLS_API c_return_int_value* HorizontalPageBreakCollection_Add_Integer(void* instance_ptr, int row);
   ASPOSE_CELLS_API c_return_int_value* HorizontalPageBreakCollection_Add_Integer_Integer(void* instance_ptr, int row, int column);
   ASPOSE_CELLS_API c_return_int_value* HorizontalPageBreakCollection_Add_String(void* instance_ptr, char* cellname);
   ASPOSE_CELLS_API c_return_void_value* HorizontalPageBreakCollection_RemoveAt(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* HorizontalPageBreakCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_HorizontalPageBreakCollection( void* instance_ptr);

   /**************Class HtmlLoadOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_HtmlLoadOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_HtmlLoadOptions_LoadFormat(int loadformat);
   ASPOSE_CELLS_API c_return_ptr_value* New_HtmlLoadOptions_AbstractTextLoadOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* HtmlLoadOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* HtmlLoadOptions_GetLoadFormulas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetLoadFormulas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlLoadOptions_GetSupportDivTag(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetSupportDivTag(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlLoadOptions_GetDeleteRedundantSpaces(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetDeleteRedundantSpaces(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlLoadOptions_GetAutoFitColsAndRows(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetAutoFitColsAndRows(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlLoadOptions_GetHasFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetHasFormula(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* HtmlLoadOptions_GetProgId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* HtmlLoadOptions_GetTableLoadOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* HtmlLoadOptions_GetEncoding(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetEncoding(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* HtmlLoadOptions_GetLoadStyleStrategy(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetLoadStyleStrategy(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlLoadOptions_GetConvertNumericData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetConvertNumericData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlLoadOptions_GetConvertDateTimeData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetConvertDateTimeData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlLoadOptions_GetKeepPrecision(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetKeepPrecision(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* HtmlLoadOptions_GetLoadFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* HtmlLoadOptions_GetPassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetPassword(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlLoadOptions_GetParsingFormulaOnOpen(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetParsingFormulaOnOpen(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlLoadOptions_GetParsingPivotCachedRecords(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetParsingPivotCachedRecords(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetPaperSize(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_int_value* HtmlLoadOptions_GetLanguageCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetLanguageCode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* HtmlLoadOptions_GetRegion(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetRegion(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* HtmlLoadOptions_GetDefaultStyleSettings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* HtmlLoadOptions_GetInterruptMonitor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetInterruptMonitor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlLoadOptions_GetIgnoreNotPrinted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetIgnoreNotPrinted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlLoadOptions_GetCheckDataValid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetCheckDataValid(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlLoadOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlLoadOptions_GetKeepUnparsedData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetKeepUnparsedData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* HtmlLoadOptions_GetLoadFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetLoadFilter(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* HtmlLoadOptions_GetMemorySetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetMemorySetting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* HtmlLoadOptions_GetAutoFitterOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetAutoFitterOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlLoadOptions_GetAutoFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetAutoFilter(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* HtmlLoadOptions_GetFontConfigs(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetFontConfigs(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlLoadOptions_GetIgnoreUselessShapes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetIgnoreUselessShapes(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlLoadOptions_GetPreservePaddingSpacesInFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlLoadOptions_SetPreservePaddingSpacesInFormula(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_HtmlLoadOptions( void* instance_ptr);

   /**************Class HtmlSaveOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_HtmlSaveOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_HtmlSaveOptions_SaveFormat(int saveformat);
   ASPOSE_CELLS_API c_return_ptr_value* New_HtmlSaveOptions_SaveOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetIgnoreInvisibleShapes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetIgnoreInvisibleShapes(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* HtmlSaveOptions_GetPageTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetPageTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* HtmlSaveOptions_GetAttachedFilesDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetAttachedFilesDirectory(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* HtmlSaveOptions_GetAttachedFilesUrlPrefix(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetAttachedFilesUrlPrefix(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* HtmlSaveOptions_GetDefaultFontName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetDefaultFontName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetAddGenericFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetAddGenericFont(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetWorksheetScalable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetWorksheetScalable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_IsExportComments(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetIsExportComments(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* HtmlSaveOptions_GetExportCommentsType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExportCommentsType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetDisableDownlevelRevealedComments(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetDisableDownlevelRevealedComments(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_IsExpImageToTempDir(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetIsExpImageToTempDir(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetImageScalable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetImageScalable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetWidthScalable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetWidthScalable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetExportSingleTab(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExportSingleTab(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetExportImagesAsBase64(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExportImagesAsBase64(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetExportActiveWorksheetOnly(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExportActiveWorksheetOnly(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetExportPrintAreaOnly(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExportPrintAreaOnly(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* HtmlSaveOptions_GetExportArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExportArea(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetParseHtmlTagInCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetParseHtmlTagInCell(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* HtmlSaveOptions_GetHtmlCrossStringType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetHtmlCrossStringType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* HtmlSaveOptions_GetHiddenColDisplayType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetHiddenColDisplayType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* HtmlSaveOptions_GetHiddenRowDisplayType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetHiddenRowDisplayType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* HtmlSaveOptions_GetEncoding(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetEncoding(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* HtmlSaveOptions_GetImageOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetSaveAsSingleFile(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetSaveAsSingleFile(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetShowAllSheets(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetShowAllSheets(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetExportPageHeaders(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExportPageHeaders(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetExportPageFooters(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExportPageFooters(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetExportHiddenWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExportHiddenWorksheet(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetPresentationPreference(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetPresentationPreference(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* HtmlSaveOptions_GetCellCssPrefix(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetCellCssPrefix(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* HtmlSaveOptions_GetTableCssId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetTableCssId(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_IsFullPathLink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetIsFullPathLink(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetExportWorksheetCSSSeparately(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExportWorksheetCSSSeparately(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetExportSimilarBorderStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExportSimilarBorderStyle(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* HtmlSaveOptions_GetMergeEmptyTdType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetMergeEmptyTdType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetExportCellCoordinate(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExportCellCoordinate(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetExportExtraHeadings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExportExtraHeadings(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetExportRowColumnHeadings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExportRowColumnHeadings(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetExportFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExportFormula(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetAddTooltipText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetAddTooltipText(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetExportGridLines(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExportGridLines(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetExportBogusRowData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExportBogusRowData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetExcludeUnusedStyles(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExcludeUnusedStyles(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetExportDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExportDocumentProperties(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetExportWorksheetProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExportWorksheetProperties(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetExportWorkbookProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExportWorkbookProperties(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetExportFrameScriptsAndProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExportFrameScriptsAndProperties(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* HtmlSaveOptions_GetExportDataOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetExportDataOptions(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* HtmlSaveOptions_GetLinkTargetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetLinkTargetType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_IsIECompatible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetIsIECompatible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetFormatDataIgnoreColumnWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetFormatDataIgnoreColumnWidth(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetCalculateFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetCalculateFormula(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_IsJsBrowserCompatible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetIsJsBrowserCompatible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_IsMobileCompatible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetIsMobileCompatible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* HtmlSaveOptions_GetCssStyles(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetCssStyles(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetHideOverflowWrappedText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetHideOverflowWrappedText(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_IsBorderCollapsed(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetIsBorderCollapsed(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetEncodeEntityAsCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetEncodeEntityAsCode(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* HtmlSaveOptions_GetOfficeMathOutputMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetOfficeMathOutputMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* HtmlSaveOptions_GetCellNameAttribute(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetCellNameAttribute(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetDisableCss(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetDisableCss(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetEnableCssCustomProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetEnableCssCustomProperties(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* HtmlSaveOptions_GetHtmlVersion(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetHtmlVersion(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* HtmlSaveOptions_GetSaveFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetClearData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* HtmlSaveOptions_GetCachedFileFolder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetCachedFileFolder(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetValidateMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetValidateMergedAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetMergeAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetMergeAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetCreateDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetCreateDirectory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetSortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetSortNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetSortExternalNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetSortExternalNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetRefreshChartCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetRefreshChartCache(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetUpdateSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetUpdateSmartArt(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlSaveOptions_GetEncryptDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlSaveOptions_SetEncryptDocumentProperties(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_HtmlSaveOptions( void* instance_ptr);

   /**************Class HtmlTableLoadOption *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_HtmlTableLoadOption();

   ASPOSE_CELLS_API c_return_bool_value* HtmlTableLoadOption_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* HtmlTableLoadOption_GetTableIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlTableLoadOption_SetTableIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* HtmlTableLoadOption_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlTableLoadOption_SetId(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* HtmlTableLoadOption_GetOriginalSheetIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlTableLoadOption_SetOriginalSheetIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* HtmlTableLoadOption_GetTargetSheetIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlTableLoadOption_SetTargetSheetIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* HtmlTableLoadOption_GetTableToListObject(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlTableLoadOption_SetTableToListObject(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_HtmlTableLoadOption( void* instance_ptr);

   /**************Class HtmlTableLoadOptionCollection *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_HtmlTableLoadOptionCollection();

   ASPOSE_CELLS_API c_return_bool_value* HtmlTableLoadOptionCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* HtmlTableLoadOptionCollection_GetTableToListObject(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* HtmlTableLoadOptionCollection_SetTableToListObject(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* HtmlTableLoadOptionCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* HtmlTableLoadOptionCollection_Add_HtmlTableLoadOption(void* instance_ptr, void* item);
   ASPOSE_CELLS_API c_return_int_value* HtmlTableLoadOptionCollection_Add_Integer(void* instance_ptr, int tableindex);
   ASPOSE_CELLS_API c_return_int_value* HtmlTableLoadOptionCollection_Add_String(void* instance_ptr, char* tableid);
   ASPOSE_CELLS_API c_return_int_value* HtmlTableLoadOptionCollection_Add_Integer_Integer(void* instance_ptr, int tableindex, int targetsheetindex);
   ASPOSE_CELLS_API c_return_int_value* HtmlTableLoadOptionCollection_Add_String_Integer(void* instance_ptr, char* tableid, int targetsheetindex);
   ASPOSE_CELLS_API c_return_int_value* HtmlTableLoadOptionCollection_Add_Integer_Integer_Integer(void* instance_ptr, int tableindex, int targetsheetindex, int originalsheetindex);
   ASPOSE_CELLS_API c_return_int_value* HtmlTableLoadOptionCollection_Add_String_Integer_Integer(void* instance_ptr, char* tableid, int targetsheetindex, int originalsheetindex);
   ASPOSE_CELLS_API c_return_int_value* HtmlTableLoadOptionCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_HtmlTableLoadOptionCollection( void* instance_ptr);

   /**************Class Hyperlink *****************/


   ASPOSE_CELLS_API c_return_bool_value* Hyperlink_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Hyperlink_GetAddress(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Hyperlink_SetAddress(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Hyperlink_GetTextToDisplay(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Hyperlink_SetTextToDisplay(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* Hyperlink_GetArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Hyperlink_GetScreenTip(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Hyperlink_SetScreenTip(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* Hyperlink_GetLinkType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Hyperlink_Delete(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_Hyperlink( void* instance_ptr);

   /**************Class HyperlinkCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* HyperlinkCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* HyperlinkCollection_Add_Integer_Integer_Integer_Integer_String(void* instance_ptr, int firstrow, int firstcolumn, int totalrows, int totalcolumns, char* address);
   ASPOSE_CELLS_API c_return_int_value* HyperlinkCollection_Add_String_Integer_Integer_String(void* instance_ptr, char* cellname, int totalrows, int totalcolumns, char* address);
   ASPOSE_CELLS_API c_return_int_value* HyperlinkCollection_Add_String_String_String_String_String(void* instance_ptr, char* startcellname, char* endcellname, char* address, char* texttodisplay, char* screentip);
   ASPOSE_CELLS_API c_return_ptr_value* HyperlinkCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* HyperlinkCollection_RemoveAt(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* HyperlinkCollection_Clear(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* HyperlinkCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_HyperlinkCollection( void* instance_ptr);

   /**************Class IconFilter *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_IconFilter(void* obj);

   ASPOSE_CELLS_API c_return_bool_value* IconFilter_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* IconFilter_ToObject(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* IconFilter_GetIconSetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* IconFilter_SetIconSetType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* IconFilter_GetIconId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* IconFilter_SetIconId(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_IconFilter( void* instance_ptr);

   /**************Class IconSet *****************/


   ASPOSE_CELLS_API c_return_bool_value* IconSet_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* IconSet_GetCfIcons(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* IconSet_GetCfvos(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* IconSet_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* IconSet_SetType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* IconSet_IsCustom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* IconSet_GetShowValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* IconSet_SetShowValue(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* IconSet_GetReverse(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* IconSet_SetReverse(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_IconSet( void* instance_ptr);

   /**************Class ImageSaveOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ImageSaveOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_ImageSaveOptions_SaveFormat(int saveformat);
   ASPOSE_CELLS_API c_return_ptr_value* New_ImageSaveOptions_SaveOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* ImageSaveOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ImageSaveOptions_GetImageOrPrintOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ImageSaveOptions_GetSaveFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ImageSaveOptions_GetClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageSaveOptions_SetClearData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* ImageSaveOptions_GetCachedFileFolder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageSaveOptions_SetCachedFileFolder(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* ImageSaveOptions_GetValidateMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageSaveOptions_SetValidateMergedAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImageSaveOptions_GetMergeAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageSaveOptions_SetMergeAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImageSaveOptions_GetCreateDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageSaveOptions_SetCreateDirectory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImageSaveOptions_GetSortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageSaveOptions_SetSortNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImageSaveOptions_GetSortExternalNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageSaveOptions_SetSortExternalNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImageSaveOptions_GetRefreshChartCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageSaveOptions_SetRefreshChartCache(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImageSaveOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageSaveOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImageSaveOptions_GetUpdateSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageSaveOptions_SetUpdateSmartArt(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImageSaveOptions_GetEncryptDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageSaveOptions_SetEncryptDocumentProperties(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_ImageSaveOptions( void* instance_ptr);

   /**************Class ImportTableOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ImportTableOptions();

   ASPOSE_CELLS_API c_return_bool_value* ImportTableOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ImportTableOptions_GetConvertGridStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImportTableOptions_SetConvertGridStyle(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImportTableOptions_GetConvertNumericData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImportTableOptions_SetConvertNumericData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImportTableOptions_GetInsertRows(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImportTableOptions_SetInsertRows(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImportTableOptions_GetShiftFirstRowDown(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImportTableOptions_SetShiftFirstRowDown(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImportTableOptions_IsFieldNameShown(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImportTableOptions_SetIsFieldNameShown(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImportTableOptions_GetExportCaptionAsFieldName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImportTableOptions_SetExportCaptionAsFieldName(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* ImportTableOptions_GetDateFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImportTableOptions_SetDateFormat(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* ImportTableOptions_GetNumberFormats(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImportTableOptions_SetNumberFormats(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_ptr_value* ImportTableOptions_GetIsFormulas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImportTableOptions_SetIsFormulas(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_int_value* ImportTableOptions_GetTotalRows(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImportTableOptions_SetTotalRows(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ImportTableOptions_GetTotalColumns(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImportTableOptions_SetTotalColumns(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ImportTableOptions_GetColumnIndexes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImportTableOptions_SetColumnIndexes(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_ptr_value* ImportTableOptions_GetDefaultValues(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImportTableOptions_SetDefaultValues(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_bool_value* ImportTableOptions_IsHtmlString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImportTableOptions_SetIsHtmlString(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImportTableOptions_GetCheckMergedCells(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImportTableOptions_SetCheckMergedCells(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_ImportTableOptions( void* instance_ptr);

   /**************Class IndividualFontConfigs *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_IndividualFontConfigs();

   ASPOSE_CELLS_API c_return_bool_value* IndividualFontConfigs_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* IndividualFontConfigs_SetFontSubstitutes(void* instance_ptr, char* originalfontname, void* substitutefontnames, int substitutefontnames_length);
   ASPOSE_CELLS_API c_return_ptr_value* IndividualFontConfigs_GetFontSubstitutes(void* instance_ptr, char* originalfontname);
   ASPOSE_CELLS_API c_return_void_value* IndividualFontConfigs_SetFontFolder(void* instance_ptr, char* fontfolder, bool recursive);
   ASPOSE_CELLS_API c_return_void_value* IndividualFontConfigs_SetFontFolders(void* instance_ptr, void* fontfolders, int fontfolders_length, bool recursive);
   ASPOSE_CELLS_API c_return_void_value* IndividualFontConfigs_SetFontSources(void* instance_ptr, void* sources, int sources_length);
   ASPOSE_CELLS_API c_return_ptr_value* IndividualFontConfigs_GetFontSources(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_IndividualFontConfigs( void* instance_ptr);

   /**************Class InsertOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_InsertOptions();

   ASPOSE_CELLS_API c_return_bool_value* InsertOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* InsertOptions_GetCopyFormatType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* InsertOptions_SetCopyFormatType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* InsertOptions_GetUpdateReference(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* InsertOptions_SetUpdateReference(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* InsertOptions_GetFormulaChangeMonitor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* InsertOptions_SetFormulaChangeMonitor(void* instance_ptr, void* value);


   ASPOSE_CELLS_API void Delete_InsertOptions( void* instance_ptr);

   /**************Class InterruptMonitor *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_InterruptMonitor();

   ASPOSE_CELLS_API c_return_bool_value* InterruptMonitor_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* InterruptMonitor_IsInterruptionRequested(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* InterruptMonitor_Interrupt(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_InterruptMonitor( void* instance_ptr);

   /**************Class JsonLoadOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_JsonLoadOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_JsonLoadOptions_LoadOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* JsonLoadOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* JsonLoadOptions_GetStartCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLoadOptions_SetStartCell(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* JsonLoadOptions_GetLayoutOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLoadOptions_SetLayoutOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* JsonLoadOptions_GetMultipleWorksheets(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLoadOptions_SetMultipleWorksheets(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* JsonLoadOptions_GetKeptSchema(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLoadOptions_SetKeptSchema(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* JsonLoadOptions_GetLoadFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* JsonLoadOptions_GetPassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLoadOptions_SetPassword(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* JsonLoadOptions_GetParsingFormulaOnOpen(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLoadOptions_SetParsingFormulaOnOpen(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* JsonLoadOptions_GetParsingPivotCachedRecords(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLoadOptions_SetParsingPivotCachedRecords(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* JsonLoadOptions_SetPaperSize(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_int_value* JsonLoadOptions_GetLanguageCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLoadOptions_SetLanguageCode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* JsonLoadOptions_GetRegion(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLoadOptions_SetRegion(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* JsonLoadOptions_GetDefaultStyleSettings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* JsonLoadOptions_GetInterruptMonitor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLoadOptions_SetInterruptMonitor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* JsonLoadOptions_GetIgnoreNotPrinted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLoadOptions_SetIgnoreNotPrinted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* JsonLoadOptions_GetCheckDataValid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLoadOptions_SetCheckDataValid(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* JsonLoadOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLoadOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* JsonLoadOptions_GetKeepUnparsedData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLoadOptions_SetKeepUnparsedData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* JsonLoadOptions_GetLoadFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLoadOptions_SetLoadFilter(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* JsonLoadOptions_GetMemorySetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLoadOptions_SetMemorySetting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* JsonLoadOptions_GetAutoFitterOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLoadOptions_SetAutoFitterOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* JsonLoadOptions_GetAutoFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLoadOptions_SetAutoFilter(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* JsonLoadOptions_GetFontConfigs(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLoadOptions_SetFontConfigs(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* JsonLoadOptions_GetIgnoreUselessShapes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLoadOptions_SetIgnoreUselessShapes(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* JsonLoadOptions_GetPreservePaddingSpacesInFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLoadOptions_SetPreservePaddingSpacesInFormula(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_JsonLoadOptions( void* instance_ptr);

   /**************Class JsonSaveOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_JsonSaveOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_JsonSaveOptions_SaveOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* JsonSaveOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* JsonSaveOptions_GetExportHyperlinkType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetExportHyperlinkType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* JsonSaveOptions_GetSkipEmptyRows(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetSkipEmptyRows(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* JsonSaveOptions_GetSheetIndexes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetSheetIndexes(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_ptr_value* JsonSaveOptions_GetSchemas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetSchemas(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_ptr_value* JsonSaveOptions_GetExportArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetExportArea(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* JsonSaveOptions_GetHasHeaderRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetHasHeaderRow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* JsonSaveOptions_GetExportAsString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetExportAsString(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* JsonSaveOptions_GetIndent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetIndent(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* JsonSaveOptions_GetExportNestedStructure(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetExportNestedStructure(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* JsonSaveOptions_GetExportEmptyCells(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetExportEmptyCells(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* JsonSaveOptions_GetAlwaysExportAsJsonObject(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetAlwaysExportAsJsonObject(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* JsonSaveOptions_GetToExcelStruct(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetToExcelStruct(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* JsonSaveOptions_GetSaveFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* JsonSaveOptions_GetClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetClearData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* JsonSaveOptions_GetCachedFileFolder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetCachedFileFolder(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* JsonSaveOptions_GetValidateMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetValidateMergedAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* JsonSaveOptions_GetMergeAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetMergeAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* JsonSaveOptions_GetCreateDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetCreateDirectory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* JsonSaveOptions_GetSortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetSortNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* JsonSaveOptions_GetSortExternalNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetSortExternalNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* JsonSaveOptions_GetRefreshChartCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetRefreshChartCache(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* JsonSaveOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* JsonSaveOptions_GetUpdateSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetUpdateSmartArt(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* JsonSaveOptions_GetEncryptDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonSaveOptions_SetEncryptDocumentProperties(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_JsonSaveOptions( void* instance_ptr);

   /**************Class License *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_License();

   ASPOSE_CELLS_API c_return_bool_value* License_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* License_SetLicense_String(void* instance_ptr, char* licensename);
   ASPOSE_CELLS_API c_return_void_value* License_SetLicense_Stream(void* instance_ptr, void* stream, int stream_length);


   ASPOSE_CELLS_API void Delete_License( void* instance_ptr);

   /**************Class LoadFilter *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_LoadFilter();
   ASPOSE_CELLS_API c_return_ptr_value* New_LoadFilter_LoadDataFilterOptions(int opts);

   ASPOSE_CELLS_API c_return_bool_value* LoadFilter_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* LoadFilter_GetLoadDataFilterOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LoadFilter_SetLoadDataFilterOptions(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* LoadFilter_GetSheetsInLoadingOrder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LoadFilter_StartSheet(void* instance_ptr, void* sheet);

   ASPOSE_CELLS_API c_return_int_value* LoadFilter_Get__loadDataFilterOptions( void* instance_ptr );
   ASPOSE_CELLS_API void LoadFilter_Set__loadDataFilterOptions( void* instance_ptr, int value );

   ASPOSE_CELLS_API void Delete_LoadFilter( void* instance_ptr);

   /**************Class LoadOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_LoadOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_LoadOptions_LoadFormat(int loadformat);

   ASPOSE_CELLS_API c_return_bool_value* LoadOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* LoadOptions_GetLoadFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* LoadOptions_GetPassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LoadOptions_SetPassword(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* LoadOptions_GetParsingFormulaOnOpen(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LoadOptions_SetParsingFormulaOnOpen(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* LoadOptions_GetParsingPivotCachedRecords(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LoadOptions_SetParsingPivotCachedRecords(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* LoadOptions_SetPaperSize(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_int_value* LoadOptions_GetLanguageCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LoadOptions_SetLanguageCode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LoadOptions_GetRegion(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LoadOptions_SetRegion(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* LoadOptions_GetDefaultStyleSettings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LoadOptions_GetInterruptMonitor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LoadOptions_SetInterruptMonitor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* LoadOptions_GetIgnoreNotPrinted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LoadOptions_SetIgnoreNotPrinted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* LoadOptions_GetCheckDataValid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LoadOptions_SetCheckDataValid(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* LoadOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LoadOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* LoadOptions_GetKeepUnparsedData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LoadOptions_SetKeepUnparsedData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* LoadOptions_GetLoadFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LoadOptions_SetLoadFilter(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* LoadOptions_GetMemorySetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LoadOptions_SetMemorySetting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* LoadOptions_GetAutoFitterOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LoadOptions_SetAutoFitterOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* LoadOptions_GetAutoFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LoadOptions_SetAutoFilter(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* LoadOptions_GetFontConfigs(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LoadOptions_SetFontConfigs(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* LoadOptions_GetIgnoreUselessShapes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LoadOptions_SetIgnoreUselessShapes(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* LoadOptions_GetPreservePaddingSpacesInFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LoadOptions_SetPreservePaddingSpacesInFormula(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_LoadOptions( void* instance_ptr);

   /**************Class MarkdownSaveOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_MarkdownSaveOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_MarkdownSaveOptions_SaveOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* MarkdownSaveOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* MarkdownSaveOptions_GetEncoding(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MarkdownSaveOptions_SetEncoding(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* MarkdownSaveOptions_GetFormatStrategy(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MarkdownSaveOptions_SetFormatStrategy(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* MarkdownSaveOptions_GetLineSeparator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MarkdownSaveOptions_SetLineSeparator(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* MarkdownSaveOptions_GetSaveFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* MarkdownSaveOptions_GetClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MarkdownSaveOptions_SetClearData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* MarkdownSaveOptions_GetCachedFileFolder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MarkdownSaveOptions_SetCachedFileFolder(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* MarkdownSaveOptions_GetValidateMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MarkdownSaveOptions_SetValidateMergedAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* MarkdownSaveOptions_GetMergeAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MarkdownSaveOptions_SetMergeAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* MarkdownSaveOptions_GetCreateDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MarkdownSaveOptions_SetCreateDirectory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* MarkdownSaveOptions_GetSortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MarkdownSaveOptions_SetSortNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* MarkdownSaveOptions_GetSortExternalNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MarkdownSaveOptions_SetSortExternalNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* MarkdownSaveOptions_GetRefreshChartCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MarkdownSaveOptions_SetRefreshChartCache(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* MarkdownSaveOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MarkdownSaveOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* MarkdownSaveOptions_GetUpdateSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MarkdownSaveOptions_SetUpdateSmartArt(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* MarkdownSaveOptions_GetEncryptDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MarkdownSaveOptions_SetEncryptDocumentProperties(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_MarkdownSaveOptions( void* instance_ptr);

   /**************Class MemoryFontSource *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_MemoryFontSource_Stream(void* fontdata, int fontdata_length);
   ASPOSE_CELLS_API c_return_ptr_value* New_MemoryFontSource_FontSourceBase(void* src);

   ASPOSE_CELLS_API c_return_bool_value* MemoryFontSource_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* MemoryFontSource_GetFontData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* MemoryFontSource_GetType(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_MemoryFontSource( void* instance_ptr);

   /**************Class MultipleFilterCollection *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_MultipleFilterCollection();
   ASPOSE_CELLS_API c_return_ptr_value* New_MultipleFilterCollection_Object(void* obj);

   ASPOSE_CELLS_API c_return_bool_value* MultipleFilterCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* MultipleFilterCollection_ToObject(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* MultipleFilterCollection_GetMatchBlank(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MultipleFilterCollection_SetMatchBlank(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* MultipleFilterCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* MultipleFilterCollection_Add(void* instance_ptr, char* filter);
   ASPOSE_CELLS_API c_return_int_value* MultipleFilterCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_MultipleFilterCollection( void* instance_ptr);

   /**************Class Name *****************/


   ASPOSE_CELLS_API c_return_bool_value* Name_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Name_GetComment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Name_SetComment(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Name_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Name_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Name_GetFullText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Name_GetRefersTo(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Name_SetRefersTo_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Name_GetR1C1RefersTo(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Name_SetR1C1RefersTo(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Name_GetRefersTo_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* Name_GetRefersTo_Boolean_Boolean_Integer_Integer(void* instance_ptr, bool isr1c1, bool islocal, int row, int column);
   ASPOSE_CELLS_API c_return_void_value* Name_SetRefersTo_String_Boolean_Boolean(void* instance_ptr, char* refersto, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_bool_value* Name_IsReferred(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Name_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Name_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Name_GetSheetIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Name_SetSheetIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* Name_ToString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Name_GetRanges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Name_GetRanges_Boolean(void* instance_ptr, bool recalculate);
   ASPOSE_CELLS_API c_return_ptr_value* Name_GetReferredAreas(void* instance_ptr, bool recalculate);
   ASPOSE_CELLS_API c_return_ptr_value* Name_GetRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Name_GetRange_Boolean(void* instance_ptr, bool recalculate);
   ASPOSE_CELLS_API c_return_ptr_value* Name_GetRange_Integer_Integer_Integer(void* instance_ptr, int sheetindex, int row, int column);


   ASPOSE_CELLS_API void Delete_Name( void* instance_ptr);

   /**************Class NameCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* NameCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* NameCollection_Add(void* instance_ptr, char* text);
   ASPOSE_CELLS_API c_return_ptr_value* NameCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* NameCollection_Filter(void* instance_ptr, int type_, int sheetindex);
   ASPOSE_CELLS_API c_return_ptr_value* NameCollection_Get_String(void* instance_ptr, char* text);
   ASPOSE_CELLS_API c_return_void_value* NameCollection_Remove_U16StringArray(void* instance_ptr, void* names, int names_length);
   ASPOSE_CELLS_API c_return_void_value* NameCollection_Remove_String(void* instance_ptr, char* text);
   ASPOSE_CELLS_API c_return_void_value* NameCollection_RemoveAt(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* NameCollection_Clear(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NameCollection_RemoveDuplicateNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NameCollection_Sort(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* NameCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_NameCollection( void* instance_ptr);

   /**************Class NegativeBarFormat *****************/


   ASPOSE_CELLS_API c_return_bool_value* NegativeBarFormat_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* NegativeBarFormat_GetBorderColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NegativeBarFormat_SetBorderColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* NegativeBarFormat_GetBorderColorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NegativeBarFormat_SetBorderColorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* NegativeBarFormat_GetColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NegativeBarFormat_SetColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* NegativeBarFormat_GetColorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NegativeBarFormat_SetColorType(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_NegativeBarFormat( void* instance_ptr);

   /**************Class Object *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_Object();
   ASPOSE_CELLS_API c_return_ptr_value* New_Object_Boolean(bool value);
   ASPOSE_CELLS_API c_return_ptr_value* New_Object_Integer(int value);
   ASPOSE_CELLS_API c_return_ptr_value* New_Object_Byte(uint8_t value);
   ASPOSE_CELLS_API c_return_ptr_value* New_Object_Floating(float value);
   ASPOSE_CELLS_API c_return_ptr_value* New_Object_Double(double value);
   ASPOSE_CELLS_API c_return_ptr_value* New_Object_Date(void* value);
   ASPOSE_CELLS_API c_return_ptr_value* New_Object_Color(void* value);
   ASPOSE_CELLS_API c_return_ptr_value* New_Object_String(char* value);
   ASPOSE_CELLS_API c_return_ptr_value* New_Object_Range(void* value);
   ASPOSE_CELLS_API c_return_ptr_value* New_Object_ObjectArray(void* value, int value_length);
   ASPOSE_CELLS_API c_return_ptr_value* New_Object_Object2Array(void* value, int value_length, int value_column_length);

   ASPOSE_CELLS_API c_return_int_value* Object_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Object_GetNumberType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Object_IsBool(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Object_IsNumber(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Object_IsInt32(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Object_IsDouble(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Object_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Object_IsDate(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Object_IsColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Object_IsString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Object_IsRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Object_IsReferredArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Object_IsArray1D(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Object_IsArray2D(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Object_IsObject(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Object_ToBool(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Object_ToInt8(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Object_ToUInt8(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Object_ToInt16(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Object_ToUInt16(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Object_ToInt32(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Object_ToUInt32(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Object_ToInt64(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Object_ToUInt64(void* instance_ptr);
   ASPOSE_CELLS_API c_return_float_value* Object_ToFloat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Object_ToDouble(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Object_AsInt32(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Object_AsDouble(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Object_ToString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Object_ToDate(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Object_ToColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Object_ToRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Object_ToReferredArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Object_ToArray1D(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Object_ToArray2D(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_Object( void* instance_ptr);

   /**************Class OdsLoadOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_OdsLoadOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_OdsLoadOptions_LoadFormat(int type_);
   ASPOSE_CELLS_API c_return_ptr_value* New_OdsLoadOptions_LoadOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* OdsLoadOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* OdsLoadOptions_GetApplyExcelDefaultStyleToHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsLoadOptions_SetApplyExcelDefaultStyleToHyperlink(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OdsLoadOptions_GetRefreshPivotTables(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsLoadOptions_SetRefreshPivotTables(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OdsLoadOptions_IsClassicPivotTable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsLoadOptions_SetIsClassicPivotTable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* OdsLoadOptions_GetLoadFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* OdsLoadOptions_GetPassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsLoadOptions_SetPassword(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* OdsLoadOptions_GetParsingFormulaOnOpen(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsLoadOptions_SetParsingFormulaOnOpen(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OdsLoadOptions_GetParsingPivotCachedRecords(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsLoadOptions_SetParsingPivotCachedRecords(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* OdsLoadOptions_SetPaperSize(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_int_value* OdsLoadOptions_GetLanguageCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsLoadOptions_SetLanguageCode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OdsLoadOptions_GetRegion(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsLoadOptions_SetRegion(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* OdsLoadOptions_GetDefaultStyleSettings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* OdsLoadOptions_GetInterruptMonitor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsLoadOptions_SetInterruptMonitor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* OdsLoadOptions_GetIgnoreNotPrinted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsLoadOptions_SetIgnoreNotPrinted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OdsLoadOptions_GetCheckDataValid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsLoadOptions_SetCheckDataValid(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OdsLoadOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsLoadOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OdsLoadOptions_GetKeepUnparsedData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsLoadOptions_SetKeepUnparsedData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* OdsLoadOptions_GetLoadFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsLoadOptions_SetLoadFilter(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* OdsLoadOptions_GetMemorySetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsLoadOptions_SetMemorySetting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* OdsLoadOptions_GetAutoFitterOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsLoadOptions_SetAutoFitterOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* OdsLoadOptions_GetAutoFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsLoadOptions_SetAutoFilter(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* OdsLoadOptions_GetFontConfigs(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsLoadOptions_SetFontConfigs(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* OdsLoadOptions_GetIgnoreUselessShapes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsLoadOptions_SetIgnoreUselessShapes(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OdsLoadOptions_GetPreservePaddingSpacesInFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsLoadOptions_SetPreservePaddingSpacesInFormula(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_OdsLoadOptions( void* instance_ptr);

   /**************Class OdsSaveOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_OdsSaveOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_OdsSaveOptions_SaveFormat(int saveformat);
   ASPOSE_CELLS_API c_return_ptr_value* New_OdsSaveOptions_SaveOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* OdsSaveOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* OdsSaveOptions_GetGeneratorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsSaveOptions_SetGeneratorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OdsSaveOptions_GetOdfStrictVersion(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsSaveOptions_SetOdfStrictVersion(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* OdsSaveOptions_GetIgnorePivotTables(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsSaveOptions_SetIgnorePivotTables(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* OdsSaveOptions_GetSaveFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* OdsSaveOptions_GetClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsSaveOptions_SetClearData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* OdsSaveOptions_GetCachedFileFolder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsSaveOptions_SetCachedFileFolder(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* OdsSaveOptions_GetValidateMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsSaveOptions_SetValidateMergedAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OdsSaveOptions_GetMergeAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsSaveOptions_SetMergeAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OdsSaveOptions_GetCreateDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsSaveOptions_SetCreateDirectory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OdsSaveOptions_GetSortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsSaveOptions_SetSortNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OdsSaveOptions_GetSortExternalNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsSaveOptions_SetSortExternalNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OdsSaveOptions_GetRefreshChartCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsSaveOptions_SetRefreshChartCache(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OdsSaveOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsSaveOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OdsSaveOptions_GetUpdateSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsSaveOptions_SetUpdateSmartArt(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OdsSaveOptions_GetEncryptDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsSaveOptions_SetEncryptDocumentProperties(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_OdsSaveOptions( void* instance_ptr);

   /**************Class OoxmlSaveOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_OoxmlSaveOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_OoxmlSaveOptions_SaveFormat(int saveformat);
   ASPOSE_CELLS_API c_return_ptr_value* New_OoxmlSaveOptions_SaveOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* OoxmlSaveOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* OoxmlSaveOptions_GetExportCellName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OoxmlSaveOptions_SetExportCellName(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OoxmlSaveOptions_GetUpdateZoom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OoxmlSaveOptions_SetUpdateZoom(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OoxmlSaveOptions_GetEnableZip64(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OoxmlSaveOptions_SetEnableZip64(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OoxmlSaveOptions_GetEmbedOoxmlAsOleObject(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OoxmlSaveOptions_SetEmbedOoxmlAsOleObject(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* OoxmlSaveOptions_GetCompressionType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OoxmlSaveOptions_SetCompressionType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* OoxmlSaveOptions_GetWpsCompatibility(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OoxmlSaveOptions_SetWpsCompatibility(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* OoxmlSaveOptions_GetSaveFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* OoxmlSaveOptions_GetClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OoxmlSaveOptions_SetClearData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* OoxmlSaveOptions_GetCachedFileFolder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OoxmlSaveOptions_SetCachedFileFolder(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* OoxmlSaveOptions_GetValidateMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OoxmlSaveOptions_SetValidateMergedAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OoxmlSaveOptions_GetMergeAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OoxmlSaveOptions_SetMergeAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OoxmlSaveOptions_GetCreateDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OoxmlSaveOptions_SetCreateDirectory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OoxmlSaveOptions_GetSortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OoxmlSaveOptions_SetSortNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OoxmlSaveOptions_GetSortExternalNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OoxmlSaveOptions_SetSortExternalNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OoxmlSaveOptions_GetRefreshChartCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OoxmlSaveOptions_SetRefreshChartCache(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OoxmlSaveOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OoxmlSaveOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OoxmlSaveOptions_GetUpdateSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OoxmlSaveOptions_SetUpdateSmartArt(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OoxmlSaveOptions_GetEncryptDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OoxmlSaveOptions_SetEncryptDocumentProperties(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_OoxmlSaveOptions( void* instance_ptr);

   /**************Class Outline *****************/


   ASPOSE_CELLS_API c_return_bool_value* Outline_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Outline_GetSummaryRowBelow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Outline_SetSummaryRowBelow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Outline_GetSummaryColumnRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Outline_SetSummaryColumnRight(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_Outline( void* instance_ptr);

   /**************Class PageSetup *****************/


   ASPOSE_CELLS_API c_return_bool_value* PageSetup_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PageSetup_GetODSPageBackground(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_Copy(void* instance_ptr, void* source, void* copyoptions);
   ASPOSE_CELLS_API c_return_string_value* PageSetup_GetPrintArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetPrintArea(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* PageSetup_GetPrintTitleColumns(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetPrintTitleColumns(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* PageSetup_GetPrintTitleRows(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetPrintTitleRows(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* PageSetup_GetBlackAndWhite(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetBlackAndWhite(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PageSetup_GetCenterHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetCenterHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PageSetup_GetCenterVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetCenterVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PageSetup_GetPrintDraft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetPrintDraft(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_double_value* PageSetup_GetFooterMargin(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetFooterMargin(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* PageSetup_GetFooterMarginInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetFooterMarginInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* PageSetup_GetHeaderMargin(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetHeaderMargin(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* PageSetup_GetHeaderMarginInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetHeaderMarginInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* PageSetup_GetPrinterSettings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetPrinterSettings(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_double_value* PageSetup_GetLeftMargin(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetLeftMargin(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* PageSetup_GetLeftMarginInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetLeftMarginInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* PageSetup_GetRightMargin(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetRightMargin(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* PageSetup_GetRightMarginInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetRightMarginInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* PageSetup_GetTopMargin(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetTopMargin(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* PageSetup_GetTopMarginInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetTopMarginInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* PageSetup_GetBottomMargin(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetBottomMargin(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* PageSetup_GetBottomMarginInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetBottomMarginInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* PageSetup_GetFirstPageNumber(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetFirstPageNumber(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetFitToPages(void* instance_ptr, int wide, int tall);
   ASPOSE_CELLS_API c_return_int_value* PageSetup_GetFitToPagesTall(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetFitToPagesTall(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PageSetup_GetFitToPagesWide(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetFitToPagesWide(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* PageSetup_IsPercentScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetIsPercentScale(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* PageSetup_GetOrder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetOrder(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* PageSetup_IsAutomaticPaperSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PageSetup_GetPaperSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetPaperSize(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* PageSetup_GetPaperWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* PageSetup_GetPaperHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_CustomPaperSize(void* instance_ptr, double width, double height);
   ASPOSE_CELLS_API c_return_int_value* PageSetup_GetOrientation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetOrientation(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PageSetup_GetPrintComments(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetPrintComments(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PageSetup_GetPrintErrors(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetPrintErrors(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* PageSetup_GetPrintHeadings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetPrintHeadings(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PageSetup_GetPrintGridlines(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetPrintGridlines(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* PageSetup_GetZoom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetZoom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* PageSetup_IsAutoFirstPageNumber(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetIsAutoFirstPageNumber(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* PageSetup_GetPrintQuality(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetPrintQuality(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PageSetup_GetPrintCopies(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetPrintCopies(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_ClearHeaderFooter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PageSetup_GetHeader(void* instance_ptr, int section);
   ASPOSE_CELLS_API c_return_ptr_value* PageSetup_GetCommands(void* instance_ptr, char* headerfooterscript);
   ASPOSE_CELLS_API c_return_string_value* PageSetup_GetFooter(void* instance_ptr, int section);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetHeader(void* instance_ptr, int section, char* headerscript);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetFooter(void* instance_ptr, int section, char* footerscript);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetEvenHeader(void* instance_ptr, int section, char* headerscript);
   ASPOSE_CELLS_API c_return_string_value* PageSetup_GetEvenHeader(void* instance_ptr, int section);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetEvenFooter(void* instance_ptr, int section, char* footerscript);
   ASPOSE_CELLS_API c_return_string_value* PageSetup_GetEvenFooter(void* instance_ptr, int section);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetFirstPageHeader(void* instance_ptr, int section, char* headerscript);
   ASPOSE_CELLS_API c_return_string_value* PageSetup_GetFirstPageHeader(void* instance_ptr, int section);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetFirstPageFooter(void* instance_ptr, int section, char* footerscript);
   ASPOSE_CELLS_API c_return_string_value* PageSetup_GetFirstPageFooter(void* instance_ptr, int section);
   ASPOSE_CELLS_API c_return_bool_value* PageSetup_IsHFDiffOddEven(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetIsHFDiffOddEven(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PageSetup_IsHFDiffFirst(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetIsHFDiffFirst(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PageSetup_IsHFScaleWithDoc(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetIsHFScaleWithDoc(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PageSetup_IsHFAlignMargins(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageSetup_SetIsHFAlignMargins(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* PageSetup_SetHeaderPicture(void* instance_ptr, int section, void* headerpicture, int headerpicture_length);
   ASPOSE_CELLS_API c_return_ptr_value* PageSetup_SetFooterPicture(void* instance_ptr, int section, void* footerpicture, int footerpicture_length);
   ASPOSE_CELLS_API c_return_ptr_value* PageSetup_SetPicture(void* instance_ptr, bool isfirst, bool iseven, bool isheader, int section, void* imagedata, int imagedata_length);
   ASPOSE_CELLS_API c_return_ptr_value* PageSetup_GetPicture_Boolean_Integer(void* instance_ptr, bool isheader, int section);
   ASPOSE_CELLS_API c_return_ptr_value* PageSetup_GetPicture_Boolean_Boolean_Boolean_Integer(void* instance_ptr, bool isfirst, bool iseven, bool isheader, int section);


   ASPOSE_CELLS_API void Delete_PageSetup( void* instance_ptr);

   /**************Class PaginatedSaveOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PaginatedSaveOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* PaginatedSaveOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PaginatedSaveOptions_GetDefaultFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetDefaultFont(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* PaginatedSaveOptions_GetCheckWorkbookDefaultFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetCheckWorkbookDefaultFont(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetCheckFontCompatibility(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PaginatedSaveOptions_GetCheckFontCompatibility(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetIsFontSubstitutionCharGranularity(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PaginatedSaveOptions_IsFontSubstitutionCharGranularity(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PaginatedSaveOptions_GetOnePagePerSheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetOnePagePerSheet(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PaginatedSaveOptions_GetAllColumnsInOnePagePerSheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetAllColumnsInOnePagePerSheet(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PaginatedSaveOptions_GetIgnoreError(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetIgnoreError(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PaginatedSaveOptions_GetOutputBlankPageWhenNothingToPrint(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetOutputBlankPageWhenNothingToPrint(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetPageIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PaginatedSaveOptions_GetPageIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetPageCount(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PaginatedSaveOptions_GetPageCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PaginatedSaveOptions_GetPrintingPageType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetPrintingPageType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PaginatedSaveOptions_GetGridlineType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetGridlineType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PaginatedSaveOptions_GetTextCrossType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetTextCrossType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PaginatedSaveOptions_GetDefaultEditLanguage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetDefaultEditLanguage(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* PaginatedSaveOptions_GetSheetSet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetSheetSet(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* PaginatedSaveOptions_GetDrawObjectEventHandler(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetDrawObjectEventHandler(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* PaginatedSaveOptions_GetEmfRenderSetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetEmfRenderSetting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PaginatedSaveOptions_GetSaveFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PaginatedSaveOptions_GetClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetClearData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* PaginatedSaveOptions_GetCachedFileFolder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetCachedFileFolder(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* PaginatedSaveOptions_GetValidateMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetValidateMergedAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PaginatedSaveOptions_GetMergeAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetMergeAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PaginatedSaveOptions_GetCreateDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetCreateDirectory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PaginatedSaveOptions_GetSortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetSortNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PaginatedSaveOptions_GetSortExternalNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetSortExternalNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PaginatedSaveOptions_GetRefreshChartCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetRefreshChartCache(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PaginatedSaveOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PaginatedSaveOptions_GetUpdateSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetUpdateSmartArt(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PaginatedSaveOptions_GetEncryptDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaginatedSaveOptions_SetEncryptDocumentProperties(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_PaginatedSaveOptions( void* instance_ptr);

   /**************Class PaneCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* PaneCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PaneCollection_GetFirstVisibleRowOfBottomPane(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaneCollection_SetFirstVisibleRowOfBottomPane(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PaneCollection_GetFirstVisibleColumnOfRightPane(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaneCollection_SetFirstVisibleColumnOfRightPane(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PaneCollection_GetAcitvePaneType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PaneCollection_SetAcitvePaneType(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_PaneCollection( void* instance_ptr);

   /**************Class PasteOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PasteOptions();

   ASPOSE_CELLS_API c_return_bool_value* PasteOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PasteOptions_GetPasteType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PasteOptions_SetPasteType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* PasteOptions_GetSkipBlanks(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PasteOptions_SetSkipBlanks(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PasteOptions_GetOnlyVisibleCells(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PasteOptions_SetOnlyVisibleCells(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PasteOptions_GetTranspose(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PasteOptions_SetTranspose(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* PasteOptions_GetOperationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PasteOptions_SetOperationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* PasteOptions_GetIgnoreLinksToOriginalFile(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PasteOptions_SetIgnoreLinksToOriginalFile(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_PasteOptions( void* instance_ptr);

   /**************Class PclSaveOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PclSaveOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_PclSaveOptions_PaginatedSaveOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* PclSaveOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_AddPrinterFont(void* instance_ptr, char* fontfullname, char* fontpclname);
   ASPOSE_CELLS_API c_return_string_value* PclSaveOptions_GetDefaultFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetDefaultFont(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* PclSaveOptions_GetCheckWorkbookDefaultFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetCheckWorkbookDefaultFont(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetCheckFontCompatibility(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PclSaveOptions_GetCheckFontCompatibility(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetIsFontSubstitutionCharGranularity(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PclSaveOptions_IsFontSubstitutionCharGranularity(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PclSaveOptions_GetOnePagePerSheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetOnePagePerSheet(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PclSaveOptions_GetAllColumnsInOnePagePerSheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetAllColumnsInOnePagePerSheet(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PclSaveOptions_GetIgnoreError(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetIgnoreError(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PclSaveOptions_GetOutputBlankPageWhenNothingToPrint(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetOutputBlankPageWhenNothingToPrint(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetPageIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PclSaveOptions_GetPageIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetPageCount(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PclSaveOptions_GetPageCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PclSaveOptions_GetPrintingPageType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetPrintingPageType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PclSaveOptions_GetGridlineType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetGridlineType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PclSaveOptions_GetTextCrossType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetTextCrossType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PclSaveOptions_GetDefaultEditLanguage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetDefaultEditLanguage(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* PclSaveOptions_GetSheetSet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetSheetSet(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* PclSaveOptions_GetDrawObjectEventHandler(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetDrawObjectEventHandler(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* PclSaveOptions_GetEmfRenderSetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetEmfRenderSetting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PclSaveOptions_GetSaveFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PclSaveOptions_GetClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetClearData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* PclSaveOptions_GetCachedFileFolder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetCachedFileFolder(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* PclSaveOptions_GetValidateMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetValidateMergedAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PclSaveOptions_GetMergeAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetMergeAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PclSaveOptions_GetCreateDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetCreateDirectory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PclSaveOptions_GetSortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetSortNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PclSaveOptions_GetSortExternalNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetSortExternalNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PclSaveOptions_GetRefreshChartCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetRefreshChartCache(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PclSaveOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PclSaveOptions_GetUpdateSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetUpdateSmartArt(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PclSaveOptions_GetEncryptDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PclSaveOptions_SetEncryptDocumentProperties(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_PclSaveOptions( void* instance_ptr);

   /**************Class PdfSaveOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PdfSaveOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_PdfSaveOptions_PaginatedSaveOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_GetEmbedStandardWindowsFonts(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetEmbedStandardWindowsFonts(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* PdfSaveOptions_GetBookmark(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetBookmark(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* PdfSaveOptions_GetCompliance(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetCompliance(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* PdfSaveOptions_GetSecurityOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetSecurityOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_GetCalculateFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetCalculateFormula(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* PdfSaveOptions_GetPdfCompression(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetPdfCompression(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetImageResample(void* instance_ptr, int desiredppi, int jpegquality);
   ASPOSE_CELLS_API c_return_ptr_value* PdfSaveOptions_GetCreatedTime(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetCreatedTime(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* PdfSaveOptions_GetProducer(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetProducer(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* PdfSaveOptions_GetOptimizationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetOptimizationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PdfSaveOptions_GetCustomPropertiesExport(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetCustomPropertiesExport(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_GetExportDocumentStructure(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetExportDocumentStructure(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_GetDisplayDocTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetDisplayDocTitle(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* PdfSaveOptions_GetFontEncoding(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetFontEncoding(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* PdfSaveOptions_GetWatermark(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetWatermark(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_GetEmbedAttachments(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetEmbedAttachments(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* PdfSaveOptions_GetDefaultFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetDefaultFont(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_GetCheckWorkbookDefaultFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetCheckWorkbookDefaultFont(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetCheckFontCompatibility(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_GetCheckFontCompatibility(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetIsFontSubstitutionCharGranularity(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_IsFontSubstitutionCharGranularity(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_GetOnePagePerSheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetOnePagePerSheet(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_GetAllColumnsInOnePagePerSheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetAllColumnsInOnePagePerSheet(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_GetIgnoreError(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetIgnoreError(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_GetOutputBlankPageWhenNothingToPrint(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetOutputBlankPageWhenNothingToPrint(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetPageIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PdfSaveOptions_GetPageIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetPageCount(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PdfSaveOptions_GetPageCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PdfSaveOptions_GetPrintingPageType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetPrintingPageType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PdfSaveOptions_GetGridlineType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetGridlineType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PdfSaveOptions_GetTextCrossType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetTextCrossType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PdfSaveOptions_GetDefaultEditLanguage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetDefaultEditLanguage(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* PdfSaveOptions_GetSheetSet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetSheetSet(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* PdfSaveOptions_GetDrawObjectEventHandler(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetDrawObjectEventHandler(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* PdfSaveOptions_GetEmfRenderSetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetEmfRenderSetting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PdfSaveOptions_GetSaveFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_GetClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetClearData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* PdfSaveOptions_GetCachedFileFolder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetCachedFileFolder(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_GetValidateMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetValidateMergedAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_GetMergeAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetMergeAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_GetCreateDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetCreateDirectory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_GetSortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetSortNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_GetSortExternalNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetSortExternalNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_GetRefreshChartCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetRefreshChartCache(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_GetUpdateSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetUpdateSmartArt(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSaveOptions_GetEncryptDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSaveOptions_SetEncryptDocumentProperties(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_PdfSaveOptions( void* instance_ptr);

   /**************Class PptxSaveOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PptxSaveOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_PptxSaveOptions_Boolean(bool saveasimage);
   ASPOSE_CELLS_API c_return_ptr_value* New_PptxSaveOptions_PaginatedSaveOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* PptxSaveOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PptxSaveOptions_GetIgnoreHiddenRows(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetIgnoreHiddenRows(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* PptxSaveOptions_GetAdjustFontSizeForRowType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetAdjustFontSizeForRowType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PptxSaveOptions_GetExportViewType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetExportViewType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* PptxSaveOptions_GetDefaultFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetDefaultFont(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* PptxSaveOptions_GetCheckWorkbookDefaultFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetCheckWorkbookDefaultFont(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetCheckFontCompatibility(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PptxSaveOptions_GetCheckFontCompatibility(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetIsFontSubstitutionCharGranularity(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PptxSaveOptions_IsFontSubstitutionCharGranularity(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PptxSaveOptions_GetOnePagePerSheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetOnePagePerSheet(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PptxSaveOptions_GetAllColumnsInOnePagePerSheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetAllColumnsInOnePagePerSheet(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PptxSaveOptions_GetIgnoreError(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetIgnoreError(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PptxSaveOptions_GetOutputBlankPageWhenNothingToPrint(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetOutputBlankPageWhenNothingToPrint(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetPageIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PptxSaveOptions_GetPageIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetPageCount(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PptxSaveOptions_GetPageCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PptxSaveOptions_GetPrintingPageType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetPrintingPageType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PptxSaveOptions_GetGridlineType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetGridlineType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PptxSaveOptions_GetTextCrossType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetTextCrossType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PptxSaveOptions_GetDefaultEditLanguage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetDefaultEditLanguage(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* PptxSaveOptions_GetSheetSet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetSheetSet(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* PptxSaveOptions_GetDrawObjectEventHandler(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetDrawObjectEventHandler(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* PptxSaveOptions_GetEmfRenderSetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetEmfRenderSetting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PptxSaveOptions_GetSaveFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PptxSaveOptions_GetClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetClearData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* PptxSaveOptions_GetCachedFileFolder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetCachedFileFolder(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* PptxSaveOptions_GetValidateMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetValidateMergedAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PptxSaveOptions_GetMergeAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetMergeAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PptxSaveOptions_GetCreateDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetCreateDirectory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PptxSaveOptions_GetSortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetSortNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PptxSaveOptions_GetSortExternalNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetSortExternalNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PptxSaveOptions_GetRefreshChartCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetRefreshChartCache(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PptxSaveOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PptxSaveOptions_GetUpdateSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetUpdateSmartArt(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PptxSaveOptions_GetEncryptDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PptxSaveOptions_SetEncryptDocumentProperties(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_PptxSaveOptions( void* instance_ptr);

   /**************Class ProtectedRange *****************/


   ASPOSE_CELLS_API c_return_bool_value* ProtectedRange_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ProtectedRange_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ProtectedRange_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* ProtectedRange_GetCellArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ProtectedRange_GetAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ProtectedRange_AddArea(void* instance_ptr, int startrow, int startcolumn, int endrow, int endcolumn);
   ASPOSE_CELLS_API c_return_bool_value* ProtectedRange_IsProtectedWithPassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ProtectedRange_GetPassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ProtectedRange_SetPassword(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ProtectedRange_GetSecurityDescriptor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ProtectedRange_SetSecurityDescriptor(void* instance_ptr, char* value);


   ASPOSE_CELLS_API void Delete_ProtectedRange( void* instance_ptr);

   /**************Class ProtectedRangeCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ProtectedRangeCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ProtectedRangeCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* ProtectedRangeCollection_Add(void* instance_ptr, char* name, int startrow, int startcolumn, int endrow, int endcolumn);
   ASPOSE_CELLS_API c_return_int_value* ProtectedRangeCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ProtectedRangeCollection( void* instance_ptr);

   /**************Class Protection *****************/


   ASPOSE_CELLS_API c_return_bool_value* Protection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Protection_Copy(void* instance_ptr, void* source);
   ASPOSE_CELLS_API c_return_bool_value* Protection_GetAllowDeletingColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Protection_SetAllowDeletingColumn(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Protection_GetAllowDeletingRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Protection_SetAllowDeletingRow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Protection_GetAllowFiltering(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Protection_SetAllowFiltering(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Protection_GetAllowFormattingCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Protection_SetAllowFormattingCell(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Protection_GetAllowFormattingColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Protection_SetAllowFormattingColumn(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Protection_GetAllowFormattingRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Protection_SetAllowFormattingRow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Protection_GetAllowInsertingColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Protection_SetAllowInsertingColumn(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Protection_GetAllowInsertingHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Protection_SetAllowInsertingHyperlink(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Protection_GetAllowInsertingRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Protection_SetAllowInsertingRow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Protection_GetAllowSorting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Protection_SetAllowSorting(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Protection_GetAllowUsingPivotTable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Protection_SetAllowUsingPivotTable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Protection_GetAllowEditingContent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Protection_SetAllowEditingContent(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Protection_GetAllowEditingObject(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Protection_SetAllowEditingObject(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Protection_GetAllowEditingScenario(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Protection_SetAllowEditingScenario(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Protection_GetAllowSelectingLockedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Protection_SetAllowSelectingLockedCell(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Protection_GetAllowSelectingUnlockedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Protection_SetAllowSelectingUnlockedCell(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* Protection_GetPassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Protection_SetPassword(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Protection_IsProtectedWithPassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Protection_VerifyPassword(void* instance_ptr, char* password);
   ASPOSE_CELLS_API c_return_int_value* Protection_GetPasswordHash(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_Protection( void* instance_ptr);

   /**************Class QueryTable *****************/


   ASPOSE_CELLS_API c_return_bool_value* QueryTable_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* QueryTable_GetConnectionId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* QueryTable_GetExternalConnection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* QueryTable_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* QueryTable_GetResultRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* QueryTable_GetPreserveFormatting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* QueryTable_SetPreserveFormatting(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* QueryTable_GetAdjustColumnWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* QueryTable_SetAdjustColumnWidth(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_QueryTable( void* instance_ptr);

   /**************Class QueryTableCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* QueryTableCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* QueryTableCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* QueryTableCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_QueryTableCollection( void* instance_ptr);

   /**************Class Range *****************/


   ASPOSE_CELLS_API c_return_bool_value* Range_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Range_AutoFill_Range(void* instance_ptr, void* target);
   ASPOSE_CELLS_API c_return_void_value* Range_AutoFill_Range_AutoFillType(void* instance_ptr, void* target, int autofilltype);
   ASPOSE_CELLS_API c_return_ptr_value* Range_GetCurrentRegion(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Range_GetHyperlinks(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Range_AddHyperlink(void* instance_ptr, char* address, char* texttodisplay, char* screentip);
   ASPOSE_CELLS_API c_return_ptr_value* Range_GetEnumerator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Range_IsIntersect(void* instance_ptr, void* range_);
   ASPOSE_CELLS_API c_return_ptr_value* Range_Intersect(void* instance_ptr, void* range_);
   ASPOSE_CELLS_API c_return_ptr_value* Range_UnionRanges(void* instance_ptr, void* ranges, int ranges_length);
   ASPOSE_CELLS_API c_return_int_value* Range_GetRowCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Range_GetColumnCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Range_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Range_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Range_GetRefersTo(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Range_GetAddress(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Range_IsBlank(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Range_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Range_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Range_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Range_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Range_GetFirstRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Range_GetFirstColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Range_Merge(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Range_UnMerge(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Range_PutValue(void* instance_ptr, char* stringvalue, bool isconverted, bool setstyle);
   ASPOSE_CELLS_API c_return_ptr_value* Range_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Range_SetValue(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_void_value* Range_SetStyle_Style_Boolean(void* instance_ptr, void* style, bool explicitflag);
   ASPOSE_CELLS_API c_return_void_value* Range_ApplyStyle(void* instance_ptr, void* style, void* flag);
   ASPOSE_CELLS_API c_return_void_value* Range_SetStyle_Style(void* instance_ptr, void* style);
   ASPOSE_CELLS_API c_return_void_value* Range_SetOutlineBorders_CellBorderType_CellsColor(void* instance_ptr, int borderstyle, void* bordercolor);
   ASPOSE_CELLS_API c_return_void_value* Range_SetOutlineBorders_CellBorderType_Color(void* instance_ptr, int borderstyle, void* bordercolor);
   ASPOSE_CELLS_API c_return_void_value* Range_SetOutlineBorders_CellBorderTypeArray_ColorArray(void* instance_ptr, void* borderstyles, int borderstyles_length, void* bordercolors, int bordercolors_length);
   ASPOSE_CELLS_API c_return_void_value* Range_SetOutlineBorder_BorderType_CellBorderType_CellsColor(void* instance_ptr, int borderedge, int borderstyle, void* bordercolor);
   ASPOSE_CELLS_API c_return_void_value* Range_SetOutlineBorder_BorderType_CellBorderType_Color(void* instance_ptr, int borderedge, int borderstyle, void* bordercolor);
   ASPOSE_CELLS_API c_return_void_value* Range_SetInsideBorders(void* instance_ptr, int borderedge, int linestyle, void* bordercolor);
   ASPOSE_CELLS_API c_return_double_value* Range_GetColumnWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Range_SetColumnWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Range_GetRowHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Range_SetRowHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_void_value* Range_MoveTo(void* instance_ptr, int destrow, int destcolumn);
   ASPOSE_CELLS_API c_return_void_value* Range_CopyData(void* instance_ptr, void* range_);
   ASPOSE_CELLS_API c_return_void_value* Range_CopyValue(void* instance_ptr, void* range_);
   ASPOSE_CELLS_API c_return_void_value* Range_CopyStyle(void* instance_ptr, void* range_);
   ASPOSE_CELLS_API c_return_void_value* Range_Copy_Range_PasteOptions(void* instance_ptr, void* range_, void* options);
   ASPOSE_CELLS_API c_return_void_value* Range_Transpose(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Range_Copy_Range(void* instance_ptr, void* range_);
   ASPOSE_CELLS_API c_return_ptr_value* Range_Get(void* instance_ptr, int rowoffset, int columnoffset);
   ASPOSE_CELLS_API c_return_ptr_value* Range_GetCellOrNull(void* instance_ptr, int rowoffset, int columnoffset);
   ASPOSE_CELLS_API c_return_ptr_value* Range_GetOffset(void* instance_ptr, int rowoffset, int columnoffset);
   ASPOSE_CELLS_API c_return_ptr_value* Range_GetEntireColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Range_GetEntireRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Range_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Range_ToString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Range_ToImage(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_string_value* Range_ToJson(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* Range_ToHtml(void* instance_ptr, void* saveoptions);


   ASPOSE_CELLS_API void Delete_Range( void* instance_ptr);

   /**************Class RangeCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* RangeCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RangeCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* RangeCollection_Add(void* instance_ptr, void* range_);
   ASPOSE_CELLS_API c_return_int_value* RangeCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_RangeCollection( void* instance_ptr);

   /**************Class ReferredArea *****************/


   ASPOSE_CELLS_API c_return_bool_value* ReferredArea_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ReferredArea_IsExternalLink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ReferredArea_GetExternalFileName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ReferredArea_GetSheetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ReferredArea_GetSheetNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ReferredArea_IsEntireRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ReferredArea_IsEntireColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ReferredArea_IsArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ReferredArea_GetEndColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ReferredArea_GetStartColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ReferredArea_GetEndRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ReferredArea_GetStartRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ReferredArea_GetValues(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ReferredArea_GetValues_Boolean(void* instance_ptr, bool calculateformulas);
   ASPOSE_CELLS_API c_return_ptr_value* ReferredArea_GetValue_Integer_Integer(void* instance_ptr, int rowoffset, int coloffset);
   ASPOSE_CELLS_API c_return_ptr_value* ReferredArea_GetValue_Integer_Integer_Boolean(void* instance_ptr, int rowoffset, int coloffset, bool calculateformulas);
   ASPOSE_CELLS_API c_return_string_value* ReferredArea_ToString(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ReferredArea( void* instance_ptr);

   /**************Class ReferredAreaCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ReferredAreaCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ReferredAreaCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* ReferredAreaCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ReferredAreaCollection( void* instance_ptr);

   /**************Class ReplaceOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ReplaceOptions();

   ASPOSE_CELLS_API c_return_bool_value* ReplaceOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ReplaceOptions_GetCaseSensitive(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ReplaceOptions_SetCaseSensitive(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ReplaceOptions_GetMatchEntireCellContents(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ReplaceOptions_SetMatchEntireCellContents(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ReplaceOptions_GetRegexKey(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ReplaceOptions_SetRegexKey(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ReplaceOptions_GetFontSettings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ReplaceOptions_SetFontSettings(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_ptr_value* ReplaceOptions_GetStyleFlags(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ReplaceOptions_SetStyleFlags(void* instance_ptr, void* value, int value_length);


   ASPOSE_CELLS_API void Delete_ReplaceOptions( void* instance_ptr);

   /**************Class Row *****************/


   ASPOSE_CELLS_API c_return_bool_value* Row_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Row_GetCellByIndex(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_bool_value* Row_IsBlank(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Row_Get(void* instance_ptr, int column);
   ASPOSE_CELLS_API c_return_ptr_value* Row_GetEnumerator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Row_GetEnumerator_Boolean_Boolean(void* instance_ptr, bool reversed, bool sync);
   ASPOSE_CELLS_API c_return_ptr_value* Row_GetCellOrNull(void* instance_ptr, int column);
   ASPOSE_CELLS_API c_return_bool_value* Row_IsCollapsed(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Row_SetIsCollapsed(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_double_value* Row_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Row_SetHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_bool_value* Row_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Row_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Row_GetIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Row_GetGroupLevel(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Row_SetGroupLevel(void* instance_ptr, uint8_t value);
   ASPOSE_CELLS_API c_return_bool_value* Row_IsHeightMatched(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Row_SetIsHeightMatched(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Row_GetStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Row_SetStyle(void* instance_ptr, void* style);
   ASPOSE_CELLS_API c_return_bool_value* Row_GetHasCustomStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Row_CopySettings(void* instance_ptr, void* source, bool checkstyle);
   ASPOSE_CELLS_API c_return_ptr_value* Row_GetFirstCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Row_GetFirstDataCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Row_GetLastCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Row_GetLastDataCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Row_ApplyStyle(void* instance_ptr, void* style, void* flag);
   ASPOSE_CELLS_API c_return_bool_value* Row_Equals_Object(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_bool_value* Row_Equals_Row(void* instance_ptr, void* row);


   ASPOSE_CELLS_API void Delete_Row( void* instance_ptr);

   /**************Class RowCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* RowCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RowCollection_GetCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RowCollection_GetEnumerator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RowCollection_GetEnumerator_Boolean_Boolean(void* instance_ptr, bool reversed, bool sync);
   ASPOSE_CELLS_API c_return_ptr_value* RowCollection_GetRowByIndex(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* RowCollection_Get(void* instance_ptr, int rowindex);
   ASPOSE_CELLS_API c_return_void_value* RowCollection_Clear(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RowCollection_RemoveAt(void* instance_ptr, int index);


   ASPOSE_CELLS_API void Delete_RowCollection( void* instance_ptr);

   /**************Class SaveOptions *****************/


   ASPOSE_CELLS_API c_return_bool_value* SaveOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SaveOptions_GetSaveFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* SaveOptions_GetClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SaveOptions_SetClearData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* SaveOptions_GetCachedFileFolder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SaveOptions_SetCachedFileFolder(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* SaveOptions_GetValidateMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SaveOptions_SetValidateMergedAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SaveOptions_GetMergeAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SaveOptions_SetMergeAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SaveOptions_GetCreateDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SaveOptions_SetCreateDirectory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SaveOptions_GetSortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SaveOptions_SetSortNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SaveOptions_GetSortExternalNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SaveOptions_SetSortExternalNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SaveOptions_GetRefreshChartCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SaveOptions_SetRefreshChartCache(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SaveOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SaveOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SaveOptions_GetUpdateSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SaveOptions_SetUpdateSmartArt(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SaveOptions_GetEncryptDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SaveOptions_SetEncryptDocumentProperties(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_SaveOptions( void* instance_ptr);

   /**************Class Scenario *****************/


   ASPOSE_CELLS_API c_return_bool_value* Scenario_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Scenario_GetComment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Scenario_SetComment(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Scenario_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Scenario_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Scenario_GetUser(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Scenario_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Scenario_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Scenario_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Scenario_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Scenario_GetInputCells(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_Scenario( void* instance_ptr);

   /**************Class ScenarioCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ScenarioCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ScenarioCollection_GetActiveIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScenarioCollection_SetActiveIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScenarioCollection_GetLastSelected(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScenarioCollection_SetLastSelected(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ScenarioCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* ScenarioCollection_Add(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_int_value* ScenarioCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ScenarioCollection( void* instance_ptr);

   /**************Class ScenarioInputCell *****************/


   ASPOSE_CELLS_API c_return_bool_value* ScenarioInputCell_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ScenarioInputCell_GetRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ScenarioInputCell_GetColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ScenarioInputCell_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ScenarioInputCell_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScenarioInputCell_SetValue(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* ScenarioInputCell_IsDeleted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScenarioInputCell_SetIsDeleted(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_ScenarioInputCell( void* instance_ptr);

   /**************Class ScenarioInputCellCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ScenarioInputCellCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ScenarioInputCellCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* ScenarioInputCellCollection_Add(void* instance_ptr, int row, int column, char* value);
   ASPOSE_CELLS_API c_return_int_value* ScenarioInputCellCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ScenarioInputCellCollection( void* instance_ptr);

   /**************Class SettableChartGlobalizationSettings *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_SettableChartGlobalizationSettings();

   ASPOSE_CELLS_API c_return_bool_value* SettableChartGlobalizationSettings_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* SettableChartGlobalizationSettings_GetSeriesName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettableChartGlobalizationSettings_SetSeriesName(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_string_value* SettableChartGlobalizationSettings_GetChartTitleName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettableChartGlobalizationSettings_SetChartTitleName(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_string_value* SettableChartGlobalizationSettings_GetLegendIncreaseName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettableChartGlobalizationSettings_SetLegendIncreaseName(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_string_value* SettableChartGlobalizationSettings_GetLegendDecreaseName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettableChartGlobalizationSettings_SetLegendDecreaseName(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_string_value* SettableChartGlobalizationSettings_GetLegendTotalName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettableChartGlobalizationSettings_SetLegendTotalName(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_string_value* SettableChartGlobalizationSettings_GetAxisTitleName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettableChartGlobalizationSettings_SetAxisTitleName(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_string_value* SettableChartGlobalizationSettings_GetOtherName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettableChartGlobalizationSettings_SetOtherName(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_string_value* SettableChartGlobalizationSettings_GetAxisUnitName(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* SettableChartGlobalizationSettings_SetAxisUnitName(void* instance_ptr, int type_, char* name);


   ASPOSE_CELLS_API void Delete_SettableChartGlobalizationSettings( void* instance_ptr);

   /**************Class SettableGlobalizationSettings *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_SettableGlobalizationSettings();

   ASPOSE_CELLS_API c_return_bool_value* SettableGlobalizationSettings_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* SettableGlobalizationSettings_GetTotalName(void* instance_ptr, int functiontype);
   ASPOSE_CELLS_API c_return_void_value* SettableGlobalizationSettings_SetTotalName(void* instance_ptr, int functiontype, char* name);
   ASPOSE_CELLS_API c_return_string_value* SettableGlobalizationSettings_GetGrandTotalName(void* instance_ptr, int functiontype);
   ASPOSE_CELLS_API c_return_void_value* SettableGlobalizationSettings_SetGrandTotalName(void* instance_ptr, int functiontype, char* name);
   ASPOSE_CELLS_API c_return_string_value* SettableGlobalizationSettings_GetTableRowTypeOfHeaders(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettableGlobalizationSettings_SetTableRowTypeOfHeaders(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_string_value* SettableGlobalizationSettings_GetTableRowTypeOfData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettableGlobalizationSettings_SetTableRowTypeOfData(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_string_value* SettableGlobalizationSettings_GetTableRowTypeOfAll(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettableGlobalizationSettings_SetTableRowTypeOfAll(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_string_value* SettableGlobalizationSettings_GetTableRowTypeOfTotals(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettableGlobalizationSettings_SetTableRowTypeOfTotals(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_string_value* SettableGlobalizationSettings_GetTableRowTypeOfCurrent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettableGlobalizationSettings_SetTableRowTypeOfCurrent(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_string_value* SettableGlobalizationSettings_GetErrorValueString(void* instance_ptr, char* err);
   ASPOSE_CELLS_API c_return_string_value* SettableGlobalizationSettings_GetBooleanValueString(void* instance_ptr, bool bv);
   ASPOSE_CELLS_API c_return_void_value* SettableGlobalizationSettings_SetBooleanValueString(void* instance_ptr, bool bv, char* name);
   ASPOSE_CELLS_API c_return_string_value* SettableGlobalizationSettings_GetLocalFunctionName(void* instance_ptr, char* standardname);
   ASPOSE_CELLS_API c_return_void_value* SettableGlobalizationSettings_SetLocalFunctionName(void* instance_ptr, char* standardname, char* localname, bool bidirectional);
   ASPOSE_CELLS_API c_return_string_value* SettableGlobalizationSettings_GetStandardFunctionName(void* instance_ptr, char* localname);
   ASPOSE_CELLS_API c_return_void_value* SettableGlobalizationSettings_SetStandardFunctionName(void* instance_ptr, char* localname, char* standardname, bool bidirectional);
   ASPOSE_CELLS_API c_return_string_value* SettableGlobalizationSettings_GetLocalBuiltInName(void* instance_ptr, char* standardname);
   ASPOSE_CELLS_API c_return_void_value* SettableGlobalizationSettings_SetLocalBuiltInName(void* instance_ptr, char* standardname, char* localname, bool bidirectional);
   ASPOSE_CELLS_API c_return_string_value* SettableGlobalizationSettings_GetStandardBuiltInName(void* instance_ptr, char* localname);
   ASPOSE_CELLS_API c_return_void_value* SettableGlobalizationSettings_SetStandardBuiltInName(void* instance_ptr, char* localname, char* standardname, bool bidirectional);
   ASPOSE_CELLS_API c_return_char_value* SettableGlobalizationSettings_GetListSeparator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettableGlobalizationSettings_SetListSeparator(void* instance_ptr, char c);
   ASPOSE_CELLS_API c_return_char_value* SettableGlobalizationSettings_GetRowSeparatorOfFormulaArray(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettableGlobalizationSettings_SetRowSeparatorOfFormulaArray(void* instance_ptr, char c);
   ASPOSE_CELLS_API c_return_char_value* SettableGlobalizationSettings_GetColumnSeparatorOfFormulaArray(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettableGlobalizationSettings_SetColumnSeparatorOfFormulaArray(void* instance_ptr, char c);
   ASPOSE_CELLS_API c_return_string_value* SettableGlobalizationSettings_GetStandardHeaderFooterFontStyleName(void* instance_ptr, char* localfontstylename);
   ASPOSE_CELLS_API c_return_void_value* SettableGlobalizationSettings_SetStandardHeaderFooterFontStyleName(void* instance_ptr, char* localfontstylename, char* standardname);
   ASPOSE_CELLS_API c_return_string_value* SettableGlobalizationSettings_GetCommentTitleName(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* SettableGlobalizationSettings_SetCommentTitleName(void* instance_ptr, int type_, char* name);


   ASPOSE_CELLS_API void Delete_SettableGlobalizationSettings( void* instance_ptr);

   /**************Class SettablePivotGlobalizationSettings *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_SettablePivotGlobalizationSettings();

   ASPOSE_CELLS_API c_return_bool_value* SettablePivotGlobalizationSettings_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* SettablePivotGlobalizationSettings_GetTextOfTotal(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettablePivotGlobalizationSettings_SetTextOfTotal(void* instance_ptr, char* text);
   ASPOSE_CELLS_API c_return_string_value* SettablePivotGlobalizationSettings_GetTextOfGrandTotal(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettablePivotGlobalizationSettings_SetTextOfGrandTotal(void* instance_ptr, char* text);
   ASPOSE_CELLS_API c_return_string_value* SettablePivotGlobalizationSettings_GetTextOfMultipleItems(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettablePivotGlobalizationSettings_SetTextOfMultipleItems(void* instance_ptr, char* text);
   ASPOSE_CELLS_API c_return_string_value* SettablePivotGlobalizationSettings_GetTextOfAll(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettablePivotGlobalizationSettings_SetTextOfAll(void* instance_ptr, char* text);
   ASPOSE_CELLS_API c_return_string_value* SettablePivotGlobalizationSettings_GetTextOfProtectedName(void* instance_ptr, char* protectedname);
   ASPOSE_CELLS_API c_return_void_value* SettablePivotGlobalizationSettings_SetTextOfProtectedName(void* instance_ptr, char* protectedname, char* text);
   ASPOSE_CELLS_API c_return_string_value* SettablePivotGlobalizationSettings_GetTextOfColumnLabels(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettablePivotGlobalizationSettings_SetTextOfColumnLabels(void* instance_ptr, char* text);
   ASPOSE_CELLS_API c_return_string_value* SettablePivotGlobalizationSettings_GetTextOfRowLabels(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettablePivotGlobalizationSettings_SetTextOfRowLabels(void* instance_ptr, char* text);
   ASPOSE_CELLS_API c_return_string_value* SettablePivotGlobalizationSettings_GetTextOfEmptyData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettablePivotGlobalizationSettings_SetTextOfEmptyData(void* instance_ptr, char* text);
   ASPOSE_CELLS_API c_return_string_value* SettablePivotGlobalizationSettings_GetTextOfDataFieldHeader(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SettablePivotGlobalizationSettings_SetTextOfDataFieldHeader(void* instance_ptr, char* text);
   ASPOSE_CELLS_API c_return_string_value* SettablePivotGlobalizationSettings_GetTextOfSubTotal(void* instance_ptr, int subtotaltype);
   ASPOSE_CELLS_API c_return_void_value* SettablePivotGlobalizationSettings_SetTextOfSubTotal(void* instance_ptr, int subtotaltype, char* text);


   ASPOSE_CELLS_API void Delete_SettablePivotGlobalizationSettings( void* instance_ptr);

   /**************Class SpreadsheetML2003SaveOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_SpreadsheetML2003SaveOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_SpreadsheetML2003SaveOptions_SaveOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* SpreadsheetML2003SaveOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* SpreadsheetML2003SaveOptions_IsIndentedFormatting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpreadsheetML2003SaveOptions_SetIsIndentedFormatting(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SpreadsheetML2003SaveOptions_GetLimitAsXls(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpreadsheetML2003SaveOptions_SetLimitAsXls(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SpreadsheetML2003SaveOptions_GetExportColumnIndexOfCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpreadsheetML2003SaveOptions_SetExportColumnIndexOfCell(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* SpreadsheetML2003SaveOptions_GetSaveFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* SpreadsheetML2003SaveOptions_GetClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpreadsheetML2003SaveOptions_SetClearData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* SpreadsheetML2003SaveOptions_GetCachedFileFolder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpreadsheetML2003SaveOptions_SetCachedFileFolder(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* SpreadsheetML2003SaveOptions_GetValidateMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpreadsheetML2003SaveOptions_SetValidateMergedAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SpreadsheetML2003SaveOptions_GetMergeAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpreadsheetML2003SaveOptions_SetMergeAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SpreadsheetML2003SaveOptions_GetCreateDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpreadsheetML2003SaveOptions_SetCreateDirectory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SpreadsheetML2003SaveOptions_GetSortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpreadsheetML2003SaveOptions_SetSortNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SpreadsheetML2003SaveOptions_GetSortExternalNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpreadsheetML2003SaveOptions_SetSortExternalNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SpreadsheetML2003SaveOptions_GetRefreshChartCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpreadsheetML2003SaveOptions_SetRefreshChartCache(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SpreadsheetML2003SaveOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpreadsheetML2003SaveOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SpreadsheetML2003SaveOptions_GetUpdateSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpreadsheetML2003SaveOptions_SetUpdateSmartArt(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SpreadsheetML2003SaveOptions_GetEncryptDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpreadsheetML2003SaveOptions_SetEncryptDocumentProperties(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_SpreadsheetML2003SaveOptions( void* instance_ptr);

   /**************Class Style *****************/


   ASPOSE_CELLS_API c_return_bool_value* Style_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Style_GetBackgroundThemeColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetBackgroundThemeColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Style_GetForegroundThemeColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetForegroundThemeColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* Style_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* Style_GetPattern(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetPattern(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* Style_SetPatternColor(void* instance_ptr, int pattern, void* color1, void* color2);
   ASPOSE_CELLS_API c_return_ptr_value* Style_GetBorders(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Style_GetBackgroundColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetBackgroundColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* Style_GetBackgroundArgbColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetBackgroundArgbColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Style_GetForegroundColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetForegroundColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* Style_GetForegroundArgbColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetForegroundArgbColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* Style_Copy(void* instance_ptr, void* style);
   ASPOSE_CELLS_API c_return_bool_value* Style_GetHasBorders(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Style_GetParentStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_Update(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Style_IsNumberFormatApplied(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetIsNumberFormatApplied(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Style_IsFontApplied(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetIsFontApplied(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Style_IsAlignmentApplied(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetIsAlignmentApplied(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Style_IsBorderApplied(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetIsBorderApplied(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Style_IsFillApplied(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetIsFillApplied(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Style_IsProtectionApplied(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetIsProtectionApplied(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Style_IsModified(void* instance_ptr, int modifyflag);
   ASPOSE_CELLS_API c_return_bool_value* Style_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* Style_GetHashCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Style_GetIndentLevel(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetIndentLevel(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Style_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Style_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetRotationAngle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Style_GetHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Style_GetVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Style_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Style_GetNumber(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetNumber(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Style_SetBorder_BorderType_CellBorderType_Color(void* instance_ptr, int bordertype, int borderstyle, void* bordercolor);
   ASPOSE_CELLS_API c_return_bool_value* Style_SetBorder_BorderType_CellBorderType_CellsColor(void* instance_ptr, int bordertype, int borderstyle, void* bordercolor);
   ASPOSE_CELLS_API c_return_bool_value* Style_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* Style_SetCustom_String_Boolean(void* instance_ptr, char* custom, bool builtinpreference);
   ASPOSE_CELLS_API c_return_string_value* Style_GetCustom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetCustom_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Style_GetCultureCustom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetCultureCustom(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Style_GetInvariantCustom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Style_IsFormulaHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetIsFormulaHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Style_GetShrinkToFit(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetShrinkToFit(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Style_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Style_IsJustifyDistributed(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetIsJustifyDistributed(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Style_GetQuotePrefix(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetQuotePrefix(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Style_IsGradient(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Style_SetIsGradient(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* Style_SetTwoColorGradient(void* instance_ptr, void* color1, void* color2, int gradientstyletype, int variant);
   ASPOSE_CELLS_API c_return_ptr_value* Style_GetTwoColorGradientSetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Style_IsPercent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Style_IsDateTime(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Style_ToJson(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_Style( void* instance_ptr);

   /**************Class StyleFlag *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_StyleFlag();

   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetAll(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetAll(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetBorders(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetBorders(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetLeftBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetLeftBorder(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetRightBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetRightBorder(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetTopBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetTopBorder(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetBottomBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetBottomBorder(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetDiagonalDownBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetDiagonalDownBorder(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetDiagonalUpBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetDiagonalUpBorder(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetFont(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetFontSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetFontSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetFontName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetFontName(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetFontColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetFontColor(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetFontBold(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetFontBold(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetFontItalic(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetFontItalic(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetFontUnderline(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetFontUnderline(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetFontStrike(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetFontStrike(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetFontScript(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetFontScript(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_Get_NumberFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetNumberFormat(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetAlignments(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetAlignments(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetHorizontalAlignment(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetVerticalAlignment(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetIndent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetIndent(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetRotation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetRotation(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetWrapText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetWrapText(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetShrinkToFit(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetShrinkToFit(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetTextDirection(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetCellShading(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetCellShading(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetHideFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetHideFormula(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* StyleFlag_GetQuotePrefix(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* StyleFlag_SetQuotePrefix(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_StyleFlag( void* instance_ptr);

   /**************Class SubtotalSetting *****************/


   ASPOSE_CELLS_API c_return_bool_value* SubtotalSetting_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SubtotalSetting_GetGroupBy(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SubtotalSetting_GetSubtotalFunction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SubtotalSetting_GetTotalList(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* SubtotalSetting_GetSummaryBelowData(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_SubtotalSetting( void* instance_ptr);

   /**************Class SystemTimeInterruptMonitor *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_SystemTimeInterruptMonitor(bool terminatewithoutexception);

   ASPOSE_CELLS_API c_return_bool_value* SystemTimeInterruptMonitor_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SystemTimeInterruptMonitor_StartMonitor(void* instance_ptr, int mslimit);
   ASPOSE_CELLS_API c_return_bool_value* SystemTimeInterruptMonitor_IsInterruptionRequested(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* SystemTimeInterruptMonitor_GetTerminateWithoutException(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_SystemTimeInterruptMonitor( void* instance_ptr);

   /**************Class ThemeColor *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ThemeColor(int type_, double tint);

   ASPOSE_CELLS_API c_return_bool_value* ThemeColor_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ThemeColor_GetColorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThemeColor_SetColorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ThemeColor_GetTint(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThemeColor_SetTint(void* instance_ptr, double value);


   ASPOSE_CELLS_API void Delete_ThemeColor( void* instance_ptr);

   /**************Class ThreadedComment *****************/


   ASPOSE_CELLS_API c_return_bool_value* ThreadedComment_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ThreadedComment_GetRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ThreadedComment_GetColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ThreadedComment_GetNotes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreadedComment_SetNotes(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* ThreadedComment_GetAuthor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreadedComment_SetAuthor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* ThreadedComment_GetCreatedTime(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreadedComment_SetCreatedTime(void* instance_ptr, void* value);


   ASPOSE_CELLS_API void Delete_ThreadedComment( void* instance_ptr);

   /**************Class ThreadedCommentAuthor *****************/


   ASPOSE_CELLS_API c_return_bool_value* ThreadedCommentAuthor_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ThreadedCommentAuthor_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreadedCommentAuthor_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ThreadedCommentAuthor_GetUserId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreadedCommentAuthor_SetUserId(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ThreadedCommentAuthor_GetProviderId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreadedCommentAuthor_SetProviderId(void* instance_ptr, char* value);


   ASPOSE_CELLS_API void Delete_ThreadedCommentAuthor( void* instance_ptr);

   /**************Class ThreadedCommentAuthorCollection *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ThreadedCommentAuthorCollection();

   ASPOSE_CELLS_API c_return_bool_value* ThreadedCommentAuthorCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ThreadedCommentAuthorCollection_GetCurrentPerson(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreadedCommentAuthorCollection_SetCurrentPerson(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* ThreadedCommentAuthorCollection_IndexOf(void* instance_ptr, void* author);
   ASPOSE_CELLS_API c_return_ptr_value* ThreadedCommentAuthorCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* ThreadedCommentAuthorCollection_Get_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_int_value* ThreadedCommentAuthorCollection_Add(void* instance_ptr, char* name, char* userid, char* providerid);
   ASPOSE_CELLS_API c_return_int_value* ThreadedCommentAuthorCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ThreadedCommentAuthorCollection( void* instance_ptr);

   /**************Class ThreadedCommentCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ThreadedCommentCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ThreadedCommentCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* ThreadedCommentCollection_Add(void* instance_ptr, char* text, void* author);
   ASPOSE_CELLS_API c_return_int_value* ThreadedCommentCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ThreadedCommentCollection( void* instance_ptr);

   /**************Class Top10 *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_Top10();

   ASPOSE_CELLS_API c_return_bool_value* Top10_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Top10_IsPercent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Top10_SetIsPercent(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Top10_IsBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Top10_SetIsBottom(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Top10_GetRank(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Top10_SetRank(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_Top10( void* instance_ptr);

   /**************Class Top10Filter *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_Top10Filter(void* obj);

   ASPOSE_CELLS_API c_return_bool_value* Top10Filter_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Top10Filter_ToObject(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Top10Filter_IsTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Top10Filter_SetIsTop(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Top10Filter_IsPercent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Top10Filter_SetIsPercent(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Top10Filter_GetItems(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Top10Filter_SetItems(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Top10Filter_GetCriteria(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Top10Filter_SetCriteria(void* instance_ptr, void* value);


   ASPOSE_CELLS_API void Delete_Top10Filter( void* instance_ptr);

   /**************Class TwoColorGradient *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_TwoColorGradient(void* color1, void* color2, int gradientstyletype, int variant);

   ASPOSE_CELLS_API c_return_bool_value* TwoColorGradient_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TwoColorGradient_GetColor1(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TwoColorGradient_SetColor1(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* TwoColorGradient_GetColor2(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TwoColorGradient_SetColor2(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* TwoColorGradient_GetGradientStyleType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TwoColorGradient_SetGradientStyleType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TwoColorGradient_GetVariant(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TwoColorGradient_SetVariant(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_TwoColorGradient( void* instance_ptr);

   /**************Class TxtLoadOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_TxtLoadOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_TxtLoadOptions_LoadFormat(int loadformat);
   ASPOSE_CELLS_API c_return_ptr_value* New_TxtLoadOptions_AbstractTextLoadOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* TxtLoadOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_char_value* TxtLoadOptions_GetSeparator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetSeparator(void* instance_ptr, char value);
   ASPOSE_CELLS_API c_return_string_value* TxtLoadOptions_GetSeparatorString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetSeparatorString(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* TxtLoadOptions_IsMultiEncoded(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetIsMultiEncoded(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TxtLoadOptions_GetHasFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetHasFormula(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TxtLoadOptions_GetHasTextQualifier(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetHasTextQualifier(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_char_value* TxtLoadOptions_GetTextQualifier(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetTextQualifier(void* instance_ptr, char value);
   ASPOSE_CELLS_API c_return_bool_value* TxtLoadOptions_GetTreatConsecutiveDelimitersAsOne(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetTreatConsecutiveDelimitersAsOne(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TxtLoadOptions_GetTreatQuotePrefixAsValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetTreatQuotePrefixAsValue(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TxtLoadOptions_GetExtendToNextSheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetExtendToNextSheet(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* TxtLoadOptions_GetHeaderRowsCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetHeaderRowsCount(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TxtLoadOptions_GetHeaderColumnsCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetHeaderColumnsCount(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TxtLoadOptions_GetMaxRowCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetMaxRowCount(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TxtLoadOptions_GetMaxColumnCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetMaxColumnCount(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TxtLoadOptions_GetEncoding(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetEncoding(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TxtLoadOptions_GetLoadStyleStrategy(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetLoadStyleStrategy(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* TxtLoadOptions_GetConvertNumericData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetConvertNumericData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TxtLoadOptions_GetConvertDateTimeData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetConvertDateTimeData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TxtLoadOptions_GetKeepPrecision(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetKeepPrecision(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* TxtLoadOptions_GetLoadFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* TxtLoadOptions_GetPassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetPassword(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* TxtLoadOptions_GetParsingFormulaOnOpen(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetParsingFormulaOnOpen(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TxtLoadOptions_GetParsingPivotCachedRecords(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetParsingPivotCachedRecords(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetPaperSize(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_int_value* TxtLoadOptions_GetLanguageCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetLanguageCode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TxtLoadOptions_GetRegion(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetRegion(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* TxtLoadOptions_GetDefaultStyleSettings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TxtLoadOptions_GetInterruptMonitor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetInterruptMonitor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* TxtLoadOptions_GetIgnoreNotPrinted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetIgnoreNotPrinted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TxtLoadOptions_GetCheckDataValid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetCheckDataValid(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TxtLoadOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TxtLoadOptions_GetKeepUnparsedData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetKeepUnparsedData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* TxtLoadOptions_GetLoadFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetLoadFilter(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* TxtLoadOptions_GetMemorySetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetMemorySetting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* TxtLoadOptions_GetAutoFitterOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetAutoFitterOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* TxtLoadOptions_GetAutoFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetAutoFilter(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* TxtLoadOptions_GetFontConfigs(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetFontConfigs(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* TxtLoadOptions_GetIgnoreUselessShapes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetIgnoreUselessShapes(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TxtLoadOptions_GetPreservePaddingSpacesInFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtLoadOptions_SetPreservePaddingSpacesInFormula(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_TxtLoadOptions( void* instance_ptr);

   /**************Class TxtSaveOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_TxtSaveOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_TxtSaveOptions_SaveFormat(int saveformat);
   ASPOSE_CELLS_API c_return_ptr_value* New_TxtSaveOptions_SaveOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* TxtSaveOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_char_value* TxtSaveOptions_GetSeparator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtSaveOptions_SetSeparator(void* instance_ptr, char value);
   ASPOSE_CELLS_API c_return_string_value* TxtSaveOptions_GetSeparatorString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtSaveOptions_SetSeparatorString(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* TxtSaveOptions_GetEncoding(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtSaveOptions_SetEncoding(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TxtSaveOptions_GetQuoteType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtSaveOptions_SetQuoteType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TxtSaveOptions_GetFormatStrategy(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtSaveOptions_SetFormatStrategy(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* TxtSaveOptions_GetTrimLeadingBlankRowAndColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtSaveOptions_SetTrimLeadingBlankRowAndColumn(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TxtSaveOptions_GetTrimTailingBlankCells(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtSaveOptions_SetTrimTailingBlankCells(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TxtSaveOptions_GetKeepSeparatorsForBlankRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtSaveOptions_SetKeepSeparatorsForBlankRow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* TxtSaveOptions_GetExportArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtSaveOptions_SetExportArea(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* TxtSaveOptions_GetExportQuotePrefix(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtSaveOptions_SetExportQuotePrefix(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TxtSaveOptions_GetExportAllSheets(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtSaveOptions_SetExportAllSheets(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* TxtSaveOptions_GetSaveFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* TxtSaveOptions_GetClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtSaveOptions_SetClearData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* TxtSaveOptions_GetCachedFileFolder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtSaveOptions_SetCachedFileFolder(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* TxtSaveOptions_GetValidateMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtSaveOptions_SetValidateMergedAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TxtSaveOptions_GetMergeAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtSaveOptions_SetMergeAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TxtSaveOptions_GetCreateDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtSaveOptions_SetCreateDirectory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TxtSaveOptions_GetSortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtSaveOptions_SetSortNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TxtSaveOptions_GetSortExternalNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtSaveOptions_SetSortExternalNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TxtSaveOptions_GetRefreshChartCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtSaveOptions_SetRefreshChartCache(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TxtSaveOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtSaveOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TxtSaveOptions_GetUpdateSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtSaveOptions_SetUpdateSmartArt(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TxtSaveOptions_GetEncryptDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TxtSaveOptions_SetEncryptDocumentProperties(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_TxtSaveOptions( void* instance_ptr);

   /**************Class UnionRange *****************/


   ASPOSE_CELLS_API c_return_bool_value* UnionRange_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* UnionRange_GetFirstRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* UnionRange_GetFirstColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* UnionRange_GetRowCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* UnionRange_GetColumnCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnionRange_Merge(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnionRange_UnMerge(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnionRange_PutValue(void* instance_ptr, char* stringvalue, bool isconverted, bool setstyle);
   ASPOSE_CELLS_API c_return_ptr_value* UnionRange_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnionRange_SetValue(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* UnionRange_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnionRange_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* UnionRange_GetRefersTo(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* UnionRange_GetHasRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* UnionRange_GetHyperlinks(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnionRange_SetStyle(void* instance_ptr, void* style);
   ASPOSE_CELLS_API c_return_void_value* UnionRange_ApplyStyle(void* instance_ptr, void* style, void* flag);
   ASPOSE_CELLS_API c_return_void_value* UnionRange_Copy(void* instance_ptr, void* range_, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* UnionRange_GetEnumerator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* UnionRange_GetCellCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* UnionRange_GetRangeCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* UnionRange_GetRanges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnionRange_SetOutlineBorders_CellBorderTypeArray_ColorArray(void* instance_ptr, void* borderstyles, int borderstyles_length, void* bordercolors, int bordercolors_length);
   ASPOSE_CELLS_API c_return_void_value* UnionRange_SetOutlineBorders_CellBorderType_Color(void* instance_ptr, int borderstyle, void* bordercolor);
   ASPOSE_CELLS_API c_return_ptr_value* UnionRange_Intersect_String(void* instance_ptr, char* range_);
   ASPOSE_CELLS_API c_return_ptr_value* UnionRange_Intersect_UnionRange(void* instance_ptr, void* unionrange);
   ASPOSE_CELLS_API c_return_ptr_value* UnionRange_Intersect_RangeArray(void* instance_ptr, void* ranges, int ranges_length);
   ASPOSE_CELLS_API c_return_ptr_value* UnionRange_Union_String(void* instance_ptr, char* range_);
   ASPOSE_CELLS_API c_return_ptr_value* UnionRange_Union_UnionRange(void* instance_ptr, void* unionrange);
   ASPOSE_CELLS_API c_return_ptr_value* UnionRange_Union_RangeArray(void* instance_ptr, void* ranges, int ranges_length);


   ASPOSE_CELLS_API void Delete_UnionRange( void* instance_ptr);

   /**************Class Validation *****************/


   ASPOSE_CELLS_API c_return_bool_value* Validation_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Validation_GetOperator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Validation_SetOperator(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Validation_GetAlertStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Validation_SetAlertStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Validation_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Validation_SetType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* Validation_GetInputMessage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Validation_SetInputMessage(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Validation_GetInputTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Validation_SetInputTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Validation_GetErrorMessage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Validation_SetErrorMessage(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Validation_GetErrorTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Validation_SetErrorTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Validation_GetShowInput(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Validation_SetShowInput(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Validation_GetShowError(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Validation_SetShowError(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Validation_GetIgnoreBlank(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Validation_SetIgnoreBlank(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* Validation_GetFormula1_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* Validation_GetFormula2_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* Validation_GetFormula1_Boolean_Boolean_Integer_Integer(void* instance_ptr, bool isr1c1, bool islocal, int row, int column);
   ASPOSE_CELLS_API c_return_string_value* Validation_GetFormula2_Boolean_Boolean_Integer_Integer(void* instance_ptr, bool isr1c1, bool islocal, int row, int column);
   ASPOSE_CELLS_API c_return_void_value* Validation_SetFormula1_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Validation_SetFormula2_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* Validation_GetFormula1(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Validation_SetFormula1_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Validation_GetFormula2(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Validation_SetFormula2_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* Validation_GetListValue(void* instance_ptr, int row, int column);
   ASPOSE_CELLS_API c_return_ptr_value* Validation_GetValue1(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Validation_SetValue1(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Validation_GetValue2(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Validation_SetValue2(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Validation_GetValue(void* instance_ptr, int row, int column, bool isvalue1);
   ASPOSE_CELLS_API c_return_bool_value* Validation_GetInCellDropDown(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Validation_SetInCellDropDown(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Validation_GetAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Validation_AddArea_CellArea(void* instance_ptr, void* cellarea);
   ASPOSE_CELLS_API c_return_void_value* Validation_AddArea_CellArea_Boolean_Boolean(void* instance_ptr, void* cellarea, bool checkintersection, bool checkedge);
   ASPOSE_CELLS_API c_return_void_value* Validation_AddAreas(void* instance_ptr, void* areas, int areas_length, bool checkintersection, bool checkedge);
   ASPOSE_CELLS_API c_return_void_value* Validation_RemoveArea(void* instance_ptr, void* cellarea);
   ASPOSE_CELLS_API c_return_void_value* Validation_RemoveAreas(void* instance_ptr, void* areas, int areas_length);
   ASPOSE_CELLS_API c_return_void_value* Validation_RemoveACell(void* instance_ptr, int row, int column);
   ASPOSE_CELLS_API c_return_void_value* Validation_Copy(void* instance_ptr, void* source, void* copyoption);


   ASPOSE_CELLS_API void Delete_Validation( void* instance_ptr);

   /**************Class ValidationCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ValidationCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ValidationCollection_Add(void* instance_ptr, void* ca);
   ASPOSE_CELLS_API c_return_ptr_value* ValidationCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* ValidationCollection_RemoveACell(void* instance_ptr, int row, int column);
   ASPOSE_CELLS_API c_return_void_value* ValidationCollection_RemoveArea(void* instance_ptr, void* ca);
   ASPOSE_CELLS_API c_return_ptr_value* ValidationCollection_GetValidationInCell(void* instance_ptr, int row, int column);
   ASPOSE_CELLS_API c_return_int_value* ValidationCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ValidationCollection( void* instance_ptr);

   /**************Class VerticalPageBreak *****************/


   ASPOSE_CELLS_API c_return_bool_value* VerticalPageBreak_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* VerticalPageBreak_GetStartRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* VerticalPageBreak_GetEndRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* VerticalPageBreak_GetColumn(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_VerticalPageBreak( void* instance_ptr);

   /**************Class VerticalPageBreakCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* VerticalPageBreakCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* VerticalPageBreakCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* VerticalPageBreakCollection_Get_String(void* instance_ptr, char* cellname);
   ASPOSE_CELLS_API c_return_int_value* VerticalPageBreakCollection_Add_Integer_Integer_Integer(void* instance_ptr, int startrow, int endrow, int column);
   ASPOSE_CELLS_API c_return_int_value* VerticalPageBreakCollection_Add_Integer(void* instance_ptr, int column);
   ASPOSE_CELLS_API c_return_int_value* VerticalPageBreakCollection_Add_Integer_Integer(void* instance_ptr, int row, int column);
   ASPOSE_CELLS_API c_return_int_value* VerticalPageBreakCollection_Add_String(void* instance_ptr, char* cellname);
   ASPOSE_CELLS_API c_return_void_value* VerticalPageBreakCollection_RemoveAt(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* VerticalPageBreakCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_VerticalPageBreakCollection( void* instance_ptr);

   /**************Class WarningInfo *****************/


   ASPOSE_CELLS_API c_return_bool_value* WarningInfo_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* WarningInfo_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* WarningInfo_GetDescription(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WarningInfo_GetErrorObject(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WarningInfo_GetCorrectedObject(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WarningInfo_SetCorrectedObject(void* instance_ptr, void* value);


   ASPOSE_CELLS_API void Delete_WarningInfo( void* instance_ptr);

   /**************Class Workbook *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_Workbook();
   ASPOSE_CELLS_API c_return_ptr_value* New_Workbook_FileFormatType(int fileformattype);
   ASPOSE_CELLS_API c_return_ptr_value* New_Workbook_String(char* file);
   ASPOSE_CELLS_API c_return_ptr_value* New_Workbook_Stream(void* stream, int stream_length);
   ASPOSE_CELLS_API c_return_ptr_value* New_Workbook_String_LoadOptions(char* file, void* loadoptions);
   ASPOSE_CELLS_API c_return_ptr_value* New_Workbook_Stream_LoadOptions(void* stream, int stream_length, void* loadoptions);

   ASPOSE_CELLS_API c_return_bool_value* Workbook_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_GetSettings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Workbook_ParseFormulas(void* instance_ptr, bool ignoreerror);
   ASPOSE_CELLS_API c_return_void_value* Workbook_StartAccessCache(void* instance_ptr, int opts);
   ASPOSE_CELLS_API c_return_void_value* Workbook_CloseAccessCache(void* instance_ptr, int opts);
   ASPOSE_CELLS_API c_return_void_value* Workbook_Save_String_SaveFormat(void* instance_ptr, char* filename, int saveformat);
   ASPOSE_CELLS_API c_return_void_value* Workbook_Save_String(void* instance_ptr, char* filename);
   ASPOSE_CELLS_API c_return_void_value* Workbook_Save_String_SaveOptions(void* instance_ptr, char* filename, void* saveoptions);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_Save_SaveFormat(void* instance_ptr, int saveformat);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_Save_SaveOptions(void* instance_ptr, void* saveoptions);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_SaveToStream(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_GetWorksheets(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Workbook_IsLicensed(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Workbook_RemoveUnusedStyles(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_CreateStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_CreateStyle_Boolean(void* instance_ptr, bool clonedefaultstyle);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_CreateBuiltinStyle(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_CreateCellsColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Workbook_Replace_String_String(void* instance_ptr, char* placeholder, char* newvalue);
   ASPOSE_CELLS_API c_return_int_value* Workbook_Replace_String_Integer(void* instance_ptr, char* placeholder, int newvalue);
   ASPOSE_CELLS_API c_return_int_value* Workbook_Replace_String_Double(void* instance_ptr, char* placeholder, double newvalue);
   ASPOSE_CELLS_API c_return_int_value* Workbook_Replace_String_U16StringArray_Boolean(void* instance_ptr, char* placeholder, void* newvalues, int newvalues_length, bool isvertical);
   ASPOSE_CELLS_API c_return_int_value* Workbook_Replace_String_int32_tArray_Boolean(void* instance_ptr, char* placeholder, void* newvalues, int newvalues_length, bool isvertical);
   ASPOSE_CELLS_API c_return_int_value* Workbook_Replace_String_doubleArray_Boolean(void* instance_ptr, char* placeholder, void* newvalues, int newvalues_length, bool isvertical);
   ASPOSE_CELLS_API c_return_int_value* Workbook_Replace_Boolean_Object(void* instance_ptr, bool boolvalue, void* newvalue);
   ASPOSE_CELLS_API c_return_int_value* Workbook_Replace_Integer_Object(void* instance_ptr, int intvalue, void* newvalue);
   ASPOSE_CELLS_API c_return_int_value* Workbook_Replace_String_String_ReplaceOptions(void* instance_ptr, char* placeholder, char* newvalue, void* options);
   ASPOSE_CELLS_API c_return_void_value* Workbook_Copy_Workbook_CopyOptions(void* instance_ptr, void* source, void* copyoptions);
   ASPOSE_CELLS_API c_return_void_value* Workbook_Copy_Workbook(void* instance_ptr, void* source);
   ASPOSE_CELLS_API c_return_void_value* Workbook_Combine(void* instance_ptr, void* secondworkbook);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_GetColors(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_GetStyleInPool(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* Workbook_GetCountOfStylesInPool(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_GetFonts(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_GetNamedStyle(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_void_value* Workbook_ChangePalette(void* instance_ptr, void* color, int index);
   ASPOSE_CELLS_API c_return_bool_value* Workbook_IsColorInPalette(void* instance_ptr, void* color);
   ASPOSE_CELLS_API c_return_void_value* Workbook_CalculateFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Workbook_CalculateFormula_Boolean(void* instance_ptr, bool ignoreerror);
   ASPOSE_CELLS_API c_return_void_value* Workbook_CalculateFormula_CalculationOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_void_value* Workbook_RefreshDynamicArrayFormulas_Boolean(void* instance_ptr, bool calculate);
   ASPOSE_CELLS_API c_return_void_value* Workbook_RefreshDynamicArrayFormulas_Boolean_CalculationOptions(void* instance_ptr, bool calculate, void* copts);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_GetDefaultStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Workbook_SetDefaultStyle(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_GetMatchingColor(void* instance_ptr, void* rawcolor);
   ASPOSE_CELLS_API c_return_bool_value* Workbook_IsDigitallySigned(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Workbook_SetEncryptionOptions(void* instance_ptr, int encryptiontype, int keylength);
   ASPOSE_CELLS_API c_return_void_value* Workbook_Protect(void* instance_ptr, int protectiontype, char* password);
   ASPOSE_CELLS_API c_return_void_value* Workbook_ProtectSharedWorkbook(void* instance_ptr, char* password);
   ASPOSE_CELLS_API c_return_void_value* Workbook_Unprotect(void* instance_ptr, char* password);
   ASPOSE_CELLS_API c_return_void_value* Workbook_UnprotectSharedWorkbook(void* instance_ptr, char* password);
   ASPOSE_CELLS_API c_return_bool_value* Workbook_IsWorkbookProtectedWithPassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Workbook_RemoveMacro(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_GetVbaProject(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Workbook_RemoveDigitalSignature(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Workbook_AcceptAllRevisions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Workbook_GetHasMacro(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Workbook_GetHasRevisions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Workbook_GetFileName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Workbook_SetFileName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_GetDataSorter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_GetThemeColor(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* Workbook_SetThemeColor(void* instance_ptr, int type_, void* color);
   ASPOSE_CELLS_API c_return_string_value* Workbook_GetTheme(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Workbook_CustomTheme(void* instance_ptr, char* themename, void* colors, int colors_length);
   ASPOSE_CELLS_API c_return_void_value* Workbook_CopyTheme(void* instance_ptr, void* source);
   ASPOSE_CELLS_API c_return_void_value* Workbook_UpdateCustomFunctionDefinition(void* instance_ptr, void* definition);
   ASPOSE_CELLS_API c_return_void_value* Workbook_UpdateLinkedDataSource(void* instance_ptr, void* externalworkbooks, int externalworkbooks_length);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_GetBuiltInDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_GetCustomDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Workbook_GetFileFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Workbook_SetFileFormat(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_GetInterruptMonitor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Workbook_SetInterruptMonitor_AbstractInterruptMonitor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_void_value* Workbook_SetInterruptMonitor_InterruptMonitor(void* instance_ptr, void* interruptmonitor);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_GetContentTypeProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_GetCustomXmlParts(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_GetDataMashup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Workbook_GetRibbonXml(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Workbook_SetRibbonXml(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Workbook_GetAbsolutePath(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Workbook_SetAbsolutePath(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_GetDataConnections(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Workbook_ImportXml_String_String_Integer_Integer(void* instance_ptr, char* url, char* sheetname, int row, int col);
   ASPOSE_CELLS_API c_return_void_value* Workbook_ImportXml_Stream_String_Integer_Integer(void* instance_ptr, void* stream, int stream_length, char* sheetname, int row, int col);
   ASPOSE_CELLS_API c_return_void_value* Workbook_ExportXml_String_String(void* instance_ptr, char* mapname, char* path);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_ExportXml_String(void* instance_ptr, char* mapname);
   ASPOSE_CELLS_API c_return_void_value* Workbook_SetDigitalSignature(void* instance_ptr, void* digitalsignaturecollection);
   ASPOSE_CELLS_API c_return_void_value* Workbook_AddDigitalSignature(void* instance_ptr, void* digitalsignaturecollection);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_GetDigitalSignature(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Workbook_RemovePersonalInformation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Workbook_GetDataModel(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Workbook_Dispose(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_Workbook( void* instance_ptr);

   /**************Class WorkbookSettings *****************/


   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_Dispose(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* WorkbookSettings_GetThemeFont(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_string_value* WorkbookSettings_GetAuthor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetAuthor(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_GetCheckCustomNumberFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetCheckCustomNumberFormat(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_GetEnableMacros(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetEnableMacros(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_GetDate1904(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetDate1904(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* WorkbookSettings_GetProtectionType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* WorkbookSettings_GetDisplayDrawingObjects(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetDisplayDrawingObjects(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WorkbookSettings_GetSheetTabBarWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetSheetTabBarWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_GetShowTabs(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetShowTabs(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* WorkbookSettings_GetFirstVisibleTab(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetFirstVisibleTab(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_IsHScrollBarVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetIsHScrollBarVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_IsVScrollBarVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetIsVScrollBarVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_GetShared(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetShared(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* WorkbookSettings_GetLanguageCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetLanguageCode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WorkbookSettings_GetRegion(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetRegion(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* WorkbookSettings_GetGlobalizationSettings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetGlobalizationSettings(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_char_value* WorkbookSettings_GetNumberDecimalSeparator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetNumberDecimalSeparator(void* instance_ptr, char value);
   ASPOSE_CELLS_API c_return_char_value* WorkbookSettings_GetNumberGroupSeparator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetNumberGroupSeparator(void* instance_ptr, char value);
   ASPOSE_CELLS_API c_return_string_value* WorkbookSettings_GetPassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetPassword(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* WorkbookSettings_GetWriteProtection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_IsEncrypted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_IsProtected(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_IsDefaultEncrypted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetIsDefaultEncrypted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_IsMinimized(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetIsMinimized(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_GetAutoCompressPictures(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetAutoCompressPictures(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_GetRemovePersonalInformation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetRemovePersonalInformation(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_GetHidePivotFieldList(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetHidePivotFieldList(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* WorkbookSettings_GetUpdateLinksType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetUpdateLinksType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetPageOrientationType(void* instance_ptr, int pageorientationtype);
   ASPOSE_CELLS_API c_return_int_value* WorkbookSettings_GetMaxRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* WorkbookSettings_GetMaxColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WorkbookSettings_GetDefaultStyleSettings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* WorkbookSettings_GetWindowLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetWindowLeft(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* WorkbookSettings_GetWindowLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetWindowLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* WorkbookSettings_GetWindowLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetWindowLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* WorkbookSettings_GetWindowTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetWindowTop(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* WorkbookSettings_GetWindowTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetWindowTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* WorkbookSettings_GetWindowTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetWindowTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* WorkbookSettings_GetWindowWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetWindowWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* WorkbookSettings_GetWindowWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetWindowWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* WorkbookSettings_GetWindowWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetWindowWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* WorkbookSettings_GetWindowHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetWindowHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* WorkbookSettings_GetWindowHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetWindowHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* WorkbookSettings_GetWindowHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetWindowHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_GetUpdateAdjacentCellsBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetUpdateAdjacentCellsBorder(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* WorkbookSettings_GetSignificantDigits(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetSignificantDigits(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_GetCheckCompatibility(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetCheckCompatibility(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_GetAutoRecover(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetAutoRecover(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_GetCrashSave(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetCrashSave(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_GetDataExtractLoad(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetDataExtractLoad(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_GetRepairLoad(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetRepairLoad(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* WorkbookSettings_GetBuildVersion(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetBuildVersion(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* WorkbookSettings_GetMemorySetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetMemorySetting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WorkbookSettings_GetPaperSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetPaperSize(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WorkbookSettings_GetMaxRowsOfSharedFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetMaxRowsOfSharedFormula(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WorkbookSettings_GetCompliance(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetCompliance(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_GetQuotePrefixToStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetQuotePrefixToStyle(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* WorkbookSettings_GetFormulaSettings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_GetPropertiesFollowChartPoint(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetPropertiesFollowChartPoint(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WorkbookSettings_GetDiscardImageEditData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetDiscardImageEditData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* WorkbookSettings_GetDefaultImageResolution(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookSettings_SetDefaultImageResolution(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_WorkbookSettings( void* instance_ptr);

   /**************Class Worksheet *****************/


   ASPOSE_CELLS_API c_return_bool_value* Worksheet_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_Dispose(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetProtection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Worksheet_GetUniqueId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetUniqueId(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetPanes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetWorkbook(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetCells(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetQueryTables(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetPivotTables(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Worksheet_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* Worksheet_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Worksheet_GetShowFormulas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetShowFormulas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Worksheet_IsGridlinesVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetIsGridlinesVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Worksheet_IsRowColumnHeadersVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetIsRowColumnHeadersVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Worksheet_GetPaneState(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Worksheet_GetDisplayZeros(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetDisplayZeros(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Worksheet_GetDisplayRightToLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetDisplayRightToLeft(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Worksheet_IsOutlineShown(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetIsOutlineShown(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Worksheet_IsSelected(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetIsSelected(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_FreezePanes_Integer_Integer_Integer_Integer(void* instance_ptr, int row, int column, int freezedrows, int freezedcolumns);
   ASPOSE_CELLS_API c_return_bool_value* Worksheet_GetFreezedPanes(void* instance_ptr, int* row, int* column, int* freezedrows, int* freezedcolumns);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_Split(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_FreezePanes_String_Integer_Integer(void* instance_ptr, char* cellname, int freezedrows, int freezedcolumns);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_UnFreezePanes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_RemoveSplit(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetListObjects(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Worksheet_GetTabId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetTabId(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetHorizontalPageBreaks(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetVerticalPageBreaks(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_AddPageBreaks(void* instance_ptr, char* cellname);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetHyperlinks(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_Copy_Worksheet(void* instance_ptr, void* sourcesheet);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_Copy_Worksheet_CopyOptions(void* instance_ptr, void* sourcesheet, void* copyoptions);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_AutoFitColumn_Integer_Integer_Integer(void* instance_ptr, int columnindex, int firstrow, int lastrow);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_AutoFitColumns(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_AutoFitColumns_AutoFitterOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_AutoFitColumn_Integer(void* instance_ptr, int columnindex);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_AutoFitColumns_Integer_Integer(void* instance_ptr, int firstcolumn, int lastcolumn);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_AutoFitColumns_Integer_Integer_AutoFitterOptions(void* instance_ptr, int firstcolumn, int lastcolumn, void* options);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_AutoFitColumns_Integer_Integer_Integer_Integer(void* instance_ptr, int firstrow, int firstcolumn, int lastrow, int lastcolumn);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_AutoFitColumns_Integer_Integer_Integer_Integer_AutoFitterOptions(void* instance_ptr, int firstrow, int firstcolumn, int lastrow, int lastcolumn, void* options);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_AutoFitRow_Integer_Integer_Integer(void* instance_ptr, int rowindex, int firstcolumn, int lastcolumn);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_AutoFitRow_Integer_Integer_Integer_AutoFitterOptions(void* instance_ptr, int rowindex, int firstcolumn, int lastcolumn, void* options);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_AutoFitRows(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_AutoFitRows_Boolean(void* instance_ptr, bool onlyauto);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_AutoFitRows_AutoFitterOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_AutoFitRows_Integer_Integer(void* instance_ptr, int startrow, int endrow);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_AutoFitRows_Integer_Integer_AutoFitterOptions(void* instance_ptr, int startrow, int endrow, void* options);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_AutoFitRow_Integer_Integer_Integer_Integer(void* instance_ptr, int startrow, int endrow, int startcolumn, int endcolumn);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_AutoFitRow_Integer(void* instance_ptr, int rowindex);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetPageSetup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetAutoFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetAdvancedFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_Advanced_Filter(void* instance_ptr, bool isfilter, char* listrange, char* criteriarange, char* copyto, bool uniquerecordonly);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_RemoveAutoFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Worksheet_GetHasAutofilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Worksheet_GetTransitionEvaluation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetTransitionEvaluation(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Worksheet_GetTransitionEntry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetTransitionEntry(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Worksheet_GetVisibilityType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetVisibilityType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetVisible(void* instance_ptr, bool isvisible, bool ignoreerror);
   ASPOSE_CELLS_API c_return_bool_value* Worksheet_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SelectRange(void* instance_ptr, int startrow, int startcolumn, int totalrows, int totalcolumns, bool removeothers);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_RemoveAllDrawingObjects(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_ClearComments(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetSparklineGroups(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetCharts(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetComments(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetPictures(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetTextBoxes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetCheckBoxes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetOleObjects(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetShapes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetSlicers(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetTimelines(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_Protect_ProtectionType(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_Protect_ProtectionType_String_String(void* instance_ptr, int type_, char* password, char* oldpassword);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_Unprotect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_Unprotect_String(void* instance_ptr, char* password);
   ASPOSE_CELLS_API c_return_int_value* Worksheet_GetIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_MoveTo(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_bool_value* Worksheet_IsProtected(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetValidations(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetAllowEditRanges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetErrorCheckOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetOutline(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Worksheet_GetFirstVisibleRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetFirstVisibleRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Worksheet_GetFirstVisibleColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetFirstVisibleColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Worksheet_Replace(void* instance_ptr, char* oldstring, char* newstring);
   ASPOSE_CELLS_API c_return_int_value* Worksheet_GetZoom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetZoom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Worksheet_GetViewType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetViewType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Worksheet_IsPageBreakPreview(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetIsPageBreakPreview(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Worksheet_IsRulerVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetIsRulerVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetTabColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetTabColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* Worksheet_GetCodeName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetCodeName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetBackgroundImage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetBackgroundImage(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetConditionalFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Worksheet_GetActiveCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_SetActiveCell(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetCustomProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetPrintingPageBreaks(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetSmartTagSetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Worksheet_ToString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetScenarios(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_StartAccessCache(void* instance_ptr, int opts);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_CloseAccessCache(void* instance_ptr, int opts);
   ASPOSE_CELLS_API c_return_string_value* Worksheet_ConvertFormulaReferenceStyle(void* instance_ptr, char* formula, bool tor1c1, int basecellrow, int basecellcolumn);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_CalculateFormula_String(void* instance_ptr, char* formula);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_CalculateFormula_String_CalculationOptions(void* instance_ptr, char* formula, void* opts);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_CalculateFormula_String_FormulaParseOptions_CalculationOptions_Integer_Integer_CalculationData(void* instance_ptr, char* formula, void* popts, void* copts, int basecellrow, int basecellcolumn, void* calculationdata);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_CalculateArrayFormula_String_CalculationOptions(void* instance_ptr, char* formula, void* opts);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_CalculateArrayFormula_String_CalculationOptions_Integer_Integer(void* instance_ptr, char* formula, void* opts, int maxrowcount, int maxcolumncount);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_CalculateArrayFormula_String_FormulaParseOptions_CalculationOptions_Integer_Integer_Integer_Integer_CalculationData(void* instance_ptr, char* formula, void* popts, void* copts, int basecellrow, int basecellcolumn, int maxrowcount, int maxcolumncount, void* calculationdata);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_CalculateFormula_CalculationOptions_Boolean(void* instance_ptr, void* options, bool recursive);
   ASPOSE_CELLS_API c_return_ptr_value* Worksheet_GetCellWatches(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Worksheet_RefreshPivotTables(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Worksheet_RefreshPivotTables_PivotTableRefreshOption(void* instance_ptr, void* option);


   ASPOSE_CELLS_API void Delete_Worksheet( void* instance_ptr);

   /**************Class WorksheetCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* WorksheetCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_GetWebExtensionTaskPanes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_GetWebExtensions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_GetThreadedCommentAuthors(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* WorksheetCollection_IsRefreshAllConnections(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorksheetCollection_SetIsRefreshAllConnections(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_CreateRange(void* instance_ptr, char* address, int sheetindex);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_CreateUnionRange(void* instance_ptr, char* address, int sheetindex);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_GetNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_Get_String(void* instance_ptr, char* sheetname);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_GetSheetByCodeName(void* instance_ptr, char* codename);
   ASPOSE_CELLS_API c_return_string_value* WorksheetCollection_GetActiveSheetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorksheetCollection_SetActiveSheetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* WorksheetCollection_GetActiveSheetIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorksheetCollection_SetActiveSheetIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* WorksheetCollection_SortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_Insert_Integer_SheetType(void* instance_ptr, int index, int sheettype);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_Insert_Integer_SheetType_String(void* instance_ptr, int index, int sheettype, char* sheetname);
   ASPOSE_CELLS_API c_return_int_value* WorksheetCollection_Add_SheetType(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* WorksheetCollection_SwapSheet(void* instance_ptr, int sheetindex1, int sheetindex2);
   ASPOSE_CELLS_API c_return_int_value* WorksheetCollection_Add(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_Add_String(void* instance_ptr, char* sheetname);
   ASPOSE_CELLS_API c_return_int_value* WorksheetCollection_RegisterAddInFunction_String_String_Boolean(void* instance_ptr, char* addinfile, char* functionname, bool lib);
   ASPOSE_CELLS_API c_return_string_value* WorksheetCollection_RegisterAddInFunction_Integer_String(void* instance_ptr, int id, char* functionname);
   ASPOSE_CELLS_API c_return_void_value* WorksheetCollection_RemoveAt_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_void_value* WorksheetCollection_RemoveAt_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* WorksheetCollection_Clear(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* WorksheetCollection_AddCopy_String(void* instance_ptr, char* sheetname);
   ASPOSE_CELLS_API c_return_int_value* WorksheetCollection_AddCopy_Integer(void* instance_ptr, int sheetindex);
   ASPOSE_CELLS_API c_return_void_value* WorksheetCollection_AddCopy_WorksheetArray_U16StringArray(void* instance_ptr, void* source, int source_length, void* destsheetnames, int destsheetnames_length);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_GetDxfs(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_GetRangeByName_String(void* instance_ptr, char* rangename);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_GetRangeByName_String_Integer_Boolean(void* instance_ptr, char* rangename, int currentsheetindex, bool includetable);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_GetNamedRanges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_GetNamedRangesAndTables(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_GetXmlMaps(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorksheetCollection_SetXmlMaps(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_GetBuiltInDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_GetCustomDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_GetOleSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorksheetCollection_SetOleSize_Object(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_void_value* WorksheetCollection_SetOleSize_Integer_Integer_Integer_Integer(void* instance_ptr, int startrow, int endrow, int startcolumn, int endcolumn);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_GetExternalLinks(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_GetTableStyles(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorksheetCollection_ClearPivottables(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WorksheetCollection_GetRevisionLogs(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorksheetCollection_RefreshAll(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorksheetCollection_RefreshPivotTables(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* WorksheetCollection_RefreshPivotTables_PivotTableRefreshOption(void* instance_ptr, void* option);
   ASPOSE_CELLS_API c_return_int_value* WorksheetCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_WorksheetCollection( void* instance_ptr);

   /**************Class WriteProtection *****************/


   ASPOSE_CELLS_API c_return_bool_value* WriteProtection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* WriteProtection_GetAuthor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WriteProtection_SetAuthor(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* WriteProtection_GetRecommendReadOnly(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WriteProtection_SetRecommendReadOnly(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WriteProtection_IsWriteProtected(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* WriteProtection_GetPassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WriteProtection_SetPassword(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* WriteProtection_ValidatePassword(void* instance_ptr, char* password);


   ASPOSE_CELLS_API void Delete_WriteProtection( void* instance_ptr);

   /**************Class XlsbSaveOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_XlsbSaveOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_XlsbSaveOptions_SaveOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* XlsbSaveOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* XlsbSaveOptions_GetCompressionType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsbSaveOptions_SetCompressionType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* XlsbSaveOptions_GetExportAllColumnIndexes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsbSaveOptions_SetExportAllColumnIndexes(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* XlsbSaveOptions_GetSaveFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* XlsbSaveOptions_GetClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsbSaveOptions_SetClearData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* XlsbSaveOptions_GetCachedFileFolder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsbSaveOptions_SetCachedFileFolder(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* XlsbSaveOptions_GetValidateMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsbSaveOptions_SetValidateMergedAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XlsbSaveOptions_GetMergeAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsbSaveOptions_SetMergeAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XlsbSaveOptions_GetCreateDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsbSaveOptions_SetCreateDirectory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XlsbSaveOptions_GetSortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsbSaveOptions_SetSortNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XlsbSaveOptions_GetSortExternalNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsbSaveOptions_SetSortExternalNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XlsbSaveOptions_GetRefreshChartCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsbSaveOptions_SetRefreshChartCache(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XlsbSaveOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsbSaveOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XlsbSaveOptions_GetUpdateSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsbSaveOptions_SetUpdateSmartArt(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XlsbSaveOptions_GetEncryptDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsbSaveOptions_SetEncryptDocumentProperties(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_XlsbSaveOptions( void* instance_ptr);

   /**************Class XlsSaveOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_XlsSaveOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_XlsSaveOptions_SaveFormat(int saveformat);
   ASPOSE_CELLS_API c_return_ptr_value* New_XlsSaveOptions_SaveOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* XlsSaveOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* XlsSaveOptions_GetMatchColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsSaveOptions_SetMatchColor(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XlsSaveOptions_GetWpsCompatibility(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsSaveOptions_SetWpsCompatibility(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* XlsSaveOptions_GetSaveFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* XlsSaveOptions_GetClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsSaveOptions_SetClearData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* XlsSaveOptions_GetCachedFileFolder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsSaveOptions_SetCachedFileFolder(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* XlsSaveOptions_GetValidateMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsSaveOptions_SetValidateMergedAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XlsSaveOptions_GetMergeAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsSaveOptions_SetMergeAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XlsSaveOptions_GetCreateDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsSaveOptions_SetCreateDirectory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XlsSaveOptions_GetSortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsSaveOptions_SetSortNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XlsSaveOptions_GetSortExternalNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsSaveOptions_SetSortExternalNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XlsSaveOptions_GetRefreshChartCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsSaveOptions_SetRefreshChartCache(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XlsSaveOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsSaveOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XlsSaveOptions_GetUpdateSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsSaveOptions_SetUpdateSmartArt(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XlsSaveOptions_GetEncryptDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XlsSaveOptions_SetEncryptDocumentProperties(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_XlsSaveOptions( void* instance_ptr);

   /**************Class XmlColumnProperty *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_XmlColumnProperty();

   ASPOSE_CELLS_API c_return_bool_value* XmlColumnProperty_IsNull(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_XmlColumnProperty( void* instance_ptr);

   /**************Class XmlDataBinding *****************/


   ASPOSE_CELLS_API c_return_bool_value* XmlDataBinding_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* XmlDataBinding_GetUrl(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_XmlDataBinding( void* instance_ptr);

   /**************Class XmlLoadOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_XmlLoadOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_XmlLoadOptions_LoadFormat(int type_);
   ASPOSE_CELLS_API c_return_ptr_value* New_XmlLoadOptions_LoadOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* XmlLoadOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* XmlLoadOptions_GetStartCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetStartCell(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* XmlLoadOptions_IsXmlMap(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetIsXmlMap(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XmlLoadOptions_GetContainsMultipleWorksheets(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetContainsMultipleWorksheets(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XmlLoadOptions_GetConvertNumericOrDate(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetConvertNumericOrDate(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* XmlLoadOptions_Get_NumberFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetNumberFormat(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* XmlLoadOptions_Get_DateFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetDateFormat(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* XmlLoadOptions_GetIgnoreRootAttributes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetIgnoreRootAttributes(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* XmlLoadOptions_GetLoadFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* XmlLoadOptions_GetPassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetPassword(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* XmlLoadOptions_GetParsingFormulaOnOpen(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetParsingFormulaOnOpen(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XmlLoadOptions_GetParsingPivotCachedRecords(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetParsingPivotCachedRecords(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetPaperSize(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_int_value* XmlLoadOptions_GetLanguageCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetLanguageCode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* XmlLoadOptions_GetRegion(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetRegion(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* XmlLoadOptions_GetDefaultStyleSettings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* XmlLoadOptions_GetInterruptMonitor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetInterruptMonitor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* XmlLoadOptions_GetIgnoreNotPrinted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetIgnoreNotPrinted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XmlLoadOptions_GetCheckDataValid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetCheckDataValid(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XmlLoadOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XmlLoadOptions_GetKeepUnparsedData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetKeepUnparsedData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* XmlLoadOptions_GetLoadFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetLoadFilter(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* XmlLoadOptions_GetMemorySetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetMemorySetting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* XmlLoadOptions_GetAutoFitterOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetAutoFitterOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* XmlLoadOptions_GetAutoFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetAutoFilter(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* XmlLoadOptions_GetFontConfigs(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetFontConfigs(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* XmlLoadOptions_GetIgnoreUselessShapes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetIgnoreUselessShapes(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XmlLoadOptions_GetPreservePaddingSpacesInFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlLoadOptions_SetPreservePaddingSpacesInFormula(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_XmlLoadOptions( void* instance_ptr);

   /**************Class XmlMap *****************/


   ASPOSE_CELLS_API c_return_bool_value* XmlMap_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* XmlMap_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlMap_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* XmlMap_GetRootElementName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* XmlMap_GetDataBinding(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_XmlMap( void* instance_ptr);

   /**************Class XmlMapCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* XmlMapCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* XmlMapCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* XmlMapCollection_Add(void* instance_ptr, char* url);
   ASPOSE_CELLS_API c_return_void_value* XmlMapCollection_Clear(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* XmlMapCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_XmlMapCollection( void* instance_ptr);

   /**************Class XmlSaveOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_XmlSaveOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_XmlSaveOptions_SaveOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* XmlSaveOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* XmlSaveOptions_GetSheetIndexes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlSaveOptions_SetSheetIndexes(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_ptr_value* XmlSaveOptions_GetExportArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlSaveOptions_SetExportArea(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* XmlSaveOptions_GetHasHeaderRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlSaveOptions_SetHasHeaderRow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* XmlSaveOptions_GetXmlMapName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlSaveOptions_SetXmlMapName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* XmlSaveOptions_GetSheetNameAsElementName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlSaveOptions_SetSheetNameAsElementName(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XmlSaveOptions_GetDataAsAttribute(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlSaveOptions_SetDataAsAttribute(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* XmlSaveOptions_GetSaveFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* XmlSaveOptions_GetClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlSaveOptions_SetClearData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* XmlSaveOptions_GetCachedFileFolder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlSaveOptions_SetCachedFileFolder(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* XmlSaveOptions_GetValidateMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlSaveOptions_SetValidateMergedAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XmlSaveOptions_GetMergeAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlSaveOptions_SetMergeAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XmlSaveOptions_GetCreateDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlSaveOptions_SetCreateDirectory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XmlSaveOptions_GetSortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlSaveOptions_SetSortNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XmlSaveOptions_GetSortExternalNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlSaveOptions_SetSortExternalNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XmlSaveOptions_GetRefreshChartCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlSaveOptions_SetRefreshChartCache(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XmlSaveOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlSaveOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XmlSaveOptions_GetUpdateSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlSaveOptions_SetUpdateSmartArt(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XmlSaveOptions_GetEncryptDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XmlSaveOptions_SetEncryptDocumentProperties(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_XmlSaveOptions( void* instance_ptr);

   /**************Class XpsSaveOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_XpsSaveOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_XpsSaveOptions_PaginatedSaveOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* XpsSaveOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* XpsSaveOptions_GetDefaultFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetDefaultFont(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* XpsSaveOptions_GetCheckWorkbookDefaultFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetCheckWorkbookDefaultFont(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetCheckFontCompatibility(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XpsSaveOptions_GetCheckFontCompatibility(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetIsFontSubstitutionCharGranularity(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XpsSaveOptions_IsFontSubstitutionCharGranularity(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* XpsSaveOptions_GetOnePagePerSheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetOnePagePerSheet(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XpsSaveOptions_GetAllColumnsInOnePagePerSheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetAllColumnsInOnePagePerSheet(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XpsSaveOptions_GetIgnoreError(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetIgnoreError(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XpsSaveOptions_GetOutputBlankPageWhenNothingToPrint(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetOutputBlankPageWhenNothingToPrint(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetPageIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* XpsSaveOptions_GetPageIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetPageCount(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* XpsSaveOptions_GetPageCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* XpsSaveOptions_GetPrintingPageType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetPrintingPageType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* XpsSaveOptions_GetGridlineType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetGridlineType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* XpsSaveOptions_GetTextCrossType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetTextCrossType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* XpsSaveOptions_GetDefaultEditLanguage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetDefaultEditLanguage(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* XpsSaveOptions_GetSheetSet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetSheetSet(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* XpsSaveOptions_GetDrawObjectEventHandler(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetDrawObjectEventHandler(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* XpsSaveOptions_GetEmfRenderSetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetEmfRenderSetting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* XpsSaveOptions_GetSaveFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* XpsSaveOptions_GetClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetClearData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* XpsSaveOptions_GetCachedFileFolder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetCachedFileFolder(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* XpsSaveOptions_GetValidateMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetValidateMergedAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XpsSaveOptions_GetMergeAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetMergeAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XpsSaveOptions_GetCreateDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetCreateDirectory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XpsSaveOptions_GetSortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetSortNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XpsSaveOptions_GetSortExternalNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetSortExternalNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XpsSaveOptions_GetRefreshChartCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetRefreshChartCache(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XpsSaveOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XpsSaveOptions_GetUpdateSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetUpdateSmartArt(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* XpsSaveOptions_GetEncryptDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* XpsSaveOptions_SetEncryptDocumentProperties(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_XpsSaveOptions( void* instance_ptr);

   /**************Class AccentEquationNode *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_AccentEquationNode(void* src);

   ASPOSE_CELLS_API c_return_bool_value* AccentEquationNode_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* AccentEquationNode_GetAccentCharacter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AccentEquationNode_SetAccentCharacter(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* AccentEquationNode_GetAccentCharacterType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AccentEquationNode_SetAccentCharacterType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* AccentEquationNode_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* AccentEquationNode_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* AccentEquationNode_GetLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* AccentEquationNode_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AccentEquationNode_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* AccentEquationNode_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* AccentEquationNode_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* AccentEquationNode_GetParentNode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AccentEquationNode_SetParentNode(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* AccentEquationNode_ToLaTeX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* AccentEquationNode_ToMathML(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* AccentEquationNode_AddChild_EquationNodeType(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_void_value* AccentEquationNode_AddChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_ptr_value* AccentEquationNode_InsertChild(void* instance_ptr, int index, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* AccentEquationNode_InsertAfter(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* AccentEquationNode_InsertBefore(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* AccentEquationNode_GetChild(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* AccentEquationNode_Remove(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AccentEquationNode_RemoveChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_void_value* AccentEquationNode_RemoveChild_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* AccentEquationNode_RemoveAllChildren(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* AccentEquationNode_GetEquationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* AccentEquationNode_CreateNode(int equationtype, void* workbook, void* parent);


   ASPOSE_CELLS_API void Delete_AccentEquationNode( void* instance_ptr);

   /**************Class ArrayEquationNode *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ArrayEquationNode(void* src);

   ASPOSE_CELLS_API c_return_bool_value* ArrayEquationNode_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ArrayEquationNode_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* ArrayEquationNode_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ArrayEquationNode_GetLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ArrayEquationNode_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArrayEquationNode_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* ArrayEquationNode_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ArrayEquationNode_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ArrayEquationNode_GetParentNode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArrayEquationNode_SetParentNode(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* ArrayEquationNode_ToLaTeX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ArrayEquationNode_ToMathML(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ArrayEquationNode_AddChild_EquationNodeType(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_void_value* ArrayEquationNode_AddChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_ptr_value* ArrayEquationNode_InsertChild(void* instance_ptr, int index, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* ArrayEquationNode_InsertAfter(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* ArrayEquationNode_InsertBefore(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* ArrayEquationNode_GetChild(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* ArrayEquationNode_Remove(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArrayEquationNode_RemoveChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_void_value* ArrayEquationNode_RemoveChild_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* ArrayEquationNode_RemoveAllChildren(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ArrayEquationNode_GetEquationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ArrayEquationNode_CreateNode(int equationtype, void* workbook, void* parent);


   ASPOSE_CELLS_API void Delete_ArrayEquationNode( void* instance_ptr);

   /**************Class BarEquationNode *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_BarEquationNode(void* src);

   ASPOSE_CELLS_API c_return_bool_value* BarEquationNode_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* BarEquationNode_GetBarPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BarEquationNode_SetBarPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* BarEquationNode_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* BarEquationNode_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* BarEquationNode_GetLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* BarEquationNode_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BarEquationNode_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* BarEquationNode_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* BarEquationNode_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* BarEquationNode_GetParentNode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BarEquationNode_SetParentNode(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* BarEquationNode_ToLaTeX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* BarEquationNode_ToMathML(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* BarEquationNode_AddChild_EquationNodeType(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_void_value* BarEquationNode_AddChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_ptr_value* BarEquationNode_InsertChild(void* instance_ptr, int index, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* BarEquationNode_InsertAfter(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* BarEquationNode_InsertBefore(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* BarEquationNode_GetChild(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* BarEquationNode_Remove(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BarEquationNode_RemoveChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_void_value* BarEquationNode_RemoveChild_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* BarEquationNode_RemoveAllChildren(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* BarEquationNode_GetEquationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* BarEquationNode_CreateNode(int equationtype, void* workbook, void* parent);


   ASPOSE_CELLS_API void Delete_BarEquationNode( void* instance_ptr);

   /**************Class BorderBoxEquationNode *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_BorderBoxEquationNode(void* src);

   ASPOSE_CELLS_API c_return_bool_value* BorderBoxEquationNode_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* BorderBoxEquationNode_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* BorderBoxEquationNode_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* BorderBoxEquationNode_GetLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* BorderBoxEquationNode_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BorderBoxEquationNode_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* BorderBoxEquationNode_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* BorderBoxEquationNode_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* BorderBoxEquationNode_GetParentNode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BorderBoxEquationNode_SetParentNode(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* BorderBoxEquationNode_ToLaTeX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* BorderBoxEquationNode_ToMathML(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* BorderBoxEquationNode_AddChild_EquationNodeType(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_void_value* BorderBoxEquationNode_AddChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_ptr_value* BorderBoxEquationNode_InsertChild(void* instance_ptr, int index, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* BorderBoxEquationNode_InsertAfter(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* BorderBoxEquationNode_InsertBefore(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* BorderBoxEquationNode_GetChild(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* BorderBoxEquationNode_Remove(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BorderBoxEquationNode_RemoveChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_void_value* BorderBoxEquationNode_RemoveChild_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* BorderBoxEquationNode_RemoveAllChildren(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* BorderBoxEquationNode_GetEquationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* BorderBoxEquationNode_CreateNode(int equationtype, void* workbook, void* parent);


   ASPOSE_CELLS_API void Delete_BorderBoxEquationNode( void* instance_ptr);

   /**************Class BoxEquationNode *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_BoxEquationNode(void* src);

   ASPOSE_CELLS_API c_return_bool_value* BoxEquationNode_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* BoxEquationNode_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* BoxEquationNode_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* BoxEquationNode_GetLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* BoxEquationNode_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BoxEquationNode_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* BoxEquationNode_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* BoxEquationNode_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* BoxEquationNode_GetParentNode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BoxEquationNode_SetParentNode(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* BoxEquationNode_ToLaTeX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* BoxEquationNode_ToMathML(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* BoxEquationNode_AddChild_EquationNodeType(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_void_value* BoxEquationNode_AddChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_ptr_value* BoxEquationNode_InsertChild(void* instance_ptr, int index, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* BoxEquationNode_InsertAfter(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* BoxEquationNode_InsertBefore(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* BoxEquationNode_GetChild(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* BoxEquationNode_Remove(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BoxEquationNode_RemoveChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_void_value* BoxEquationNode_RemoveChild_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* BoxEquationNode_RemoveAllChildren(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* BoxEquationNode_GetEquationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* BoxEquationNode_CreateNode(int equationtype, void* workbook, void* parent);


   ASPOSE_CELLS_API void Delete_BoxEquationNode( void* instance_ptr);

   /**************Class DelimiterEquationNode *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_DelimiterEquationNode(void* src);

   ASPOSE_CELLS_API c_return_bool_value* DelimiterEquationNode_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* DelimiterEquationNode_GetBeginChar(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DelimiterEquationNode_SetBeginChar(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* DelimiterEquationNode_GetEndChar(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DelimiterEquationNode_SetEndChar(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* DelimiterEquationNode_GetNaryGrow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DelimiterEquationNode_SetNaryGrow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* DelimiterEquationNode_GetSeparatorChar(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DelimiterEquationNode_SetSeparatorChar(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* DelimiterEquationNode_GetDelimiterShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DelimiterEquationNode_SetDelimiterShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* DelimiterEquationNode_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* DelimiterEquationNode_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DelimiterEquationNode_GetLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DelimiterEquationNode_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DelimiterEquationNode_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* DelimiterEquationNode_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DelimiterEquationNode_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DelimiterEquationNode_GetParentNode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DelimiterEquationNode_SetParentNode(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* DelimiterEquationNode_ToLaTeX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* DelimiterEquationNode_ToMathML(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DelimiterEquationNode_AddChild_EquationNodeType(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_void_value* DelimiterEquationNode_AddChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_ptr_value* DelimiterEquationNode_InsertChild(void* instance_ptr, int index, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* DelimiterEquationNode_InsertAfter(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* DelimiterEquationNode_InsertBefore(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* DelimiterEquationNode_GetChild(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* DelimiterEquationNode_Remove(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DelimiterEquationNode_RemoveChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_void_value* DelimiterEquationNode_RemoveChild_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* DelimiterEquationNode_RemoveAllChildren(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DelimiterEquationNode_GetEquationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DelimiterEquationNode_CreateNode(int equationtype, void* workbook, void* parent);


   ASPOSE_CELLS_API void Delete_DelimiterEquationNode( void* instance_ptr);

   /**************Class EquationComponentNode *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_EquationComponentNode(void* src);

   ASPOSE_CELLS_API c_return_bool_value* EquationComponentNode_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* EquationComponentNode_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* EquationComponentNode_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* EquationComponentNode_GetLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* EquationComponentNode_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EquationComponentNode_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* EquationComponentNode_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* EquationComponentNode_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* EquationComponentNode_GetParentNode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EquationComponentNode_SetParentNode(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* EquationComponentNode_ToLaTeX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* EquationComponentNode_ToMathML(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* EquationComponentNode_AddChild_EquationNodeType(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_void_value* EquationComponentNode_AddChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_ptr_value* EquationComponentNode_InsertChild(void* instance_ptr, int index, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* EquationComponentNode_InsertAfter(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* EquationComponentNode_InsertBefore(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* EquationComponentNode_GetChild(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* EquationComponentNode_Remove(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EquationComponentNode_RemoveChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_void_value* EquationComponentNode_RemoveChild_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* EquationComponentNode_RemoveAllChildren(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* EquationComponentNode_GetEquationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* EquationComponentNode_CreateNode(int equationtype, void* workbook, void* parent);


   ASPOSE_CELLS_API void Delete_EquationComponentNode( void* instance_ptr);

   /**************Class EquationNode *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_EquationNode(void* src);

   ASPOSE_CELLS_API c_return_bool_value* EquationNode_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* EquationNode_GetParentNode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EquationNode_SetParentNode(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* EquationNode_ToLaTeX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* EquationNode_ToMathML(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* EquationNode_AddChild_EquationNodeType(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_void_value* EquationNode_AddChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_ptr_value* EquationNode_InsertChild(void* instance_ptr, int index, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* EquationNode_InsertAfter(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* EquationNode_InsertBefore(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* EquationNode_GetChild(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* EquationNode_Remove(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EquationNode_RemoveChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_void_value* EquationNode_RemoveChild_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* EquationNode_RemoveAllChildren(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* EquationNode_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* EquationNode_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* EquationNode_GetEquationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* EquationNode_CreateNode(int equationtype, void* workbook, void* parent);
   ASPOSE_CELLS_API c_return_int_value* EquationNode_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* EquationNode_GetLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* EquationNode_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EquationNode_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* EquationNode_GetTextOptions(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_EquationNode( void* instance_ptr);

   /**************Class EquationNodeParagraph *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_EquationNodeParagraph(void* src);

   ASPOSE_CELLS_API c_return_bool_value* EquationNodeParagraph_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* EquationNodeParagraph_GetJustification(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EquationNodeParagraph_SetJustification(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* EquationNodeParagraph_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* EquationNodeParagraph_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* EquationNodeParagraph_GetLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* EquationNodeParagraph_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EquationNodeParagraph_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* EquationNodeParagraph_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* EquationNodeParagraph_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* EquationNodeParagraph_GetParentNode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EquationNodeParagraph_SetParentNode(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* EquationNodeParagraph_ToLaTeX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* EquationNodeParagraph_ToMathML(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* EquationNodeParagraph_AddChild_EquationNodeType(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_void_value* EquationNodeParagraph_AddChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_ptr_value* EquationNodeParagraph_InsertChild(void* instance_ptr, int index, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* EquationNodeParagraph_InsertAfter(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* EquationNodeParagraph_InsertBefore(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* EquationNodeParagraph_GetChild(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* EquationNodeParagraph_Remove(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EquationNodeParagraph_RemoveChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_void_value* EquationNodeParagraph_RemoveChild_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* EquationNodeParagraph_RemoveAllChildren(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* EquationNodeParagraph_GetEquationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* EquationNodeParagraph_CreateNode(int equationtype, void* workbook, void* parent);


   ASPOSE_CELLS_API void Delete_EquationNodeParagraph( void* instance_ptr);

   /**************Class FractionEquationNode *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_FractionEquationNode(void* src);

   ASPOSE_CELLS_API c_return_bool_value* FractionEquationNode_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* FractionEquationNode_GetFractionType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FractionEquationNode_SetFractionType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* FractionEquationNode_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* FractionEquationNode_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* FractionEquationNode_GetLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* FractionEquationNode_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FractionEquationNode_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* FractionEquationNode_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* FractionEquationNode_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* FractionEquationNode_GetParentNode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FractionEquationNode_SetParentNode(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* FractionEquationNode_ToLaTeX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* FractionEquationNode_ToMathML(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* FractionEquationNode_AddChild_EquationNodeType(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_void_value* FractionEquationNode_AddChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_ptr_value* FractionEquationNode_InsertChild(void* instance_ptr, int index, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* FractionEquationNode_InsertAfter(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* FractionEquationNode_InsertBefore(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* FractionEquationNode_GetChild(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* FractionEquationNode_Remove(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FractionEquationNode_RemoveChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_void_value* FractionEquationNode_RemoveChild_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* FractionEquationNode_RemoveAllChildren(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* FractionEquationNode_GetEquationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* FractionEquationNode_CreateNode(int equationtype, void* workbook, void* parent);


   ASPOSE_CELLS_API void Delete_FractionEquationNode( void* instance_ptr);

   /**************Class FunctionEquationNode *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_FunctionEquationNode(void* src);

   ASPOSE_CELLS_API c_return_bool_value* FunctionEquationNode_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* FunctionEquationNode_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* FunctionEquationNode_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* FunctionEquationNode_GetLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* FunctionEquationNode_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FunctionEquationNode_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* FunctionEquationNode_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* FunctionEquationNode_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* FunctionEquationNode_GetParentNode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FunctionEquationNode_SetParentNode(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* FunctionEquationNode_ToLaTeX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* FunctionEquationNode_ToMathML(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* FunctionEquationNode_AddChild_EquationNodeType(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_void_value* FunctionEquationNode_AddChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_ptr_value* FunctionEquationNode_InsertChild(void* instance_ptr, int index, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* FunctionEquationNode_InsertAfter(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* FunctionEquationNode_InsertBefore(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* FunctionEquationNode_GetChild(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* FunctionEquationNode_Remove(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FunctionEquationNode_RemoveChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_void_value* FunctionEquationNode_RemoveChild_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* FunctionEquationNode_RemoveAllChildren(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* FunctionEquationNode_GetEquationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* FunctionEquationNode_CreateNode(int equationtype, void* workbook, void* parent);


   ASPOSE_CELLS_API void Delete_FunctionEquationNode( void* instance_ptr);

   /**************Class GroupCharacterEquationNode *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_GroupCharacterEquationNode(void* src);

   ASPOSE_CELLS_API c_return_bool_value* GroupCharacterEquationNode_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* GroupCharacterEquationNode_GetGroupChr(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupCharacterEquationNode_SetGroupChr(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* GroupCharacterEquationNode_GetChrType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupCharacterEquationNode_SetChrType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupCharacterEquationNode_GetPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupCharacterEquationNode_SetPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupCharacterEquationNode_GetVertJc(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupCharacterEquationNode_SetVertJc(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* GroupCharacterEquationNode_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* GroupCharacterEquationNode_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* GroupCharacterEquationNode_GetLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupCharacterEquationNode_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupCharacterEquationNode_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* GroupCharacterEquationNode_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* GroupCharacterEquationNode_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupCharacterEquationNode_GetParentNode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupCharacterEquationNode_SetParentNode(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* GroupCharacterEquationNode_ToLaTeX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* GroupCharacterEquationNode_ToMathML(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupCharacterEquationNode_AddChild_EquationNodeType(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_void_value* GroupCharacterEquationNode_AddChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_ptr_value* GroupCharacterEquationNode_InsertChild(void* instance_ptr, int index, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* GroupCharacterEquationNode_InsertAfter(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* GroupCharacterEquationNode_InsertBefore(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* GroupCharacterEquationNode_GetChild(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* GroupCharacterEquationNode_Remove(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupCharacterEquationNode_RemoveChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_void_value* GroupCharacterEquationNode_RemoveChild_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* GroupCharacterEquationNode_RemoveAllChildren(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* GroupCharacterEquationNode_GetEquationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupCharacterEquationNode_CreateNode(int equationtype, void* workbook, void* parent);


   ASPOSE_CELLS_API void Delete_GroupCharacterEquationNode( void* instance_ptr);

   /**************Class LimLowUppEquationNode *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_LimLowUppEquationNode(void* src);

   ASPOSE_CELLS_API c_return_bool_value* LimLowUppEquationNode_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* LimLowUppEquationNode_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* LimLowUppEquationNode_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* LimLowUppEquationNode_GetLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LimLowUppEquationNode_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LimLowUppEquationNode_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* LimLowUppEquationNode_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* LimLowUppEquationNode_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LimLowUppEquationNode_GetParentNode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LimLowUppEquationNode_SetParentNode(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* LimLowUppEquationNode_ToLaTeX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* LimLowUppEquationNode_ToMathML(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LimLowUppEquationNode_AddChild_EquationNodeType(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_void_value* LimLowUppEquationNode_AddChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_ptr_value* LimLowUppEquationNode_InsertChild(void* instance_ptr, int index, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* LimLowUppEquationNode_InsertAfter(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* LimLowUppEquationNode_InsertBefore(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* LimLowUppEquationNode_GetChild(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* LimLowUppEquationNode_Remove(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LimLowUppEquationNode_RemoveChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_void_value* LimLowUppEquationNode_RemoveChild_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* LimLowUppEquationNode_RemoveAllChildren(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* LimLowUppEquationNode_GetEquationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LimLowUppEquationNode_CreateNode(int equationtype, void* workbook, void* parent);


   ASPOSE_CELLS_API void Delete_LimLowUppEquationNode( void* instance_ptr);

   /**************Class MathematicalEquationNode *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_MathematicalEquationNode(void* src);

   ASPOSE_CELLS_API c_return_bool_value* MathematicalEquationNode_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* MathematicalEquationNode_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* MathematicalEquationNode_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* MathematicalEquationNode_GetLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* MathematicalEquationNode_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MathematicalEquationNode_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* MathematicalEquationNode_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* MathematicalEquationNode_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* MathematicalEquationNode_GetParentNode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MathematicalEquationNode_SetParentNode(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* MathematicalEquationNode_ToLaTeX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* MathematicalEquationNode_ToMathML(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* MathematicalEquationNode_AddChild_EquationNodeType(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_void_value* MathematicalEquationNode_AddChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_ptr_value* MathematicalEquationNode_InsertChild(void* instance_ptr, int index, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* MathematicalEquationNode_InsertAfter(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* MathematicalEquationNode_InsertBefore(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* MathematicalEquationNode_GetChild(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* MathematicalEquationNode_Remove(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MathematicalEquationNode_RemoveChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_void_value* MathematicalEquationNode_RemoveChild_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* MathematicalEquationNode_RemoveAllChildren(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* MathematicalEquationNode_GetEquationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* MathematicalEquationNode_CreateNode(int equationtype, void* workbook, void* parent);


   ASPOSE_CELLS_API void Delete_MathematicalEquationNode( void* instance_ptr);

   /**************Class MatrixEquationNode *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_MatrixEquationNode(void* src);

   ASPOSE_CELLS_API c_return_bool_value* MatrixEquationNode_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* MatrixEquationNode_GetBaseJc(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MatrixEquationNode_SetBaseJc(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* MatrixEquationNode_IsHidePlaceholder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MatrixEquationNode_SetIsHidePlaceholder(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* MatrixEquationNode_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* MatrixEquationNode_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* MatrixEquationNode_GetLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* MatrixEquationNode_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MatrixEquationNode_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* MatrixEquationNode_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* MatrixEquationNode_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* MatrixEquationNode_GetParentNode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MatrixEquationNode_SetParentNode(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* MatrixEquationNode_ToLaTeX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* MatrixEquationNode_ToMathML(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* MatrixEquationNode_AddChild_EquationNodeType(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_void_value* MatrixEquationNode_AddChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_ptr_value* MatrixEquationNode_InsertChild(void* instance_ptr, int index, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* MatrixEquationNode_InsertAfter(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* MatrixEquationNode_InsertBefore(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* MatrixEquationNode_GetChild(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* MatrixEquationNode_Remove(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MatrixEquationNode_RemoveChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_void_value* MatrixEquationNode_RemoveChild_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* MatrixEquationNode_RemoveAllChildren(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* MatrixEquationNode_GetEquationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* MatrixEquationNode_CreateNode(int equationtype, void* workbook, void* parent);


   ASPOSE_CELLS_API void Delete_MatrixEquationNode( void* instance_ptr);

   /**************Class NaryEquationNode *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_NaryEquationNode(void* src);

   ASPOSE_CELLS_API c_return_bool_value* NaryEquationNode_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* NaryEquationNode_IsHideSubscript(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NaryEquationNode_SetIsHideSubscript(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* NaryEquationNode_IsHideSuperscript(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NaryEquationNode_SetIsHideSuperscript(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* NaryEquationNode_GetLimitLocation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NaryEquationNode_SetLimitLocation(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* NaryEquationNode_GetNaryOperator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NaryEquationNode_SetNaryOperator(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* NaryEquationNode_GetNaryOperatorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NaryEquationNode_SetNaryOperatorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* NaryEquationNode_GetNaryGrow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NaryEquationNode_SetNaryGrow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* NaryEquationNode_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* NaryEquationNode_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* NaryEquationNode_GetLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* NaryEquationNode_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NaryEquationNode_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* NaryEquationNode_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* NaryEquationNode_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* NaryEquationNode_GetParentNode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NaryEquationNode_SetParentNode(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* NaryEquationNode_ToLaTeX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* NaryEquationNode_ToMathML(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* NaryEquationNode_AddChild_EquationNodeType(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_void_value* NaryEquationNode_AddChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_ptr_value* NaryEquationNode_InsertChild(void* instance_ptr, int index, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* NaryEquationNode_InsertAfter(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* NaryEquationNode_InsertBefore(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* NaryEquationNode_GetChild(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* NaryEquationNode_Remove(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NaryEquationNode_RemoveChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_void_value* NaryEquationNode_RemoveChild_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* NaryEquationNode_RemoveAllChildren(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* NaryEquationNode_GetEquationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* NaryEquationNode_CreateNode(int equationtype, void* workbook, void* parent);


   ASPOSE_CELLS_API void Delete_NaryEquationNode( void* instance_ptr);

   /**************Class RadicalEquationNode *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_RadicalEquationNode(void* src);

   ASPOSE_CELLS_API c_return_bool_value* RadicalEquationNode_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RadicalEquationNode_IsDegHide(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadicalEquationNode_SetIsDegHide(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* RadicalEquationNode_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* RadicalEquationNode_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RadicalEquationNode_GetLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RadicalEquationNode_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadicalEquationNode_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* RadicalEquationNode_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RadicalEquationNode_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RadicalEquationNode_GetParentNode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadicalEquationNode_SetParentNode(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* RadicalEquationNode_ToLaTeX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* RadicalEquationNode_ToMathML(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RadicalEquationNode_AddChild_EquationNodeType(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_void_value* RadicalEquationNode_AddChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_ptr_value* RadicalEquationNode_InsertChild(void* instance_ptr, int index, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* RadicalEquationNode_InsertAfter(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* RadicalEquationNode_InsertBefore(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* RadicalEquationNode_GetChild(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* RadicalEquationNode_Remove(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadicalEquationNode_RemoveChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_void_value* RadicalEquationNode_RemoveChild_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* RadicalEquationNode_RemoveAllChildren(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RadicalEquationNode_GetEquationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RadicalEquationNode_CreateNode(int equationtype, void* workbook, void* parent);


   ASPOSE_CELLS_API void Delete_RadicalEquationNode( void* instance_ptr);

   /**************Class SubSupEquationNode *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_SubSupEquationNode(void* src);

   ASPOSE_CELLS_API c_return_bool_value* SubSupEquationNode_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* SubSupEquationNode_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* SubSupEquationNode_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SubSupEquationNode_GetLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SubSupEquationNode_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SubSupEquationNode_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* SubSupEquationNode_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SubSupEquationNode_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SubSupEquationNode_GetParentNode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SubSupEquationNode_SetParentNode(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* SubSupEquationNode_ToLaTeX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* SubSupEquationNode_ToMathML(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SubSupEquationNode_AddChild_EquationNodeType(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_void_value* SubSupEquationNode_AddChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_ptr_value* SubSupEquationNode_InsertChild(void* instance_ptr, int index, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* SubSupEquationNode_InsertAfter(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* SubSupEquationNode_InsertBefore(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* SubSupEquationNode_GetChild(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* SubSupEquationNode_Remove(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SubSupEquationNode_RemoveChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_void_value* SubSupEquationNode_RemoveChild_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* SubSupEquationNode_RemoveAllChildren(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SubSupEquationNode_GetEquationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SubSupEquationNode_CreateNode(int equationtype, void* workbook, void* parent);


   ASPOSE_CELLS_API void Delete_SubSupEquationNode( void* instance_ptr);

   /**************Class TextRunEquationNode *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_TextRunEquationNode(void* src);

   ASPOSE_CELLS_API c_return_bool_value* TextRunEquationNode_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* TextRunEquationNode_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextRunEquationNode_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* TextRunEquationNode_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* TextRunEquationNode_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TextRunEquationNode_GetLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextRunEquationNode_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextRunEquationNode_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* TextRunEquationNode_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TextRunEquationNode_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextRunEquationNode_GetParentNode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextRunEquationNode_SetParentNode(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* TextRunEquationNode_ToLaTeX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* TextRunEquationNode_ToMathML(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextRunEquationNode_AddChild_EquationNodeType(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_void_value* TextRunEquationNode_AddChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_ptr_value* TextRunEquationNode_InsertChild(void* instance_ptr, int index, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* TextRunEquationNode_InsertAfter(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* TextRunEquationNode_InsertBefore(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* TextRunEquationNode_GetChild(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* TextRunEquationNode_Remove(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextRunEquationNode_RemoveChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_void_value* TextRunEquationNode_RemoveChild_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* TextRunEquationNode_RemoveAllChildren(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TextRunEquationNode_GetEquationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextRunEquationNode_CreateNode(int equationtype, void* workbook, void* parent);


   ASPOSE_CELLS_API void Delete_TextRunEquationNode( void* instance_ptr);

   /**************Class UnknowEquationNode *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_UnknowEquationNode(void* src);

   ASPOSE_CELLS_API c_return_bool_value* UnknowEquationNode_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* UnknowEquationNode_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* UnknowEquationNode_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* UnknowEquationNode_GetLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* UnknowEquationNode_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnknowEquationNode_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* UnknowEquationNode_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* UnknowEquationNode_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* UnknowEquationNode_GetParentNode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnknowEquationNode_SetParentNode(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* UnknowEquationNode_ToLaTeX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* UnknowEquationNode_ToMathML(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* UnknowEquationNode_AddChild_EquationNodeType(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_void_value* UnknowEquationNode_AddChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_ptr_value* UnknowEquationNode_InsertChild(void* instance_ptr, int index, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* UnknowEquationNode_InsertAfter(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* UnknowEquationNode_InsertBefore(void* instance_ptr, int equationtype);
   ASPOSE_CELLS_API c_return_ptr_value* UnknowEquationNode_GetChild(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* UnknowEquationNode_Remove(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnknowEquationNode_RemoveChild_EquationNode(void* instance_ptr, void* node);
   ASPOSE_CELLS_API c_return_void_value* UnknowEquationNode_RemoveChild_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* UnknowEquationNode_RemoveAllChildren(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* UnknowEquationNode_GetEquationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* UnknowEquationNode_CreateNode(int equationtype, void* workbook, void* parent);


   ASPOSE_CELLS_API void Delete_UnknowEquationNode( void* instance_ptr);

   /**************Class ActiveXControl *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ActiveXControl(void* src);

   ASPOSE_CELLS_API c_return_bool_value* ActiveXControl_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ActiveXControl_IsEnabled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControl_SetIsEnabled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ActiveXControl_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControl_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ActiveXControl_IsTransparent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControl_SetIsTransparent(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ActiveXControl_GetIMEMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControl_SetIMEMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ActiveXControl_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ActiveXControl_GetTextAlign(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControl_SetTextAlign(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ActiveXControl_GetData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ActiveXControl_IsAutoSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControl_SetIsAutoSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ActiveXControl_GetWorkbook(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ActiveXControl_GetMouseIcon(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControl_SetMouseIcon(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_int_value* ActiveXControl_GetMousePointer(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControl_SetMousePointer(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* ActiveXControl_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControl_SetLinkedCell(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ActiveXControl_GetListFillRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControl_SetListFillRange(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* ActiveXControl_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* ActiveXControl_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControl_SetWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ActiveXControl_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControl_SetHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ActiveXControl_GetForeOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControl_SetForeOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ActiveXControl_GetBackOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControl_SetBackOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ActiveXControl_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControl_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ActiveXControl_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControl_SetShadow(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_ActiveXControl( void* instance_ptr);

   /**************Class ActiveXControlBase *****************/


   ASPOSE_CELLS_API c_return_bool_value* ActiveXControlBase_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ActiveXControlBase_GetWorkbook(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ActiveXControlBase_GetMouseIcon(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControlBase_SetMouseIcon(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_int_value* ActiveXControlBase_GetMousePointer(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControlBase_SetMousePointer(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* ActiveXControlBase_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControlBase_SetLinkedCell(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ActiveXControlBase_GetListFillRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControlBase_SetListFillRange(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* ActiveXControlBase_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* ActiveXControlBase_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControlBase_SetWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ActiveXControlBase_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControlBase_SetHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ActiveXControlBase_GetForeOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControlBase_SetForeOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ActiveXControlBase_GetBackOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControlBase_SetBackOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ActiveXControlBase_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControlBase_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ActiveXControlBase_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ActiveXControlBase_SetShadow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ActiveXControlBase_GetData(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ActiveXControlBase( void* instance_ptr);

   /**************Class CheckBoxActiveXControl *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_CheckBoxActiveXControl(void* src);

   ASPOSE_CELLS_API c_return_bool_value* CheckBoxActiveXControl_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CheckBoxActiveXControl_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* CheckBoxActiveXControl_GetGroupName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetGroupName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* CheckBoxActiveXControl_GetAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* CheckBoxActiveXControl_IsWordWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetIsWordWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* CheckBoxActiveXControl_GetCaption(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetCaption(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* CheckBoxActiveXControl_GetPicturePosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetPicturePosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBoxActiveXControl_GetSpecialEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetSpecialEffect(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBoxActiveXControl_GetPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetPicture(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_char_value* CheckBoxActiveXControl_GetAccelerator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetAccelerator(void* instance_ptr, char value);
   ASPOSE_CELLS_API c_return_int_value* CheckBoxActiveXControl_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetValue(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* CheckBoxActiveXControl_IsTripleState(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetIsTripleState(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CheckBoxActiveXControl_IsEnabled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetIsEnabled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CheckBoxActiveXControl_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CheckBoxActiveXControl_IsTransparent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetIsTransparent(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* CheckBoxActiveXControl_GetIMEMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetIMEMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBoxActiveXControl_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CheckBoxActiveXControl_GetTextAlign(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetTextAlign(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBoxActiveXControl_GetData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CheckBoxActiveXControl_IsAutoSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetIsAutoSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBoxActiveXControl_GetWorkbook(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBoxActiveXControl_GetMouseIcon(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetMouseIcon(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_int_value* CheckBoxActiveXControl_GetMousePointer(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetMousePointer(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* CheckBoxActiveXControl_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetLinkedCell(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* CheckBoxActiveXControl_GetListFillRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetListFillRange(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_double_value* CheckBoxActiveXControl_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CheckBoxActiveXControl_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* CheckBoxActiveXControl_GetForeOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetForeOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBoxActiveXControl_GetBackOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetBackOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* CheckBoxActiveXControl_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CheckBoxActiveXControl_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBoxActiveXControl_SetShadow(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_CheckBoxActiveXControl( void* instance_ptr);

   /**************Class ComboBoxActiveXControl *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ComboBoxActiveXControl(void* src);

   ASPOSE_CELLS_API c_return_bool_value* ComboBoxActiveXControl_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ComboBoxActiveXControl_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ComboBoxActiveXControl_GetMaxLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetMaxLength(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ComboBoxActiveXControl_GetListWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetListWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ComboBoxActiveXControl_GetBoundColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetBoundColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBoxActiveXControl_GetTextColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetTextColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBoxActiveXControl_GetColumnCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetColumnCount(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBoxActiveXControl_GetListRows(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetListRows(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBoxActiveXControl_GetMatchEntry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetMatchEntry(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBoxActiveXControl_GetDropButtonStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetDropButtonStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBoxActiveXControl_GetShowDropButtonTypeWhen(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetShowDropButtonTypeWhen(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBoxActiveXControl_GetListStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetListStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBoxActiveXControl_GetBorderStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetBorderStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBoxActiveXControl_GetBorderOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetBorderOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBoxActiveXControl_GetSpecialEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetSpecialEffect(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ComboBoxActiveXControl_IsEditable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetIsEditable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ComboBoxActiveXControl_GetShowColumnHeads(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetShowColumnHeads(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ComboBoxActiveXControl_IsDragBehaviorEnabled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetIsDragBehaviorEnabled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ComboBoxActiveXControl_GetEnterFieldBehavior(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetEnterFieldBehavior(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ComboBoxActiveXControl_GetSelectionMargin(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetSelectionMargin(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* ComboBoxActiveXControl_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetValue(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* ComboBoxActiveXControl_GetHideSelection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetHideSelection(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_double_value* ComboBoxActiveXControl_GetColumnWidths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetColumnWidths(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_bool_value* ComboBoxActiveXControl_IsAutoWordSelected(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetIsAutoWordSelected(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ComboBoxActiveXControl_IsEnabled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetIsEnabled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ComboBoxActiveXControl_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ComboBoxActiveXControl_IsTransparent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetIsTransparent(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ComboBoxActiveXControl_GetIMEMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetIMEMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBoxActiveXControl_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ComboBoxActiveXControl_GetTextAlign(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetTextAlign(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBoxActiveXControl_GetData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ComboBoxActiveXControl_IsAutoSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetIsAutoSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBoxActiveXControl_GetWorkbook(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBoxActiveXControl_GetMouseIcon(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetMouseIcon(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_int_value* ComboBoxActiveXControl_GetMousePointer(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetMousePointer(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* ComboBoxActiveXControl_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetLinkedCell(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ComboBoxActiveXControl_GetListFillRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetListFillRange(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_double_value* ComboBoxActiveXControl_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ComboBoxActiveXControl_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ComboBoxActiveXControl_GetForeOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetForeOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBoxActiveXControl_GetBackOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetBackOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ComboBoxActiveXControl_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ComboBoxActiveXControl_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBoxActiveXControl_SetShadow(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_ComboBoxActiveXControl( void* instance_ptr);

   /**************Class CommandButtonActiveXControl *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_CommandButtonActiveXControl(void* src);

   ASPOSE_CELLS_API c_return_bool_value* CommandButtonActiveXControl_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CommandButtonActiveXControl_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* CommandButtonActiveXControl_GetCaption(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommandButtonActiveXControl_SetCaption(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* CommandButtonActiveXControl_GetPicturePosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommandButtonActiveXControl_SetPicturePosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CommandButtonActiveXControl_GetPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommandButtonActiveXControl_SetPicture(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_char_value* CommandButtonActiveXControl_GetAccelerator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommandButtonActiveXControl_SetAccelerator(void* instance_ptr, char value);
   ASPOSE_CELLS_API c_return_bool_value* CommandButtonActiveXControl_GetTakeFocusOnClick(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommandButtonActiveXControl_SetTakeFocusOnClick(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CommandButtonActiveXControl_IsWordWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommandButtonActiveXControl_SetIsWordWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CommandButtonActiveXControl_IsEnabled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommandButtonActiveXControl_SetIsEnabled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CommandButtonActiveXControl_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommandButtonActiveXControl_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CommandButtonActiveXControl_IsTransparent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommandButtonActiveXControl_SetIsTransparent(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* CommandButtonActiveXControl_GetIMEMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommandButtonActiveXControl_SetIMEMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CommandButtonActiveXControl_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CommandButtonActiveXControl_GetTextAlign(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommandButtonActiveXControl_SetTextAlign(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CommandButtonActiveXControl_GetData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CommandButtonActiveXControl_IsAutoSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommandButtonActiveXControl_SetIsAutoSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* CommandButtonActiveXControl_GetWorkbook(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CommandButtonActiveXControl_GetMouseIcon(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommandButtonActiveXControl_SetMouseIcon(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_int_value* CommandButtonActiveXControl_GetMousePointer(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommandButtonActiveXControl_SetMousePointer(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* CommandButtonActiveXControl_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommandButtonActiveXControl_SetLinkedCell(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* CommandButtonActiveXControl_GetListFillRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommandButtonActiveXControl_SetListFillRange(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_double_value* CommandButtonActiveXControl_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommandButtonActiveXControl_SetWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CommandButtonActiveXControl_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommandButtonActiveXControl_SetHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* CommandButtonActiveXControl_GetForeOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommandButtonActiveXControl_SetForeOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommandButtonActiveXControl_GetBackOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommandButtonActiveXControl_SetBackOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* CommandButtonActiveXControl_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommandButtonActiveXControl_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CommandButtonActiveXControl_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommandButtonActiveXControl_SetShadow(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_CommandButtonActiveXControl( void* instance_ptr);

   /**************Class ImageActiveXControl *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ImageActiveXControl(void* src);

   ASPOSE_CELLS_API c_return_bool_value* ImageActiveXControl_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ImageActiveXControl_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ImageActiveXControl_IsAutoSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetIsAutoSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ImageActiveXControl_GetBorderOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetBorderOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ImageActiveXControl_GetBorderStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetBorderStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ImageActiveXControl_GetPictureSizeMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetPictureSizeMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ImageActiveXControl_GetSpecialEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetSpecialEffect(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ImageActiveXControl_GetPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetPicture(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_int_value* ImageActiveXControl_GetPictureAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetPictureAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ImageActiveXControl_IsTiled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetIsTiled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImageActiveXControl_IsEnabled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetIsEnabled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImageActiveXControl_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImageActiveXControl_IsTransparent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetIsTransparent(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ImageActiveXControl_GetIMEMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetIMEMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ImageActiveXControl_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ImageActiveXControl_GetTextAlign(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetTextAlign(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ImageActiveXControl_GetData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ImageActiveXControl_GetWorkbook(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ImageActiveXControl_GetMouseIcon(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetMouseIcon(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_int_value* ImageActiveXControl_GetMousePointer(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetMousePointer(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* ImageActiveXControl_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetLinkedCell(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ImageActiveXControl_GetListFillRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetListFillRange(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_double_value* ImageActiveXControl_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ImageActiveXControl_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ImageActiveXControl_GetForeOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetForeOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ImageActiveXControl_GetBackOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetBackOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ImageActiveXControl_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImageActiveXControl_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageActiveXControl_SetShadow(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_ImageActiveXControl( void* instance_ptr);

   /**************Class LabelActiveXControl *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_LabelActiveXControl(void* src);

   ASPOSE_CELLS_API c_return_bool_value* LabelActiveXControl_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* LabelActiveXControl_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* LabelActiveXControl_GetCaption(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetCaption(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* LabelActiveXControl_GetPicturePosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetPicturePosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LabelActiveXControl_GetBorderOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetBorderOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LabelActiveXControl_GetBorderStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetBorderStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LabelActiveXControl_GetSpecialEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetSpecialEffect(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* LabelActiveXControl_GetPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetPicture(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_char_value* LabelActiveXControl_GetAccelerator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetAccelerator(void* instance_ptr, char value);
   ASPOSE_CELLS_API c_return_bool_value* LabelActiveXControl_IsWordWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetIsWordWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* LabelActiveXControl_IsEnabled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetIsEnabled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* LabelActiveXControl_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* LabelActiveXControl_IsTransparent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetIsTransparent(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* LabelActiveXControl_GetIMEMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetIMEMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* LabelActiveXControl_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* LabelActiveXControl_GetTextAlign(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetTextAlign(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* LabelActiveXControl_GetData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* LabelActiveXControl_IsAutoSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetIsAutoSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* LabelActiveXControl_GetWorkbook(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LabelActiveXControl_GetMouseIcon(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetMouseIcon(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_int_value* LabelActiveXControl_GetMousePointer(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetMousePointer(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* LabelActiveXControl_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetLinkedCell(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* LabelActiveXControl_GetListFillRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetListFillRange(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_double_value* LabelActiveXControl_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* LabelActiveXControl_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* LabelActiveXControl_GetForeOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetForeOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LabelActiveXControl_GetBackOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetBackOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* LabelActiveXControl_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* LabelActiveXControl_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LabelActiveXControl_SetShadow(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_LabelActiveXControl( void* instance_ptr);

   /**************Class ListBoxActiveXControl *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ListBoxActiveXControl(void* src);

   ASPOSE_CELLS_API c_return_bool_value* ListBoxActiveXControl_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ListBoxActiveXControl_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ListBoxActiveXControl_GetScrollBars(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetScrollBars(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ListBoxActiveXControl_GetListWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetListWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ListBoxActiveXControl_GetBoundColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetBoundColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBoxActiveXControl_GetTextColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetTextColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBoxActiveXControl_GetColumnCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetColumnCount(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBoxActiveXControl_GetMatchEntry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetMatchEntry(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBoxActiveXControl_GetListStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetListStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBoxActiveXControl_GetSelectionType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetSelectionType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* ListBoxActiveXControl_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetValue(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* ListBoxActiveXControl_GetBorderStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetBorderStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBoxActiveXControl_GetBorderOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetBorderOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBoxActiveXControl_GetSpecialEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetSpecialEffect(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ListBoxActiveXControl_GetShowColumnHeads(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetShowColumnHeads(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ListBoxActiveXControl_GetIntegralHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetIntegralHeight(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_double_value* ListBoxActiveXControl_GetColumnWidths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetColumnWidths(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_bool_value* ListBoxActiveXControl_IsEnabled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetIsEnabled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ListBoxActiveXControl_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ListBoxActiveXControl_IsTransparent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetIsTransparent(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ListBoxActiveXControl_GetIMEMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetIMEMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ListBoxActiveXControl_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ListBoxActiveXControl_GetTextAlign(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetTextAlign(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ListBoxActiveXControl_GetData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ListBoxActiveXControl_IsAutoSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetIsAutoSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ListBoxActiveXControl_GetWorkbook(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListBoxActiveXControl_GetMouseIcon(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetMouseIcon(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_int_value* ListBoxActiveXControl_GetMousePointer(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetMousePointer(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* ListBoxActiveXControl_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetLinkedCell(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ListBoxActiveXControl_GetListFillRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetListFillRange(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_double_value* ListBoxActiveXControl_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ListBoxActiveXControl_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ListBoxActiveXControl_GetForeOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetForeOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBoxActiveXControl_GetBackOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetBackOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ListBoxActiveXControl_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ListBoxActiveXControl_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBoxActiveXControl_SetShadow(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_ListBoxActiveXControl( void* instance_ptr);

   /**************Class RadioButtonActiveXControl *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_RadioButtonActiveXControl(void* src);

   ASPOSE_CELLS_API c_return_bool_value* RadioButtonActiveXControl_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RadioButtonActiveXControl_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* RadioButtonActiveXControl_GetGroupName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetGroupName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* RadioButtonActiveXControl_GetAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* RadioButtonActiveXControl_IsWordWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetIsWordWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* RadioButtonActiveXControl_IsEnabled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetIsEnabled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* RadioButtonActiveXControl_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* RadioButtonActiveXControl_IsTransparent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetIsTransparent(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* RadioButtonActiveXControl_GetIMEMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetIMEMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButtonActiveXControl_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RadioButtonActiveXControl_GetTextAlign(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetTextAlign(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButtonActiveXControl_GetData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RadioButtonActiveXControl_IsAutoSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetIsAutoSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButtonActiveXControl_GetWorkbook(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButtonActiveXControl_GetMouseIcon(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetMouseIcon(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_int_value* RadioButtonActiveXControl_GetMousePointer(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetMousePointer(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* RadioButtonActiveXControl_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetLinkedCell(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* RadioButtonActiveXControl_GetListFillRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetListFillRange(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_double_value* RadioButtonActiveXControl_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* RadioButtonActiveXControl_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* RadioButtonActiveXControl_GetForeOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetForeOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButtonActiveXControl_GetBackOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetBackOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* RadioButtonActiveXControl_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* RadioButtonActiveXControl_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetShadow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* RadioButtonActiveXControl_GetCaption(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetCaption(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* RadioButtonActiveXControl_GetPicturePosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetPicturePosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButtonActiveXControl_GetSpecialEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetSpecialEffect(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButtonActiveXControl_GetPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetPicture(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_char_value* RadioButtonActiveXControl_GetAccelerator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetAccelerator(void* instance_ptr, char value);
   ASPOSE_CELLS_API c_return_int_value* RadioButtonActiveXControl_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetValue(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* RadioButtonActiveXControl_IsTripleState(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButtonActiveXControl_SetIsTripleState(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_RadioButtonActiveXControl( void* instance_ptr);

   /**************Class ScrollBarActiveXControl *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ScrollBarActiveXControl(void* src);

   ASPOSE_CELLS_API c_return_bool_value* ScrollBarActiveXControl_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ScrollBarActiveXControl_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ScrollBarActiveXControl_GetLargeChange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBarActiveXControl_SetLargeChange(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBarActiveXControl_IsEnabled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBarActiveXControl_SetIsEnabled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBarActiveXControl_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBarActiveXControl_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBarActiveXControl_IsTransparent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBarActiveXControl_SetIsTransparent(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBarActiveXControl_GetIMEMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBarActiveXControl_SetIMEMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBarActiveXControl_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ScrollBarActiveXControl_GetTextAlign(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBarActiveXControl_SetTextAlign(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBarActiveXControl_GetData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBarActiveXControl_IsAutoSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBarActiveXControl_SetIsAutoSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBarActiveXControl_GetWorkbook(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBarActiveXControl_GetMouseIcon(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBarActiveXControl_SetMouseIcon(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_int_value* ScrollBarActiveXControl_GetMousePointer(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBarActiveXControl_SetMousePointer(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* ScrollBarActiveXControl_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBarActiveXControl_SetLinkedCell(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ScrollBarActiveXControl_GetListFillRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBarActiveXControl_SetListFillRange(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_double_value* ScrollBarActiveXControl_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBarActiveXControl_SetWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ScrollBarActiveXControl_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBarActiveXControl_SetHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBarActiveXControl_GetForeOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBarActiveXControl_SetForeOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBarActiveXControl_GetBackOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBarActiveXControl_SetBackOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBarActiveXControl_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBarActiveXControl_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBarActiveXControl_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBarActiveXControl_SetShadow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBarActiveXControl_GetMin(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBarActiveXControl_SetMin(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBarActiveXControl_GetMax(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBarActiveXControl_SetMax(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBarActiveXControl_GetPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBarActiveXControl_SetPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBarActiveXControl_GetSmallChange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBarActiveXControl_SetSmallChange(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBarActiveXControl_GetOrientation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBarActiveXControl_SetOrientation(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_ScrollBarActiveXControl( void* instance_ptr);

   /**************Class SpinButtonActiveXControl *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_SpinButtonActiveXControl(void* src);

   ASPOSE_CELLS_API c_return_bool_value* SpinButtonActiveXControl_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SpinButtonActiveXControl_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SpinButtonActiveXControl_GetMin(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpinButtonActiveXControl_SetMin(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SpinButtonActiveXControl_GetMax(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpinButtonActiveXControl_SetMax(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SpinButtonActiveXControl_GetPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpinButtonActiveXControl_SetPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SpinButtonActiveXControl_GetSmallChange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpinButtonActiveXControl_SetSmallChange(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SpinButtonActiveXControl_GetOrientation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpinButtonActiveXControl_SetOrientation(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* SpinButtonActiveXControl_IsEnabled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpinButtonActiveXControl_SetIsEnabled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SpinButtonActiveXControl_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpinButtonActiveXControl_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SpinButtonActiveXControl_IsTransparent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpinButtonActiveXControl_SetIsTransparent(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* SpinButtonActiveXControl_GetIMEMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpinButtonActiveXControl_SetIMEMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* SpinButtonActiveXControl_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SpinButtonActiveXControl_GetTextAlign(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpinButtonActiveXControl_SetTextAlign(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* SpinButtonActiveXControl_GetData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* SpinButtonActiveXControl_IsAutoSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpinButtonActiveXControl_SetIsAutoSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* SpinButtonActiveXControl_GetWorkbook(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SpinButtonActiveXControl_GetMouseIcon(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpinButtonActiveXControl_SetMouseIcon(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_int_value* SpinButtonActiveXControl_GetMousePointer(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpinButtonActiveXControl_SetMousePointer(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* SpinButtonActiveXControl_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpinButtonActiveXControl_SetLinkedCell(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* SpinButtonActiveXControl_GetListFillRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpinButtonActiveXControl_SetListFillRange(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_double_value* SpinButtonActiveXControl_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpinButtonActiveXControl_SetWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* SpinButtonActiveXControl_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpinButtonActiveXControl_SetHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* SpinButtonActiveXControl_GetForeOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpinButtonActiveXControl_SetForeOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SpinButtonActiveXControl_GetBackOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpinButtonActiveXControl_SetBackOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* SpinButtonActiveXControl_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpinButtonActiveXControl_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SpinButtonActiveXControl_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SpinButtonActiveXControl_SetShadow(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_SpinButtonActiveXControl( void* instance_ptr);

   /**************Class TextBoxActiveXControl *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_TextBoxActiveXControl(void* src);

   ASPOSE_CELLS_API c_return_bool_value* TextBoxActiveXControl_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TextBoxActiveXControl_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TextBoxActiveXControl_GetBorderStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetBorderStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBoxActiveXControl_GetBorderOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetBorderOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBoxActiveXControl_GetSpecialEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetSpecialEffect(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBoxActiveXControl_GetMaxLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetMaxLength(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBoxActiveXControl_GetScrollBars(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetScrollBars(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_char_value* TextBoxActiveXControl_GetPasswordChar(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetPasswordChar(void* instance_ptr, char value);
   ASPOSE_CELLS_API c_return_bool_value* TextBoxActiveXControl_IsEditable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetIsEditable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextBoxActiveXControl_GetIntegralHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetIntegralHeight(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextBoxActiveXControl_IsDragBehaviorEnabled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetIsDragBehaviorEnabled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextBoxActiveXControl_GetEnterKeyBehavior(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetEnterKeyBehavior(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextBoxActiveXControl_GetEnterFieldBehavior(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetEnterFieldBehavior(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextBoxActiveXControl_GetTabKeyBehavior(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetTabKeyBehavior(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextBoxActiveXControl_GetHideSelection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetHideSelection(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextBoxActiveXControl_IsAutoTab(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetIsAutoTab(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextBoxActiveXControl_IsMultiLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetIsMultiLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextBoxActiveXControl_IsWordWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetIsWordWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* TextBoxActiveXControl_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* TextBoxActiveXControl_GetDropButtonStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetDropButtonStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBoxActiveXControl_GetShowDropButtonTypeWhen(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetShowDropButtonTypeWhen(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* TextBoxActiveXControl_IsAutoWordSelected(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetIsAutoWordSelected(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextBoxActiveXControl_IsEnabled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetIsEnabled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextBoxActiveXControl_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextBoxActiveXControl_IsTransparent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetIsTransparent(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* TextBoxActiveXControl_GetIMEMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetIMEMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* TextBoxActiveXControl_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TextBoxActiveXControl_GetTextAlign(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetTextAlign(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* TextBoxActiveXControl_GetData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* TextBoxActiveXControl_IsAutoSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetIsAutoSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* TextBoxActiveXControl_GetWorkbook(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextBoxActiveXControl_GetMouseIcon(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetMouseIcon(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_int_value* TextBoxActiveXControl_GetMousePointer(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetMousePointer(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* TextBoxActiveXControl_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetLinkedCell(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* TextBoxActiveXControl_GetListFillRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetListFillRange(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_double_value* TextBoxActiveXControl_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* TextBoxActiveXControl_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* TextBoxActiveXControl_GetForeOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetForeOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBoxActiveXControl_GetBackOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetBackOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* TextBoxActiveXControl_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextBoxActiveXControl_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxActiveXControl_SetShadow(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_TextBoxActiveXControl( void* instance_ptr);

   /**************Class ToggleButtonActiveXControl *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ToggleButtonActiveXControl(void* src);

   ASPOSE_CELLS_API c_return_bool_value* ToggleButtonActiveXControl_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ToggleButtonActiveXControl_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ToggleButtonActiveXControl_GetCaption(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetCaption(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* ToggleButtonActiveXControl_GetPicturePosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetPicturePosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ToggleButtonActiveXControl_GetSpecialEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetSpecialEffect(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ToggleButtonActiveXControl_GetPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetPicture(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_char_value* ToggleButtonActiveXControl_GetAccelerator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetAccelerator(void* instance_ptr, char value);
   ASPOSE_CELLS_API c_return_int_value* ToggleButtonActiveXControl_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetValue(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ToggleButtonActiveXControl_IsTripleState(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetIsTripleState(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ToggleButtonActiveXControl_IsEnabled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetIsEnabled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ToggleButtonActiveXControl_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ToggleButtonActiveXControl_IsTransparent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetIsTransparent(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ToggleButtonActiveXControl_GetIMEMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetIMEMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ToggleButtonActiveXControl_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ToggleButtonActiveXControl_GetTextAlign(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetTextAlign(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ToggleButtonActiveXControl_GetData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ToggleButtonActiveXControl_IsAutoSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetIsAutoSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ToggleButtonActiveXControl_GetWorkbook(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ToggleButtonActiveXControl_GetMouseIcon(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetMouseIcon(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_int_value* ToggleButtonActiveXControl_GetMousePointer(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetMousePointer(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* ToggleButtonActiveXControl_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetLinkedCell(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ToggleButtonActiveXControl_GetListFillRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetListFillRange(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_double_value* ToggleButtonActiveXControl_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ToggleButtonActiveXControl_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ToggleButtonActiveXControl_GetForeOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetForeOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ToggleButtonActiveXControl_GetBackOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetBackOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ToggleButtonActiveXControl_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ToggleButtonActiveXControl_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ToggleButtonActiveXControl_SetShadow(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_ToggleButtonActiveXControl( void* instance_ptr);

   /**************Class UnknownControl *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_UnknownControl(void* src);

   ASPOSE_CELLS_API c_return_bool_value* UnknownControl_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* UnknownControl_GetRelationshipData(void* instance_ptr, char* relid);
   ASPOSE_CELLS_API c_return_ptr_value* UnknownControl_GetData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* UnknownControl_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* UnknownControl_IsEnabled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnknownControl_SetIsEnabled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* UnknownControl_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnknownControl_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* UnknownControl_IsTransparent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnknownControl_SetIsTransparent(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* UnknownControl_GetIMEMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnknownControl_SetIMEMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* UnknownControl_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* UnknownControl_GetTextAlign(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnknownControl_SetTextAlign(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* UnknownControl_IsAutoSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnknownControl_SetIsAutoSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* UnknownControl_GetWorkbook(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* UnknownControl_GetMouseIcon(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnknownControl_SetMouseIcon(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_int_value* UnknownControl_GetMousePointer(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnknownControl_SetMousePointer(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* UnknownControl_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnknownControl_SetLinkedCell(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* UnknownControl_GetListFillRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnknownControl_SetListFillRange(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_double_value* UnknownControl_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnknownControl_SetWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* UnknownControl_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnknownControl_SetHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* UnknownControl_GetForeOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnknownControl_SetForeOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* UnknownControl_GetBackOleColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnknownControl_SetBackOleColor(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* UnknownControl_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnknownControl_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* UnknownControl_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* UnknownControl_SetShadow(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_UnknownControl( void* instance_ptr);

   /**************Class ArcShape *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ArcShape(void* src);

   ASPOSE_CELLS_API c_return_bool_value* ArcShape_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ArcShape_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* ArcShape_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ArcShape_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* ArcShape_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ArcShape_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ArcShape_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* ArcShape_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ArcShape_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ArcShape_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ArcShape_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* ArcShape_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ArcShape_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ArcShape_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ArcShape_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ArcShape_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ArcShape_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ArcShape_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ArcShape_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ArcShape_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ArcShape_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ArcShape_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ArcShape_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ArcShape_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ArcShape_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ArcShape_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ArcShape_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ArcShape_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ArcShape_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ArcShape_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ArcShape_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ArcShape_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* ArcShape_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* ArcShape_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ArcShape_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ArcShape_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* ArcShape_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ArcShape_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* ArcShape_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ArcShape_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ArcShape_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ArcShape_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* ArcShape_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ArcShape_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ArcShape_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ArcShape_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_ArcShape( void* instance_ptr);

   /**************Class Area *****************/


   ASPOSE_CELLS_API c_return_bool_value* Area_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Area_GetBackgroundColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Area_SetBackgroundColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Area_GetForegroundColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Area_SetForegroundColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* Area_GetFormatting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Area_SetFormatting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Area_GetInvertIfNegative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Area_SetInvertIfNegative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Area_GetFillFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Area_GetTransparency(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Area_SetTransparency(void* instance_ptr, double value);


   ASPOSE_CELLS_API void Delete_Area( void* instance_ptr);

   /**************Class AutomaticFill *****************/


   ASPOSE_CELLS_API c_return_bool_value* AutomaticFill_IsNull(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_AutomaticFill( void* instance_ptr);

   /**************Class BaseShapeGuide *****************/


   ASPOSE_CELLS_API c_return_bool_value* BaseShapeGuide_IsNull(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_BaseShapeGuide( void* instance_ptr);

   /**************Class Bevel *****************/


   ASPOSE_CELLS_API c_return_bool_value* Bevel_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Bevel_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Bevel_SetWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Bevel_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Bevel_SetHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Bevel_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Bevel_SetType(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_Bevel( void* instance_ptr);

   /**************Class Button *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_Button(void* src);

   ASPOSE_CELLS_API c_return_bool_value* Button_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Button_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Button_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Button_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* Button_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* Button_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Button_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Button_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Button_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Button_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Button_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Button_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* Button_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* Button_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* Button_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* Button_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* Button_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* Button_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Button_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Button_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Button_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Button_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Button_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Button_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Button_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Button_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Button_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Button_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Button_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Button_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Button_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Button_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Button_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Button_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Button_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Button_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Button_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Button_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Button_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Button_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Button_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Button_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* Button_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* Button_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* Button_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* Button_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Button_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Button_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Button_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* Button_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Button_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Button_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Button_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Button_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Button_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Button_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Button_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* Button_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* Button_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Button_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Button_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Button_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* Button_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* Button_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Button_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Button_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Button_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_Button( void* instance_ptr);

   /**************Class CellsDrawing *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_CellsDrawing(void* src);

   ASPOSE_CELLS_API c_return_bool_value* CellsDrawing_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* CellsDrawing_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* CellsDrawing_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CellsDrawing_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* CellsDrawing_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* CellsDrawing_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* CellsDrawing_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* CellsDrawing_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CellsDrawing_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CellsDrawing_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CellsDrawing_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* CellsDrawing_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* CellsDrawing_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CellsDrawing_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CellsDrawing_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CellsDrawing_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CellsDrawing_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CellsDrawing_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* CellsDrawing_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CellsDrawing_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CellsDrawing_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* CellsDrawing_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CellsDrawing_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CellsDrawing_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* CellsDrawing_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CellsDrawing_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* CellsDrawing_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CellsDrawing_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CellsDrawing_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CellsDrawing_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CellsDrawing_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CellsDrawing_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* CellsDrawing_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* CellsDrawing_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* CellsDrawing_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* CellsDrawing_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* CellsDrawing_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* CellsDrawing_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* CellsDrawing_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* CellsDrawing_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* CellsDrawing_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CellsDrawing_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* CellsDrawing_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellsDrawing_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CellsDrawing_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CellsDrawing_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_CellsDrawing( void* instance_ptr);

   /**************Class ChartShape *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ChartShape(void* src);

   ASPOSE_CELLS_API c_return_bool_value* ChartShape_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetChart(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ChartShape_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* ChartShape_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ChartShape_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* ChartShape_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ChartShape_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ChartShape_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* ChartShape_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ChartShape_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ChartShape_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ChartShape_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* ChartShape_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ChartShape_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ChartShape_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ChartShape_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ChartShape_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ChartShape_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ChartShape_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ChartShape_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ChartShape_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ChartShape_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ChartShape_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ChartShape_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ChartShape_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ChartShape_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ChartShape_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ChartShape_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ChartShape_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ChartShape_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ChartShape_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ChartShape_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ChartShape_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* ChartShape_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* ChartShape_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ChartShape_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ChartShape_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* ChartShape_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ChartShape_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* ChartShape_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ChartShape_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ChartShape_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartShape_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* ChartShape_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartShape_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartShape_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ChartShape_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_ChartShape( void* instance_ptr);

   /**************Class CheckBox *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_CheckBox(void* src);

   ASPOSE_CELLS_API c_return_bool_value* CheckBox_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CheckBox_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetValue(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetCheckedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetCheckedValue(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* CheckBox_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetShadow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* CheckBox_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* CheckBox_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CheckBox_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* CheckBox_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* CheckBox_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* CheckBox_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* CheckBox_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CheckBox_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CheckBox_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CheckBox_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* CheckBox_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* CheckBox_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CheckBox_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CheckBox_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CheckBox_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CheckBox_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CheckBox_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* CheckBox_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CheckBox_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CheckBox_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* CheckBox_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CheckBox_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CheckBox_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* CheckBox_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CheckBox_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* CheckBox_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CheckBox_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CheckBox_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CheckBox_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CheckBox_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CheckBox_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* CheckBox_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* CheckBox_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* CheckBox_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* CheckBox_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* CheckBox_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* CheckBox_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* CheckBox_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* CheckBox_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* CheckBox_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CheckBox_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* CheckBox_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CheckBox_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBox_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CheckBox_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_CheckBox( void* instance_ptr);

   /**************Class CheckBoxCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* CheckBoxCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CheckBoxCollection_Add(void* instance_ptr, int upperleftrow, int upperleftcolumn, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* CheckBoxCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* CheckBoxCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_CheckBoxCollection( void* instance_ptr);

   /**************Class ColorHelper *****************/


   ASPOSE_CELLS_API c_return_bool_value* ColorHelper_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ColorHelper_FromOleColor(int olecolor);
   ASPOSE_CELLS_API c_return_int_value* ColorHelper_ToOleColor(void* color, void* workbook);


   ASPOSE_CELLS_API void Delete_ColorHelper( void* instance_ptr);

   /**************Class ComboBox *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ComboBox(void* src);

   ASPOSE_CELLS_API c_return_bool_value* ComboBox_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetSelectedIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetSelectedIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* ComboBox_GetSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetSelectedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ComboBox_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetShadow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetDropDownLines(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetDropDownLines(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* ComboBox_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* ComboBox_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ComboBox_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* ComboBox_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ComboBox_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ComboBox_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* ComboBox_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ComboBox_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ComboBox_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ComboBox_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* ComboBox_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ComboBox_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ComboBox_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ComboBox_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ComboBox_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ComboBox_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ComboBox_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ComboBox_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ComboBox_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ComboBox_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ComboBox_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ComboBox_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ComboBox_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ComboBox_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ComboBox_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ComboBox_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ComboBox_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ComboBox_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ComboBox_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ComboBox_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ComboBox_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* ComboBox_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* ComboBox_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ComboBox_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ComboBox_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* ComboBox_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ComboBox_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* ComboBox_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ComboBox_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ComboBox_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ComboBox_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* ComboBox_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ComboBox_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ComboBox_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ComboBox_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_ComboBox( void* instance_ptr);

   /**************Class CommentShape *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_CommentShape(void* src);

   ASPOSE_CELLS_API c_return_bool_value* CommentShape_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetComment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* CommentShape_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* CommentShape_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CommentShape_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* CommentShape_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* CommentShape_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* CommentShape_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* CommentShape_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CommentShape_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CommentShape_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CommentShape_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* CommentShape_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* CommentShape_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CommentShape_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CommentShape_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CommentShape_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CommentShape_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CommentShape_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* CommentShape_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CommentShape_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CommentShape_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* CommentShape_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CommentShape_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CommentShape_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* CommentShape_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CommentShape_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* CommentShape_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CommentShape_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CommentShape_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CommentShape_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CommentShape_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CommentShape_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* CommentShape_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* CommentShape_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* CommentShape_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* CommentShape_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* CommentShape_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* CommentShape_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* CommentShape_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* CommentShape_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* CommentShape_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CommentShape_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* CommentShape_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CommentShape_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CommentShape_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CommentShape_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_CommentShape( void* instance_ptr);

   /**************Class CustomGeometry *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_CustomGeometry(void* src);

   ASPOSE_CELLS_API c_return_bool_value* CustomGeometry_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomGeometry_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomGeometry_GetShapeAdjustValues(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_CustomGeometry( void* instance_ptr);

   /**************Class CustomXmlShape *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_CustomXmlShape(void* src);

   ASPOSE_CELLS_API c_return_bool_value* CustomXmlShape_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* CustomXmlShape_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* CustomXmlShape_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CustomXmlShape_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* CustomXmlShape_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* CustomXmlShape_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* CustomXmlShape_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* CustomXmlShape_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CustomXmlShape_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CustomXmlShape_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CustomXmlShape_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* CustomXmlShape_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* CustomXmlShape_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CustomXmlShape_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CustomXmlShape_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CustomXmlShape_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CustomXmlShape_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CustomXmlShape_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* CustomXmlShape_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CustomXmlShape_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CustomXmlShape_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* CustomXmlShape_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CustomXmlShape_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CustomXmlShape_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* CustomXmlShape_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CustomXmlShape_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* CustomXmlShape_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* CustomXmlShape_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CustomXmlShape_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CustomXmlShape_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CustomXmlShape_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* CustomXmlShape_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* CustomXmlShape_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* CustomXmlShape_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* CustomXmlShape_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* CustomXmlShape_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* CustomXmlShape_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* CustomXmlShape_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* CustomXmlShape_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* CustomXmlShape_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* CustomXmlShape_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlShape_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* CustomXmlShape_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlShape_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlShape_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CustomXmlShape_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_CustomXmlShape( void* instance_ptr);

   /**************Class Dialog_Box *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_Dialog_Box(void* src);

   ASPOSE_CELLS_API c_return_bool_value* Dialog_Box_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Dialog_Box_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Dialog_Box_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Dialog_Box_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* Dialog_Box_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Dialog_Box_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Dialog_Box_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Dialog_Box_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Dialog_Box_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Dialog_Box_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Dialog_Box_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* Dialog_Box_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Dialog_Box_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Dialog_Box_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Dialog_Box_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Dialog_Box_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Dialog_Box_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Dialog_Box_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Dialog_Box_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Dialog_Box_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Dialog_Box_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Dialog_Box_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Dialog_Box_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Dialog_Box_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Dialog_Box_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Dialog_Box_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Dialog_Box_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Dialog_Box_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Dialog_Box_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Dialog_Box_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Dialog_Box_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Dialog_Box_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* Dialog_Box_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* Dialog_Box_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Dialog_Box_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Dialog_Box_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* Dialog_Box_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Dialog_Box_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Dialog_Box_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Dialog_Box_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Dialog_Box_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Dialog_Box_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* Dialog_Box_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Dialog_Box_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Dialog_Box_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Dialog_Box_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_Dialog_Box( void* instance_ptr);

   /**************Class FillFormat *****************/


   ASPOSE_CELLS_API c_return_bool_value* FillFormat_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* FillFormat_GetFillType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FillFormat_SetFillType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* FillFormat_GetTransparency(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FillFormat_SetTransparency(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* FillFormat_GetGradientFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* FillFormat_GetTextureFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* FillFormat_GetSolidFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* FillFormat_GetPatternFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* FillFormat_GetGradientColorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* FillFormat_GetGradientStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* FillFormat_GetGradientColor1(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* FillFormat_GetGradientColor2(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* FillFormat_GetGradientDegree(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* FillFormat_GetGradientVariant(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* FillFormat_GetPresetColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FillFormat_SetOneColorGradient(void* instance_ptr, void* color, double degree, int style, int variant);
   ASPOSE_CELLS_API c_return_void_value* FillFormat_SetTwoColorGradient_Color_Color_GradientStyleType_Integer(void* instance_ptr, void* color1, void* color2, int style, int variant);
   ASPOSE_CELLS_API c_return_void_value* FillFormat_SetTwoColorGradient_Color_Double_Color_Double_GradientStyleType_Integer(void* instance_ptr, void* color1, double transparency1, void* color2, double transparency2, int style, int variant);
   ASPOSE_CELLS_API c_return_void_value* FillFormat_SetPresetColorGradient(void* instance_ptr, int presetcolor, int style, int variant);
   ASPOSE_CELLS_API c_return_int_value* FillFormat_GetTexture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FillFormat_SetTexture(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* FillFormat_GetPattern(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FillFormat_SetPattern(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* FillFormat_GetPictureFormatType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FillFormat_SetPictureFormatType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* FillFormat_GetScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FillFormat_SetScale(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* FillFormat_GetImageData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FillFormat_SetImageData(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_bool_value* FillFormat_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* FillFormat_GetHashCode(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_FillFormat( void* instance_ptr);

   /**************Class Format3D *****************/


   ASPOSE_CELLS_API c_return_bool_value* Format3D_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Format3D_GetTopBevel(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Format3D_HasTopBevelData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Format3D_GetSurfaceMaterialType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Format3D_SetSurfaceMaterialType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Format3D_GetSurfaceLightingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Format3D_SetSurfaceLightingType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Format3D_GetLightingAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Format3D_SetLightingAngle(void* instance_ptr, double value);


   ASPOSE_CELLS_API void Delete_Format3D( void* instance_ptr);

   /**************Class Geometry *****************/


   ASPOSE_CELLS_API c_return_bool_value* Geometry_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Geometry_GetShapeAdjustValues(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_Geometry( void* instance_ptr);

   /**************Class GlowEffect *****************/


   ASPOSE_CELLS_API c_return_bool_value* GlowEffect_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GlowEffect_GetColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GlowEffect_SetColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_double_value* GlowEffect_GetSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GlowEffect_SetSize(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* GlowEffect_GetTransparency(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GlowEffect_SetTransparency(void* instance_ptr, double value);


   ASPOSE_CELLS_API void Delete_GlowEffect( void* instance_ptr);

   /**************Class GradientFill *****************/


   ASPOSE_CELLS_API c_return_bool_value* GradientFill_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GradientFill_GetGradientStops(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GradientFill_SetGradient(void* instance_ptr, int type_, double angle, int direction);
   ASPOSE_CELLS_API c_return_int_value* GradientFill_GetFillType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* GradientFill_GetDirectionType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_float_value* GradientFill_GetAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GradientFill_SetAngle(void* instance_ptr, float value);
   ASPOSE_CELLS_API c_return_void_value* GradientFill_SetPresetThemeGradient(void* instance_ptr, int gradienttype, int themecolortype);
   ASPOSE_CELLS_API c_return_void_value* GradientFill_SetOneColorGradient(void* instance_ptr, void* color, double degree, int style, int variant);
   ASPOSE_CELLS_API c_return_void_value* GradientFill_SetTwoColorGradient_Color_Color_GradientStyleType_Integer(void* instance_ptr, void* color1, void* color2, int style, int variant);
   ASPOSE_CELLS_API c_return_void_value* GradientFill_SetTwoColorGradient_Color_Double_Color_Double_GradientStyleType_Integer(void* instance_ptr, void* color1, double transparency1, void* color2, double transparency2, int style, int variant);


   ASPOSE_CELLS_API void Delete_GradientFill( void* instance_ptr);

   /**************Class GradientStop *****************/


   ASPOSE_CELLS_API c_return_bool_value* GradientStop_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* GradientStop_GetPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GradientStop_SetPosition(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* GradientStop_GetCellsColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* GradientStop_GetTransparency(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GradientStop_SetTransparency(void* instance_ptr, double value);


   ASPOSE_CELLS_API void Delete_GradientStop( void* instance_ptr);

   /**************Class GradientStopCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* GradientStopCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GradientStopCollection_Add_Double_CellsColor_Integer(void* instance_ptr, double position, void* color, int alpha);
   ASPOSE_CELLS_API c_return_void_value* GradientStopCollection_Add_Double_Color_Integer(void* instance_ptr, double position, void* color, int alpha);
   ASPOSE_CELLS_API c_return_ptr_value* GradientStopCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* GradientStopCollection_Set(void* instance_ptr, void* value, int index);
   ASPOSE_CELLS_API c_return_int_value* GradientStopCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_GradientStopCollection( void* instance_ptr);

   /**************Class GroupBox *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_GroupBox(void* src);

   ASPOSE_CELLS_API c_return_bool_value* GroupBox_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* GroupBox_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetShadow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* GroupBox_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* GroupBox_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* GroupBox_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* GroupBox_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* GroupBox_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* GroupBox_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* GroupBox_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* GroupBox_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* GroupBox_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* GroupBox_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* GroupBox_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* GroupBox_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* GroupBox_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* GroupBox_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* GroupBox_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* GroupBox_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* GroupBox_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* GroupBox_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* GroupBox_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* GroupBox_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* GroupBox_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* GroupBox_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* GroupBox_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* GroupBox_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* GroupBox_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* GroupBox_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* GroupBox_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* GroupBox_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* GroupBox_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* GroupBox_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* GroupBox_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* GroupBox_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* GroupBox_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* GroupBox_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* GroupBox_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* GroupBox_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* GroupBox_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* GroupBox_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* GroupBox_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* GroupBox_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupBox_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* GroupBox_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupBox_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupBox_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* GroupBox_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_GroupBox( void* instance_ptr);

   /**************Class GroupFill *****************/


   ASPOSE_CELLS_API c_return_bool_value* GroupFill_IsNull(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_GroupFill( void* instance_ptr);

   /**************Class GroupShape *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_GroupShape(void* src);

   ASPOSE_CELLS_API c_return_bool_value* GroupShape_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_Ungroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetGroupedShapes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* GroupShape_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* GroupShape_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* GroupShape_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* GroupShape_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* GroupShape_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* GroupShape_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* GroupShape_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* GroupShape_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* GroupShape_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* GroupShape_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* GroupShape_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* GroupShape_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* GroupShape_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* GroupShape_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* GroupShape_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* GroupShape_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* GroupShape_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* GroupShape_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* GroupShape_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* GroupShape_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* GroupShape_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* GroupShape_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* GroupShape_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* GroupShape_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* GroupShape_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* GroupShape_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* GroupShape_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* GroupShape_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* GroupShape_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* GroupShape_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* GroupShape_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* GroupShape_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* GroupShape_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* GroupShape_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* GroupShape_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* GroupShape_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* GroupShape_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* GroupShape_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* GroupShape_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* GroupShape_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* GroupShape_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* GroupShape_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* GroupShape_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* GroupShape_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* GroupShape_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_GroupShape( void* instance_ptr);

   /**************Class Label *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_Label(void* src);

   ASPOSE_CELLS_API c_return_bool_value* Label_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Label_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Label_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Label_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* Label_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* Label_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Label_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Label_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Label_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Label_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Label_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Label_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* Label_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* Label_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* Label_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* Label_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* Label_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* Label_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Label_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Label_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Label_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Label_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Label_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Label_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Label_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Label_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Label_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Label_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Label_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Label_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Label_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Label_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Label_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Label_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Label_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Label_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Label_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Label_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Label_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Label_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Label_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Label_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* Label_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* Label_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* Label_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* Label_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Label_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Label_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Label_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* Label_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Label_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Label_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Label_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Label_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Label_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Label_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Label_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* Label_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* Label_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Label_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Label_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Label_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* Label_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* Label_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Label_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Label_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Label_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_Label( void* instance_ptr);

   /**************Class Line *****************/


   ASPOSE_CELLS_API c_return_bool_value* Line_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Line_GetCompoundType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Line_SetCompoundType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Line_GetDashType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Line_SetDashType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Line_GetCapType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Line_SetCapType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Line_GetJoinType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Line_SetJoinType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Line_GetBeginType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Line_SetBeginType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Line_GetEndType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Line_SetEndType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Line_GetBeginArrowLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Line_SetBeginArrowLength(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Line_GetEndArrowLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Line_SetEndArrowLength(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Line_GetBeginArrowWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Line_SetBeginArrowWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Line_GetEndArrowWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Line_SetEndArrowWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Line_GetThemeColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Line_SetThemeColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Line_GetColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Line_SetColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_double_value* Line_GetTransparency(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Line_SetTransparency(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Line_GetStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Line_SetStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Line_GetWeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Line_SetWeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Line_GetWeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Line_SetWeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Line_GetWeightPx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Line_SetWeightPx(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Line_GetFormattingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Line_SetFormattingType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Line_IsAutomaticColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Line_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Line_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Line_IsAuto(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Line_SetIsAuto(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Line_GetGradientFill(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_Line( void* instance_ptr);

   /**************Class LineFormat *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_LineFormat(void* src);

   ASPOSE_CELLS_API c_return_bool_value* LineFormat_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* LineFormat_GetHashCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* LineFormat_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* LineFormat_GetCompoundType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineFormat_SetCompoundType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineFormat_GetDashStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineFormat_SetDashStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineFormat_GetCapType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineFormat_SetCapType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineFormat_GetJoinType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineFormat_SetJoinType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineFormat_GetBeginArrowheadStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineFormat_SetBeginArrowheadStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineFormat_GetBeginArrowheadWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineFormat_SetBeginArrowheadWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineFormat_GetBeginArrowheadLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineFormat_SetBeginArrowheadLength(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineFormat_GetEndArrowheadStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineFormat_SetEndArrowheadStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineFormat_GetEndArrowheadWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineFormat_SetEndArrowheadWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineFormat_GetEndArrowheadLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineFormat_SetEndArrowheadLength(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* LineFormat_GetWeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineFormat_SetWeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* LineFormat_GetFillType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineFormat_SetFillType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* LineFormat_GetTransparency(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineFormat_SetTransparency(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* LineFormat_GetGradientFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LineFormat_GetTextureFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LineFormat_GetSolidFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LineFormat_GetPatternFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* LineFormat_GetGradientColorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* LineFormat_GetGradientStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LineFormat_GetGradientColor1(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LineFormat_GetGradientColor2(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* LineFormat_GetGradientDegree(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* LineFormat_GetGradientVariant(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* LineFormat_GetPresetColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineFormat_SetOneColorGradient(void* instance_ptr, void* color, double degree, int style, int variant);
   ASPOSE_CELLS_API c_return_void_value* LineFormat_SetTwoColorGradient_Color_Color_GradientStyleType_Integer(void* instance_ptr, void* color1, void* color2, int style, int variant);
   ASPOSE_CELLS_API c_return_void_value* LineFormat_SetTwoColorGradient_Color_Double_Color_Double_GradientStyleType_Integer(void* instance_ptr, void* color1, double transparency1, void* color2, double transparency2, int style, int variant);
   ASPOSE_CELLS_API c_return_void_value* LineFormat_SetPresetColorGradient(void* instance_ptr, int presetcolor, int style, int variant);
   ASPOSE_CELLS_API c_return_int_value* LineFormat_GetTexture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineFormat_SetTexture(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineFormat_GetPattern(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineFormat_SetPattern(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineFormat_GetPictureFormatType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineFormat_SetPictureFormatType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* LineFormat_GetScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineFormat_SetScale(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* LineFormat_GetImageData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineFormat_SetImageData(void* instance_ptr, void* value, int value_length);


   ASPOSE_CELLS_API void Delete_LineFormat( void* instance_ptr);

   /**************Class LineShape *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_LineShape(void* src);

   ASPOSE_CELLS_API c_return_bool_value* LineShape_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* LineShape_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* LineShape_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* LineShape_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* LineShape_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* LineShape_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* LineShape_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* LineShape_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* LineShape_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* LineShape_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* LineShape_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* LineShape_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* LineShape_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* LineShape_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* LineShape_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* LineShape_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* LineShape_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* LineShape_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* LineShape_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* LineShape_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* LineShape_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* LineShape_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* LineShape_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* LineShape_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* LineShape_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* LineShape_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* LineShape_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* LineShape_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* LineShape_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* LineShape_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* LineShape_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* LineShape_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* LineShape_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* LineShape_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* LineShape_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* LineShape_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* LineShape_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* LineShape_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* LineShape_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* LineShape_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* LineShape_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* LineShape_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* LineShape_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* LineShape_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* LineShape_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* LineShape_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* LineShape_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* LineShape_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LineShape_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LineShape_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* LineShape_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_LineShape( void* instance_ptr);

   /**************Class ListBox *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ListBox(void* src);

   ASPOSE_CELLS_API c_return_bool_value* ListBox_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetItemCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetSelectedIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetSelectedIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SelectedItem(void* instance_ptr, int itemindex, bool isselected);
   ASPOSE_CELLS_API c_return_bool_value* ListBox_IsSelected(void* instance_ptr, int itemindex);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetSelectedCells(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ListBox_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetShadow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetSelectionType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetSelectionType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetPageChange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetPageChange(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* ListBox_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* ListBox_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ListBox_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* ListBox_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ListBox_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ListBox_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* ListBox_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ListBox_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ListBox_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ListBox_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* ListBox_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* ListBox_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* ListBox_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ListBox_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ListBox_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ListBox_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ListBox_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ListBox_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ListBox_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ListBox_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ListBox_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ListBox_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ListBox_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ListBox_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ListBox_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ListBox_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ListBox_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ListBox_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ListBox_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ListBox_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ListBox_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ListBox_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ListBox_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* ListBox_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* ListBox_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* ListBox_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ListBox_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ListBox_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* ListBox_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* ListBox_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ListBox_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* ListBox_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ListBox_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* ListBox_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ListBox_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ListBox_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* ListBox_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListBox_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListBox_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ListBox_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_ListBox( void* instance_ptr);

   /**************Class MsoFillFormat *****************/


   ASPOSE_CELLS_API c_return_bool_value* MsoFillFormat_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* MsoFillFormat_GetForeColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFillFormat_SetForeColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_double_value* MsoFillFormat_GetTransparency(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFillFormat_SetTransparency(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* MsoFillFormat_GetBackColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFillFormat_SetBackColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* MsoFillFormat_GetImageData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFillFormat_SetImageData(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_void_value* MsoFillFormat_SetOneColorGradient(void* instance_ptr, void* color, double degree, int style, int variant);
   ASPOSE_CELLS_API c_return_int_value* MsoFillFormat_GetTexture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* MsoFillFormat_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFillFormat_SetIsVisible(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_MsoFillFormat( void* instance_ptr);

   /**************Class MsoFillFormatHelper *****************/


   ASPOSE_CELLS_API c_return_bool_value* MsoFillFormatHelper_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* MsoFillFormatHelper_GetForeColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFillFormatHelper_SetForeColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_double_value* MsoFillFormatHelper_GetForeColorTransparency(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFillFormatHelper_SetForeColorTransparency(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* MsoFillFormatHelper_GetBackColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFillFormatHelper_SetBackColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* MsoFillFormatHelper_GetImageData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFillFormatHelper_SetImageData(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_void_value* MsoFillFormatHelper_SetOneColorGradient(void* instance_ptr, void* color, double degree, int style, int variant);
   ASPOSE_CELLS_API c_return_int_value* MsoFillFormatHelper_GetTexture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* MsoFillFormatHelper_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFillFormatHelper_SetIsVisible(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_MsoFillFormatHelper( void* instance_ptr);

   /**************Class MsoFormatPicture *****************/


   ASPOSE_CELLS_API c_return_bool_value* MsoFormatPicture_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* MsoFormatPicture_GetTopCropInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFormatPicture_SetTopCropInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* MsoFormatPicture_GetBottomCropInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFormatPicture_SetBottomCropInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* MsoFormatPicture_GetLeftCropInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFormatPicture_SetLeftCropInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* MsoFormatPicture_GetRightCropInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFormatPicture_SetRightCropInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* MsoFormatPicture_GetTopCrop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFormatPicture_SetTopCrop(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* MsoFormatPicture_GetBottomCrop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFormatPicture_SetBottomCrop(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* MsoFormatPicture_GetLeftCrop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFormatPicture_SetLeftCrop(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* MsoFormatPicture_GetRightCrop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFormatPicture_SetRightCrop(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* MsoFormatPicture_GetTransparency(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFormatPicture_SetTransparency(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* MsoFormatPicture_GetTransparentColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFormatPicture_SetTransparentColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_double_value* MsoFormatPicture_GetContrast(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFormatPicture_SetContrast(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* MsoFormatPicture_GetBrightness(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFormatPicture_SetBrightness(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* MsoFormatPicture_GetGamma(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFormatPicture_SetGamma(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_bool_value* MsoFormatPicture_IsBiLevel(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFormatPicture_SetIsBiLevel(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* MsoFormatPicture_IsGray(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoFormatPicture_SetIsGray(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* MsoFormatPicture_GetHashCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* MsoFormatPicture_Equals(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_MsoFormatPicture( void* instance_ptr);

   /**************Class MsoLineFormat *****************/


   ASPOSE_CELLS_API c_return_bool_value* MsoLineFormat_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* MsoLineFormat_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoLineFormat_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* MsoLineFormat_GetStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoLineFormat_SetStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* MsoLineFormat_GetForeColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoLineFormat_SetForeColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* MsoLineFormat_GetBackColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoLineFormat_SetBackColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* MsoLineFormat_GetDashStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoLineFormat_SetDashStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* MsoLineFormat_GetTransparency(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoLineFormat_SetTransparency(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* MsoLineFormat_GetWeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoLineFormat_SetWeight(void* instance_ptr, double value);


   ASPOSE_CELLS_API void Delete_MsoLineFormat( void* instance_ptr);

   /**************Class MsoLineFormatHelper *****************/


   ASPOSE_CELLS_API c_return_bool_value* MsoLineFormatHelper_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* MsoLineFormatHelper_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoLineFormatHelper_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* MsoLineFormatHelper_GetStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoLineFormatHelper_SetStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* MsoLineFormatHelper_GetForeColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoLineFormatHelper_SetForeColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* MsoLineFormatHelper_GetBackColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoLineFormatHelper_SetBackColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* MsoLineFormatHelper_GetDashStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoLineFormatHelper_SetDashStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* MsoLineFormatHelper_GetTransparency(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoLineFormatHelper_SetTransparency(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* MsoLineFormatHelper_GetWeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoLineFormatHelper_SetWeight(void* instance_ptr, double value);


   ASPOSE_CELLS_API void Delete_MsoLineFormatHelper( void* instance_ptr);

   /**************Class MsoTextFrame *****************/


   ASPOSE_CELLS_API c_return_bool_value* MsoTextFrame_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* MsoTextFrame_GetAutoSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoTextFrame_SetAutoSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* MsoTextFrame_IsAutoMargin(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoTextFrame_SetIsAutoMargin(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* MsoTextFrame_GetRotateTextWithShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoTextFrame_SetRotateTextWithShape(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_double_value* MsoTextFrame_GetLeftMarginPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoTextFrame_SetLeftMarginPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* MsoTextFrame_GetRightMarginPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoTextFrame_SetRightMarginPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* MsoTextFrame_GetTopMarginPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoTextFrame_SetTopMarginPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* MsoTextFrame_GetBottomMarginPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MsoTextFrame_SetBottomMarginPt(void* instance_ptr, double value);


   ASPOSE_CELLS_API void Delete_MsoTextFrame( void* instance_ptr);

   /**************Class NoneFill *****************/


   ASPOSE_CELLS_API c_return_bool_value* NoneFill_IsNull(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_NoneFill( void* instance_ptr);

   /**************Class OleObject *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_OleObject(void* src);

   ASPOSE_CELLS_API c_return_bool_value* OleObject_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetEmbeddedObject_Boolean_Stream_String_Boolean_String(void* instance_ptr, bool linktofile, void* objectdata, int objectdata_length, char* sourcefilename, bool displayasicon, char* label);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetEmbeddedObject_Boolean_Stream_String_Boolean_String_Boolean(void* instance_ptr, bool linktofile, void* objectdata, int objectdata_length, char* sourcefilename, bool displayasicon, char* label, bool updateicon);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_IsAutoSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetIsAutoSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_IsLink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_Set_IsLink(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_GetDisplayAsIcon(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetDisplayAsIcon(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetImageData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetImageData(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetObjectData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetObjectData(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetFullObjectBin(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* OleObject_GetImageSourceFullName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetImageSourceFullName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetNativeSourceFullName(void* instance_ptr, char* sourcefullname);
   ASPOSE_CELLS_API c_return_string_value* OleObject_GetProgID(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetProgID(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetFileFormatType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetFileFormatType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* OleObject_GetObjectSourceFullName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetObjectSourceFullName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* OleObject_GetLabel(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetLabel(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_GetAutoUpdate(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetAutoUpdate(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_GetAutoLoad(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetAutoLoad(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetClassIdentifier(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetClassIdentifier(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetImageType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* OleObject_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* OleObject_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* OleObject_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* OleObject_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* OleObject_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* OleObject_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* OleObject_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* OleObject_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* OleObject_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* OleObject_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* OleObject_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* OleObject_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* OleObject_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* OleObject_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* OleObject_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* OleObject_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* OleObject_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* OleObject_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* OleObject_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* OleObject_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* OleObject_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* OleObject_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* OleObject_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* OleObject_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* OleObject_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* OleObject_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* OleObject_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* OleObject_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OleObject_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObject_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* OleObject_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* OleObject_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_OleObject( void* instance_ptr);

   /**************Class OleObjectCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* OleObjectCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* OleObjectCollection_Add_Integer_Integer_Integer_Integer_Stream(void* instance_ptr, int upperleftrow, int upperleftcolumn, int height, int width, void* imagedata, int imagedata_length);
   ASPOSE_CELLS_API c_return_int_value* OleObjectCollection_Add_Integer_Integer_Integer_Integer_Stream_String(void* instance_ptr, int upperleftrow, int upperleftcolumn, int height, int width, void* imagedata, int imagedata_length, char* linkedfile);
   ASPOSE_CELLS_API c_return_ptr_value* OleObjectCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* OleObjectCollection_Clear(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OleObjectCollection_RemoveAt(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* OleObjectCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_OleObjectCollection( void* instance_ptr);

   /**************Class Oval *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_Oval(void* src);

   ASPOSE_CELLS_API c_return_bool_value* Oval_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Oval_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Oval_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Oval_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* Oval_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Oval_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Oval_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Oval_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Oval_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Oval_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Oval_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* Oval_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* Oval_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* Oval_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Oval_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Oval_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Oval_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Oval_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Oval_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Oval_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Oval_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Oval_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Oval_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Oval_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Oval_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Oval_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Oval_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Oval_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Oval_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Oval_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Oval_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Oval_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Oval_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Oval_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* Oval_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* Oval_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* Oval_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Oval_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Oval_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* Oval_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Oval_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Oval_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Oval_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Oval_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* Oval_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Oval_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Oval_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* Oval_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Oval_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Oval_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Oval_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_Oval( void* instance_ptr);

   /**************Class PatternFill *****************/


   ASPOSE_CELLS_API c_return_bool_value* PatternFill_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PatternFill_GetPattern(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PatternFill_SetPattern(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* PatternFill_GetBackgroundColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PatternFill_SetBackgroundColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* PatternFill_GetBackgroundCellsColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PatternFill_SetBackgroundCellsColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* PatternFill_GetForegroundColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PatternFill_SetForegroundColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* PatternFill_GetForegroundCellsColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PatternFill_SetForegroundCellsColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_double_value* PatternFill_GetForeTransparency(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PatternFill_SetForeTransparency(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* PatternFill_GetBackTransparency(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PatternFill_SetBackTransparency(void* instance_ptr, double value);


   ASPOSE_CELLS_API void Delete_PatternFill( void* instance_ptr);

   /**************Class PicFormatOption *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PicFormatOption();

   ASPOSE_CELLS_API c_return_bool_value* PicFormatOption_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PicFormatOption_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PicFormatOption_SetType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* PicFormatOption_GetScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PicFormatOption_SetScale(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* PicFormatOption_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PicFormatOption_SetLeft(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* PicFormatOption_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PicFormatOption_SetTop(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* PicFormatOption_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PicFormatOption_SetBottom(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* PicFormatOption_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PicFormatOption_SetRight(void* instance_ptr, double value);


   ASPOSE_CELLS_API void Delete_PicFormatOption( void* instance_ptr);

   /**************Class Picture *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_Picture(void* src);

   ASPOSE_CELLS_API c_return_bool_value* Picture_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_Copy(void* instance_ptr, void* source, void* options);
   ASPOSE_CELLS_API c_return_void_value* Picture_Move(void* instance_ptr, int upperleftrow, int upperleftcolumn);
   ASPOSE_CELLS_API c_return_void_value* Picture_PlaceInCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetOriginalHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetOriginalWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetBorderLineColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetBorderLineColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_double_value* Picture_GetBorderWeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetBorderWeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetData(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_string_value* Picture_GetSourceFullName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetSourceFullName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Picture_GetFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetFormula(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Picture_IsAutoSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetIsAutoSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Picture_IsLink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetIsLink(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Picture_IsDynamicDataExchange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetIsDynamicDataExchange(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Picture_GetDisplayAsIcon(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetDisplayAsIcon(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetImageType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Picture_GetOriginalHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Picture_GetOriginalWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Picture_GetOriginalHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Picture_GetOriginalWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetSignatureLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetSignatureLine(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* Picture_IsSameSetting(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_string_value* Picture_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Picture_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Picture_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* Picture_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Picture_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Picture_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Picture_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Picture_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Picture_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Picture_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* Picture_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* Picture_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* Picture_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Picture_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Picture_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Picture_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Picture_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Picture_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Picture_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Picture_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Picture_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Picture_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Picture_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Picture_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Picture_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Picture_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Picture_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Picture_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Picture_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Picture_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Picture_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Picture_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Picture_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* Picture_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* Picture_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* Picture_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Picture_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Picture_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* Picture_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Picture_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Picture_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Picture_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Picture_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* Picture_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Picture_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Picture_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* Picture_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Picture_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Picture_GetResultOfSmartArt(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_Picture( void* instance_ptr);

   /**************Class PictureCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* PictureCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PictureCollection_Add_Integer_Integer_Integer_Integer_Stream(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn, void* stream, int stream_length);
   ASPOSE_CELLS_API c_return_int_value* PictureCollection_Add_Integer_Integer_Integer_Integer_String(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn, char* filename);
   ASPOSE_CELLS_API c_return_int_value* PictureCollection_Add_Integer_Integer_Stream(void* instance_ptr, int upperleftrow, int upperleftcolumn, void* stream, int stream_length);
   ASPOSE_CELLS_API c_return_int_value* PictureCollection_Add_Integer_Integer_String(void* instance_ptr, int upperleftrow, int upperleftcolumn, char* filename);
   ASPOSE_CELLS_API c_return_int_value* PictureCollection_Add_Integer_Integer_Stream_Integer_Integer(void* instance_ptr, int upperleftrow, int upperleftcolumn, void* stream, int stream_length, int widthscale, int heightscale);
   ASPOSE_CELLS_API c_return_int_value* PictureCollection_Add_Integer_Integer_String_Integer_Integer(void* instance_ptr, int upperleftrow, int upperleftcolumn, char* filename, int widthscale, int heightscale);
   ASPOSE_CELLS_API c_return_ptr_value* PictureCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* PictureCollection_Clear(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PictureCollection_RemoveAt(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* PictureCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PictureCollection( void* instance_ptr);

   /**************Class RadioButton *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_RadioButton(void* src);

   ASPOSE_CELLS_API c_return_bool_value* RadioButton_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RadioButton_IsChecked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetIsChecked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetOptionIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RadioButton_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetShadow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetGroupBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* RadioButton_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* RadioButton_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RadioButton_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* RadioButton_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* RadioButton_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* RadioButton_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* RadioButton_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RadioButton_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* RadioButton_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* RadioButton_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* RadioButton_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* RadioButton_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RadioButton_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RadioButton_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RadioButton_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RadioButton_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* RadioButton_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* RadioButton_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* RadioButton_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* RadioButton_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* RadioButton_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* RadioButton_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* RadioButton_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* RadioButton_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* RadioButton_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* RadioButton_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* RadioButton_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RadioButton_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* RadioButton_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* RadioButton_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* RadioButton_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* RadioButton_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* RadioButton_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* RadioButton_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* RadioButton_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* RadioButton_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* RadioButton_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* RadioButton_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* RadioButton_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* RadioButton_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RadioButton_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* RadioButton_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RadioButton_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RadioButton_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RadioButton_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_RadioButton( void* instance_ptr);

   /**************Class RectangleShape *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_RectangleShape(void* src);

   ASPOSE_CELLS_API c_return_bool_value* RectangleShape_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* RectangleShape_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* RectangleShape_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RectangleShape_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* RectangleShape_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* RectangleShape_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* RectangleShape_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* RectangleShape_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RectangleShape_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* RectangleShape_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* RectangleShape_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* RectangleShape_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* RectangleShape_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RectangleShape_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RectangleShape_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RectangleShape_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RectangleShape_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* RectangleShape_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* RectangleShape_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* RectangleShape_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* RectangleShape_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* RectangleShape_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* RectangleShape_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* RectangleShape_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* RectangleShape_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* RectangleShape_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* RectangleShape_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* RectangleShape_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RectangleShape_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* RectangleShape_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* RectangleShape_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* RectangleShape_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* RectangleShape_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* RectangleShape_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* RectangleShape_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* RectangleShape_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* RectangleShape_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* RectangleShape_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* RectangleShape_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* RectangleShape_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* RectangleShape_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RectangleShape_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* RectangleShape_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RectangleShape_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RectangleShape_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RectangleShape_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_RectangleShape( void* instance_ptr);

   /**************Class ReflectionEffect *****************/


   ASPOSE_CELLS_API c_return_bool_value* ReflectionEffect_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ReflectionEffect_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ReflectionEffect_SetType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ReflectionEffect_GetTransparency(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ReflectionEffect_SetTransparency(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ReflectionEffect_GetSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ReflectionEffect_SetSize(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ReflectionEffect_GetBlur(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ReflectionEffect_SetBlur(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ReflectionEffect_GetDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ReflectionEffect_SetDirection(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ReflectionEffect_GetDistance(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ReflectionEffect_SetDistance(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ReflectionEffect_GetFadeDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ReflectionEffect_SetFadeDirection(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_bool_value* ReflectionEffect_GetRotWithShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ReflectionEffect_SetRotWithShape(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_ReflectionEffect( void* instance_ptr);

   /**************Class ScrollBar *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ScrollBar(void* src);

   ASPOSE_CELLS_API c_return_bool_value* ScrollBar_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetCurrentValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetCurrentValue(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetMin(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetMin(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetMax(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetMax(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetIncrementalChange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetIncrementalChange(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetPageChange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetPageChange(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBar_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetShadow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBar_IsHorizontal(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetIsHorizontal(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* ScrollBar_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBar_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBar_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* ScrollBar_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ScrollBar_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ScrollBar_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* ScrollBar_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBar_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBar_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBar_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* ScrollBar_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ScrollBar_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBar_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBar_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBar_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBar_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBar_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ScrollBar_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ScrollBar_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ScrollBar_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ScrollBar_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ScrollBar_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ScrollBar_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ScrollBar_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ScrollBar_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ScrollBar_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ScrollBar_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBar_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBar_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBar_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBar_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBar_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* ScrollBar_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ScrollBar_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ScrollBar_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* ScrollBar_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ScrollBar_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBar_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ScrollBar_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBar_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ScrollBar_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBar_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ScrollBar_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ScrollBar_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ScrollBar_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_ScrollBar( void* instance_ptr);

   /**************Class ShadowEffect *****************/


   ASPOSE_CELLS_API c_return_bool_value* ShadowEffect_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ShadowEffect_GetPresetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShadowEffect_SetPresetType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ShadowEffect_GetColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShadowEffect_SetColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_double_value* ShadowEffect_GetTransparency(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShadowEffect_SetTransparency(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ShadowEffect_GetSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShadowEffect_SetSize(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ShadowEffect_GetBlur(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShadowEffect_SetBlur(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ShadowEffect_GetAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShadowEffect_SetAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ShadowEffect_GetDistance(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShadowEffect_SetDistance(void* instance_ptr, double value);


   ASPOSE_CELLS_API void Delete_ShadowEffect( void* instance_ptr);

   /**************Class Shape *****************/


   ASPOSE_CELLS_API c_return_bool_value* Shape_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Shape_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Shape_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Shape_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* Shape_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Shape_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Shape_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Shape_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Shape_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Shape_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Shape_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* Shape_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* Shape_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* Shape_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Shape_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Shape_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Shape_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Shape_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Shape_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Shape_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Shape_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Shape_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Shape_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Shape_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Shape_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Shape_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Shape_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Shape_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Shape_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Shape_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Shape_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Shape_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Shape_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Shape_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* Shape_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* Shape_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* Shape_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Shape_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Shape_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* Shape_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Shape_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Shape_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Shape_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Shape_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* Shape_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Shape_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Shape_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* Shape_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Shape_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Shape_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Shape_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_Shape( void* instance_ptr);

   /**************Class ShapeCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ShapeCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_Get_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddCopy(void* instance_ptr, void* sourceshape, int toprow, int top, int leftcolumn, int left);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddCheckBox(void* instance_ptr, int upperleftrow, int top, int upperleftcolumn, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddTextBox(void* instance_ptr, int upperleftrow, int top, int upperleftcolumn, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddEquation(void* instance_ptr, int toprow, int top, int leftcolumn, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddSpinner(void* instance_ptr, int upperleftrow, int top, int upperleftcolumn, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddScrollBar(void* instance_ptr, int upperleftrow, int top, int upperleftcolumn, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddRadioButton(void* instance_ptr, int upperleftrow, int top, int upperleftcolumn, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddListBox(void* instance_ptr, int upperleftrow, int top, int upperleftcolumn, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddComboBox(void* instance_ptr, int upperleftrow, int top, int upperleftcolumn, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddGroupBox(void* instance_ptr, int upperleftrow, int top, int upperleftcolumn, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddButton(void* instance_ptr, int upperleftrow, int top, int upperleftcolumn, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddLabel(void* instance_ptr, int upperleftrow, int top, int upperleftcolumn, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddLabelInChart(void* instance_ptr, int top, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddTextBoxInChart(void* instance_ptr, int top, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddTextEffectInChart(void* instance_ptr, int effect, char* text, char* fontname, int size, bool fontbold, bool fontitalic, int top, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddTextEffect(void* instance_ptr, int effect, char* text, char* fontname, int size, bool fontbold, bool fontitalic, int upperleftrow, int top, int upperleftcolumn, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddWordArt(void* instance_ptr, int style, char* text, int upperleftrow, int top, int upperleftcolumn, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddRectangle(void* instance_ptr, int upperleftrow, int top, int upperleftcolumn, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddOval(void* instance_ptr, int upperleftrow, int top, int upperleftcolumn, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddLine(void* instance_ptr, int upperleftrow, int top, int upperleftcolumn, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddFreeFloatingShape(void* instance_ptr, int type_, int top, int left, int height, int width, void* imagedata, int imagedata_length, bool isoriginalsize);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddShapeInChart_MsoDrawingType_PlacementType_Integer_Integer_Integer_Integer_Stream(void* instance_ptr, int type_, int placement, int left, int top, int right, int bottom, void* imagedata, int imagedata_length);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddShapeInChart_MsoDrawingType_PlacementType_Integer_Integer_Integer_Integer(void* instance_ptr, int type_, int placement, int left, int top, int right, int bottom);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddShapeInChartByScale_MsoDrawingType_PlacementType_Double_Double_Double_Double(void* instance_ptr, int type_, int placement, double left, double top, double right, double bottom);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddShapeInChartByScale_MsoDrawingType_PlacementType_Double_Double_Double_Double_Stream(void* instance_ptr, int type_, int placement, double left, double top, double right, double bottom, void* imagedata, int imagedata_length);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddArc(void* instance_ptr, int upperleftrow, int top, int upperleftcolumn, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddShape(void* instance_ptr, int type_, int upperleftrow, int top, int upperleftcolumn, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddAutoShape(void* instance_ptr, int type_, int upperleftrow, int top, int upperleftcolumn, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddAutoShapeInChart(void* instance_ptr, int type_, int top, int left, int height, int width);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddActiveXControl(void* instance_ptr, int type_, int toprow, int top, int leftcolumn, int left, int width, int height);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddPicture_Integer_Integer_Integer_Integer_Stream(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn, void* stream, int stream_length);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddPicture_Integer_Integer_Stream_Integer_Integer(void* instance_ptr, int upperleftrow, int upperleftcolumn, void* stream, int stream_length, int widthscale, int heightscale);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddSvg(void* instance_ptr, int upperleftrow, int top, int upperleftcolumn, int left, int height, int width, void* svgdata, int svgdata_length, void* compatibleimagedata, int compatibleimagedata_length);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddIcons(void* instance_ptr, int upperleftrow, int top, int upperleftcolumn, int left, int height, int width, void* imagebytedata, int imagebytedata_length, void* compatibleimagedata, int compatibleimagedata_length);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddLinkedPicture(void* instance_ptr, int upperleftrow, int upperleftcolumn, int height, int width, char* sourcefullname);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddOleObjectWithLinkedImage(void* instance_ptr, int upperleftrow, int upperleftcolumn, int height, int width, char* sourcefullname);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddPictureInChart(void* instance_ptr, int top, int left, void* stream, int stream_length, int widthscale, int heightscale);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddOleObject(void* instance_ptr, int upperleftrow, int top, int upperleftcolumn, int left, int height, int width, void* imagedata, int imagedata_length);
   ASPOSE_CELLS_API c_return_void_value* ShapeCollection_CopyCommentsInRange(void* instance_ptr, void* shapes, void* ca, int destrow, int destcolumn);
   ASPOSE_CELLS_API c_return_void_value* ShapeCollection_CopyInRange(void* instance_ptr, void* sourceshapes, void* ca, int destrow, int destcolumn, bool iscontained);
   ASPOSE_CELLS_API c_return_void_value* ShapeCollection_DeleteInRange(void* instance_ptr, void* ca);
   ASPOSE_CELLS_API c_return_void_value* ShapeCollection_DeleteShape(void* instance_ptr, void* shape);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_Group(void* instance_ptr, void* groupitems, int groupitems_length);
   ASPOSE_CELLS_API c_return_void_value* ShapeCollection_Ungroup(void* instance_ptr, void* group);
   ASPOSE_CELLS_API c_return_void_value* ShapeCollection_RemoveAt(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* ShapeCollection_Remove(void* instance_ptr, void* shape);
   ASPOSE_CELLS_API c_return_void_value* ShapeCollection_Clear(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapeCollection_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddFreeform(void* instance_ptr, int upperleftrow, int top, int upperleftcolumn, int left, int height, int width, void* paths, int paths_length);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeCollection_AddSignatureLine(void* instance_ptr, int upperleftrow, int upperleftcolumn, void* signatureline);
   ASPOSE_CELLS_API c_return_int_value* ShapeCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ShapeCollection( void* instance_ptr);

   /**************Class ShapeGuide *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ShapeGuide(void* src);

   ASPOSE_CELLS_API c_return_bool_value* ShapeGuide_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* ShapeGuide_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapeGuide_SetValue(void* instance_ptr, double value);


   ASPOSE_CELLS_API void Delete_ShapeGuide( void* instance_ptr);

   /**************Class ShapeGuideCollection *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ShapeGuideCollection();

   ASPOSE_CELLS_API c_return_bool_value* ShapeGuideCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ShapeGuideCollection_Add(void* instance_ptr, char* name, double val);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeGuideCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* ShapeGuideCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ShapeGuideCollection( void* instance_ptr);

   /**************Class ShapePath *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ShapePath();

   ASPOSE_CELLS_API c_return_bool_value* ShapePath_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ShapePath_GetPathSegementList(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapePath_MoveTo(void* instance_ptr, float x, float y);
   ASPOSE_CELLS_API c_return_void_value* ShapePath_LineTo(void* instance_ptr, float x, float y);
   ASPOSE_CELLS_API c_return_void_value* ShapePath_CubicBezierTo(void* instance_ptr, float ctrx1, float ctry1, float ctrx2, float ctry2, float endx, float endy);
   ASPOSE_CELLS_API c_return_void_value* ShapePath_ArcTo(void* instance_ptr, float wr, float hr, float stang, float swang);
   ASPOSE_CELLS_API c_return_void_value* ShapePath_Close(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ShapePath( void* instance_ptr);

   /**************Class ShapePathCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ShapePathCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ShapePathCollection_GetCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ShapePathCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* ShapePathCollection_Add(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ShapePathCollection( void* instance_ptr);

   /**************Class ShapePathPoint *****************/


   ASPOSE_CELLS_API c_return_bool_value* ShapePathPoint_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ShapePathPoint_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapePathPoint_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ShapePathPoint_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapePathPoint_SetY(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_ShapePathPoint( void* instance_ptr);

   /**************Class ShapePathPointCollection *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ShapePathPointCollection();

   ASPOSE_CELLS_API c_return_bool_value* ShapePathPointCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ShapePathPointCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* ShapePathPointCollection_Add(void* instance_ptr, int x, int y);
   ASPOSE_CELLS_API c_return_int_value* ShapePathPointCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ShapePathPointCollection( void* instance_ptr);

   /**************Class ShapePropertyCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ShapePropertyCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ShapePropertyCollection_GetGlowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapePropertyCollection_ClearGlowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ShapePropertyCollection_HasGlowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ShapePropertyCollection_GetFormat3D(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ShapePropertyCollection_HasFormat3D(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapePropertyCollection_ClearFormat3D(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* ShapePropertyCollection_GetSoftEdgeRadius(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapePropertyCollection_SetSoftEdgeRadius(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* ShapePropertyCollection_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapePropertyCollection_ClearShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ShapePropertyCollection_HasShadowEffect(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ShapePropertyCollection( void* instance_ptr);

   /**************Class ShapeSegmentPath *****************/


   ASPOSE_CELLS_API c_return_bool_value* ShapeSegmentPath_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ShapeSegmentPath_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeSegmentPath_GetPoints(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ShapeSegmentPath( void* instance_ptr);

   /**************Class ShapeSegmentPathCollection *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ShapeSegmentPathCollection();

   ASPOSE_CELLS_API c_return_bool_value* ShapeSegmentPathCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ShapeSegmentPathCollection_Add(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_ptr_value* ShapeSegmentPathCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* ShapeSegmentPathCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ShapeSegmentPathCollection( void* instance_ptr);

   /**************Class SignatureLine *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_SignatureLine();

   ASPOSE_CELLS_API c_return_bool_value* SignatureLine_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SignatureLine_GetId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* SignatureLine_SetId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_void_value* SignatureLine_GetProviderId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* SignatureLine_SetProviderId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* SignatureLine_GetSigner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SignatureLine_SetSigner(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* SignatureLine_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SignatureLine_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* SignatureLine_GetEmail(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SignatureLine_SetEmail(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* SignatureLine_IsLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SignatureLine_SetIsLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SignatureLine_GetAllowComments(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SignatureLine_SetAllowComments(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SignatureLine_GetShowSignedDate(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SignatureLine_SetShowSignedDate(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* SignatureLine_GetInstructions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SignatureLine_SetInstructions(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* SignatureLine_GetSignatureLineType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SignatureLine_SetSignatureLineType(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_SignatureLine( void* instance_ptr);

   /**************Class SmartArtShape *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_SmartArtShape(void* src);

   ASPOSE_CELLS_API c_return_bool_value* SmartArtShape_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* SmartArtShape_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* SmartArtShape_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* SmartArtShape_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* SmartArtShape_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* SmartArtShape_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* SmartArtShape_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* SmartArtShape_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* SmartArtShape_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SmartArtShape_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SmartArtShape_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* SmartArtShape_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* SmartArtShape_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* SmartArtShape_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* SmartArtShape_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* SmartArtShape_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* SmartArtShape_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SmartArtShape_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* SmartArtShape_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* SmartArtShape_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* SmartArtShape_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* SmartArtShape_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* SmartArtShape_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* SmartArtShape_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* SmartArtShape_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* SmartArtShape_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* SmartArtShape_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* SmartArtShape_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* SmartArtShape_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SmartArtShape_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SmartArtShape_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SmartArtShape_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* SmartArtShape_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* SmartArtShape_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* SmartArtShape_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* SmartArtShape_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* SmartArtShape_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* SmartArtShape_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* SmartArtShape_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* SmartArtShape_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* SmartArtShape_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SmartArtShape_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* SmartArtShape_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartArtShape_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* SmartArtShape_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* SmartArtShape_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_SmartArtShape( void* instance_ptr);

   /**************Class SolidFill *****************/


   ASPOSE_CELLS_API c_return_bool_value* SolidFill_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SolidFill_GetColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SolidFill_SetColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* SolidFill_GetCellsColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SolidFill_SetCellsColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_double_value* SolidFill_GetTransparency(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SolidFill_SetTransparency(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* SolidFill_GetHashCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* SolidFill_Equals(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_SolidFill( void* instance_ptr);

   /**************Class Spinner *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_Spinner(void* src);

   ASPOSE_CELLS_API c_return_bool_value* Spinner_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetCurrentValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetCurrentValue(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetMin(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetMin(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetMax(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetMax(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetIncrementalChange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetIncrementalChange(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Spinner_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetShadow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Spinner_IsHorizontal(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetIsHorizontal(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* Spinner_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Spinner_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Spinner_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* Spinner_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Spinner_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Spinner_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Spinner_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Spinner_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Spinner_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Spinner_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* Spinner_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* Spinner_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* Spinner_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Spinner_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Spinner_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Spinner_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Spinner_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Spinner_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Spinner_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Spinner_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Spinner_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Spinner_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Spinner_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Spinner_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Spinner_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Spinner_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Spinner_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Spinner_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Spinner_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Spinner_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Spinner_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Spinner_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Spinner_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* Spinner_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* Spinner_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* Spinner_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Spinner_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Spinner_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* Spinner_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* Spinner_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Spinner_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Spinner_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Spinner_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* Spinner_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Spinner_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Spinner_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* Spinner_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Spinner_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Spinner_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Spinner_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_Spinner( void* instance_ptr);

   /**************Class TextBox *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_TextBox(void* src);

   ASPOSE_CELLS_API c_return_bool_value* TextBox_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetEquationParagraph_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetEquationParagraph(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* TextBox_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* TextBox_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* TextBox_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* TextBox_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* TextBox_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* TextBox_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* TextBox_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* TextBox_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextBox_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextBox_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* TextBox_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* TextBox_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* TextBox_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* TextBox_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* TextBox_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* TextBox_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* TextBox_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* TextBox_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextBox_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* TextBox_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* TextBox_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* TextBox_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* TextBox_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* TextBox_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* TextBox_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* TextBox_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* TextBox_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* TextBox_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* TextBox_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* TextBox_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextBox_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextBox_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextBox_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* TextBox_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* TextBox_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* TextBox_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* TextBox_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* TextBox_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* TextBox_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* TextBox_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* TextBox_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* TextBox_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* TextBox_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* TextBox_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* TextBox_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextBox_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* TextBox_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBox_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextBox_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* TextBox_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_TextBox( void* instance_ptr);

   /**************Class TextBoxCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* TextBoxCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextBoxCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* TextBoxCollection_Get_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_int_value* TextBoxCollection_Add(void* instance_ptr, int upperleftrow, int upperleftcolumn, int height, int width);
   ASPOSE_CELLS_API c_return_void_value* TextBoxCollection_RemoveAt(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* TextBoxCollection_Clear(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TextBoxCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_TextBoxCollection( void* instance_ptr);

   /**************Class TextEffectFormat *****************/


   ASPOSE_CELLS_API c_return_bool_value* TextEffectFormat_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextEffectFormat_SetTextEffect(void* instance_ptr, int effect);
   ASPOSE_CELLS_API c_return_string_value* TextEffectFormat_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextEffectFormat_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* TextEffectFormat_GetFontName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextEffectFormat_SetFontName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* TextEffectFormat_GetFontBold(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextEffectFormat_SetFontBold(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextEffectFormat_GetFontItalic(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextEffectFormat_SetFontItalic(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextEffectFormat_GetRotatedChars(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextEffectFormat_SetRotatedChars(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* TextEffectFormat_GetFontSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextEffectFormat_SetFontSize(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextEffectFormat_GetPresetShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextEffectFormat_SetPresetShape(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_TextEffectFormat( void* instance_ptr);

   /**************Class TextureFill *****************/


   ASPOSE_CELLS_API c_return_bool_value* TextureFill_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TextureFill_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextureFill_SetType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* TextureFill_GetImageData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextureFill_SetImageData(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_bool_value* TextureFill_IsTiling(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextureFill_SetIsTiling(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* TextureFill_GetPicFormatOption(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextureFill_SetPicFormatOption(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* TextureFill_GetTilePicOption(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextureFill_SetTilePicOption(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* TextureFill_GetPictureFormatType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextureFill_SetPictureFormatType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* TextureFill_GetScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextureFill_SetScale(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* TextureFill_GetTransparency(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextureFill_SetTransparency(void* instance_ptr, double value);


   ASPOSE_CELLS_API void Delete_TextureFill( void* instance_ptr);

   /**************Class ThreeDFormat *****************/


   ASPOSE_CELLS_API c_return_bool_value* ThreeDFormat_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* ThreeDFormat_GetBottomBevelWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreeDFormat_SetBottomBevelWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ThreeDFormat_GetBottomBevelHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreeDFormat_SetBottomBevelHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ThreeDFormat_GetBottomBevelType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreeDFormat_SetBottomBevelType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ThreeDFormat_GetTopBevelWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreeDFormat_SetTopBevelWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ThreeDFormat_GetTopBevelHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreeDFormat_SetTopBevelHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ThreeDFormat_GetTopBevelType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreeDFormat_SetTopBevelType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ThreeDFormat_GetMaterial(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreeDFormat_SetMaterial(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ThreeDFormat_GetContourColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreeDFormat_SetContourColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_double_value* ThreeDFormat_GetContourWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreeDFormat_SetContourWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* ThreeDFormat_GetExtrusionColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreeDFormat_SetExtrusionColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_double_value* ThreeDFormat_GetExtrusionHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreeDFormat_SetExtrusionHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ThreeDFormat_GetZ(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreeDFormat_SetZ(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ThreeDFormat_GetLightAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreeDFormat_SetLightAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ThreeDFormat_GetLighting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreeDFormat_SetLighting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ThreeDFormat_GetLightingDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreeDFormat_SetLightingDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ThreeDFormat_GetPerspective(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreeDFormat_SetPerspective(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ThreeDFormat_GetRotationX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreeDFormat_SetRotationX(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ThreeDFormat_GetRotationY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreeDFormat_SetRotationY(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ThreeDFormat_GetRotationZ(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreeDFormat_SetRotationZ(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ThreeDFormat_GetPresetCameraType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ThreeDFormat_SetPresetCameraType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ThreeDFormat_GetHashCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ThreeDFormat_Equals(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_ThreeDFormat( void* instance_ptr);

   /**************Class TilePicOption *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_TilePicOption();

   ASPOSE_CELLS_API c_return_bool_value* TilePicOption_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* TilePicOption_GetOffsetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TilePicOption_SetOffsetX(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* TilePicOption_GetOffsetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TilePicOption_SetOffsetY(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* TilePicOption_GetScaleX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TilePicOption_SetScaleX(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* TilePicOption_GetScaleY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TilePicOption_SetScaleY(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* TilePicOption_GetMirrorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TilePicOption_SetMirrorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TilePicOption_GetAlignmentType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TilePicOption_SetAlignmentType(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_TilePicOption( void* instance_ptr);

   /**************Class VmlShapeGuide *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_VmlShapeGuide(void* src);

   ASPOSE_CELLS_API c_return_bool_value* VmlShapeGuide_IsNull(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_VmlShapeGuide( void* instance_ptr);

   /**************Class WebExtensionShape *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_WebExtensionShape(void* src);

   ASPOSE_CELLS_API c_return_bool_value* WebExtensionShape_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetWebExtension(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetWebExtension(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* WebExtensionShape_GetMacroName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetMacroName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* WebExtensionShape_IsEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* WebExtensionShape_IsSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_ToFrontOrBack(void* instance_ptr, int orders);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetZOrderPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetZOrderPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* WebExtensionShape_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* WebExtensionShape_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* WebExtensionShape_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetShadowEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetReflection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetGlow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* WebExtensionShape_GetSoftEdges(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetSoftEdges(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetThreeDFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetFormatPicture(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* WebExtensionShape_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WebExtensionShape_IsAspectRatioLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetIsAspectRatioLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WebExtensionShape_GetLockedProperty(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetLockedProperty(void* instance_ptr, int type_, bool value);
   ASPOSE_CELLS_API c_return_double_value* WebExtensionShape_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_AddHyperlink(void* instance_ptr, char* address);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_RemoveHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetHyperlink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_MoveToRange(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_AlignTopRightCorner(void* instance_ptr, int toprow, int rightcolumn);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* WebExtensionShape_GetSpid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetSpt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* WebExtensionShape_IsGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* WebExtensionShape_IsInGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* WebExtensionShape_IsWordArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetTextEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* WebExtensionShape_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WebExtensionShape_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetMsoDrawingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetAutoShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetAutoShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetAnchorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetAnchorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetUpperLeftRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetUpperLeftRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetUpperDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetUpperDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetUpperLeftColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetUpperLeftColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetUpperDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetUpperDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetLowerRightRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetLowerDeltaY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetLowerDeltaY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetLowerRightColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetLowerRightColumn(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetLowerDeltaX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetLowerDeltaX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetRight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetRight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetBottom(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetBottom(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* WebExtensionShape_GetWidthInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetWidthInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* WebExtensionShape_GetWidthPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetWidthPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* WebExtensionShape_GetWidthCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetWidthCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* WebExtensionShape_GetHeightInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetHeightInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* WebExtensionShape_GetHeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetHeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* WebExtensionShape_GetHeightCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetHeightCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetLeft(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* WebExtensionShape_GetLeftInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetLeftInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* WebExtensionShape_GetLeftCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetLeftCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetTop(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* WebExtensionShape_GetTopInch(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetTopInch(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* WebExtensionShape_GetTopCM(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetTopCM(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetTopToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetTopToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetLeftToCorner(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetLeftToCorner(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetWidthScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetWidthScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetHeightScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetHeightScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetTopInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetTopInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetLeftInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetLeftInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetWidthInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetWidthInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetHeightInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetHeightInShape(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetGroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* WebExtensionShape_GetHasLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetHasLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WebExtensionShape_IsFilled(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetIsFilled(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WebExtensionShape_IsFlippedHorizontally(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetIsFlippedHorizontally(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WebExtensionShape_IsFlippedVertically(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetIsFlippedVertically(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetActualLowerRightRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetConnectionPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_bool_value* WebExtensionShape_GetRelativeToOriginalPictureSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetRelativeToOriginalPictureSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* WebExtensionShape_GetLinkedCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetLinkedCell_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* WebExtensionShape_GetInputRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetInputRange_String(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* WebExtensionShape_GetLinkedCell_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetLinkedCell_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* WebExtensionShape_GetInputRange_Boolean_Boolean(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetInputRange_String_Boolean_Boolean(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_UpdateSelectedValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetTextBody(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetFont(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetTextOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_CalculateTextSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* WebExtensionShape_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* WebExtensionShape_IsRichText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* WebExtensionShape_GetHtmlText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetHtmlText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_FormatCharacters(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetRichFormattings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* WebExtensionShape_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetTextOrientationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetTextOrientationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionShape_GetTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetTextBoxOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetControlData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_RemoveActiveXControl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetPaths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetGeometry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_GetCreateId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetCreateId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* WebExtensionShape_IsDecorative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionShape_SetIsDecorative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetActualBox(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionShape_GetResultOfSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* WebExtensionShape_IsSameSetting(void* instance_ptr, void* obj);


   ASPOSE_CELLS_API void Delete_WebExtensionShape( void* instance_ptr);

   /**************Class AutoNumberedBulletValue *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_AutoNumberedBulletValue();
   ASPOSE_CELLS_API c_return_ptr_value* New_AutoNumberedBulletValue_BulletValue(void* src);

   ASPOSE_CELLS_API c_return_bool_value* AutoNumberedBulletValue_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* AutoNumberedBulletValue_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* AutoNumberedBulletValue_GetStartAt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AutoNumberedBulletValue_SetStartAt(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* AutoNumberedBulletValue_GetAutonumberScheme(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AutoNumberedBulletValue_SetAutonumberScheme(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_AutoNumberedBulletValue( void* instance_ptr);

   /**************Class Bullet *****************/


   ASPOSE_CELLS_API c_return_bool_value* Bullet_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Bullet_GetBulletValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Bullet_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Bullet_SetType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* Bullet_GetFontName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Bullet_SetFontName(void* instance_ptr, char* value);


   ASPOSE_CELLS_API void Delete_Bullet( void* instance_ptr);

   /**************Class BulletValue *****************/


   ASPOSE_CELLS_API c_return_bool_value* BulletValue_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* BulletValue_GetType(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_BulletValue( void* instance_ptr);

   /**************Class CharacterBulletValue *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_CharacterBulletValue();
   ASPOSE_CELLS_API c_return_ptr_value* New_CharacterBulletValue_BulletValue(void* src);

   ASPOSE_CELLS_API c_return_bool_value* CharacterBulletValue_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CharacterBulletValue_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_char_value* CharacterBulletValue_GetCharacter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CharacterBulletValue_SetCharacter(void* instance_ptr, char value);


   ASPOSE_CELLS_API void Delete_CharacterBulletValue( void* instance_ptr);

   /**************Class FontSettingCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* FontSettingCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FontSettingCollection_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* FontSettingCollection_GetTextAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* FontSettingCollection_GetTextParagraphs(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* FontSettingCollection_GetParagraphEnumerator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* FontSettingCollection_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FontSettingCollection_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* FontSettingCollection_AppendText(void* instance_ptr, char* text);
   ASPOSE_CELLS_API c_return_void_value* FontSettingCollection_InsertText(void* instance_ptr, int index, char* text);
   ASPOSE_CELLS_API c_return_void_value* FontSettingCollection_Replace_Integer_Integer_String(void* instance_ptr, int index, int count, char* text);
   ASPOSE_CELLS_API c_return_void_value* FontSettingCollection_Replace_String_String(void* instance_ptr, char* oldvalue, char* newvalue);
   ASPOSE_CELLS_API c_return_void_value* FontSettingCollection_DeleteText(void* instance_ptr, int index, int count);
   ASPOSE_CELLS_API c_return_string_value* FontSettingCollection_GetHtmlString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* FontSettingCollection_SetHtmlString(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* FontSettingCollection_Format(void* instance_ptr, int startindex, int length, void* font, void* flag);
   ASPOSE_CELLS_API c_return_ptr_value* FontSettingCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* FontSettingCollection_Clear(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* FontSettingCollection_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* FontSettingCollection_GetHashCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* FontSettingCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_FontSettingCollection( void* instance_ptr);

   /**************Class NoneBulletValue *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_NoneBulletValue();
   ASPOSE_CELLS_API c_return_ptr_value* New_NoneBulletValue_BulletValue(void* src);

   ASPOSE_CELLS_API c_return_bool_value* NoneBulletValue_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* NoneBulletValue_GetType(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_NoneBulletValue( void* instance_ptr);

   /**************Class PictureBulletValue *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PictureBulletValue();
   ASPOSE_CELLS_API c_return_ptr_value* New_PictureBulletValue_BulletValue(void* src);

   ASPOSE_CELLS_API c_return_bool_value* PictureBulletValue_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PictureBulletValue_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PictureBulletValue_GetImageData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PictureBulletValue_SetImageData(void* instance_ptr, void* value, int value_length);


   ASPOSE_CELLS_API void Delete_PictureBulletValue( void* instance_ptr);

   /**************Class ShapeTextAlignment *****************/


   ASPOSE_CELLS_API c_return_bool_value* ShapeTextAlignment_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ShapeTextAlignment_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapeTextAlignment_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ShapeTextAlignment_GetRotateTextWithShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapeTextAlignment_SetRotateTextWithShape(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ShapeTextAlignment_GetTextVerticalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapeTextAlignment_SetTextVerticalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ShapeTextAlignment_GetTextHorizontalOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapeTextAlignment_SetTextHorizontalOverflow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ShapeTextAlignment_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapeTextAlignment_SetRotationAngle(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ShapeTextAlignment_GetTextVerticalType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapeTextAlignment_SetTextVerticalType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ShapeTextAlignment_IsLockedText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapeTextAlignment_SetIsLockedText(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ShapeTextAlignment_GetAutoSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapeTextAlignment_SetAutoSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ShapeTextAlignment_GetTextShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapeTextAlignment_SetTextShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ShapeTextAlignment_GetTopMarginPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapeTextAlignment_SetTopMarginPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ShapeTextAlignment_GetBottomMarginPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapeTextAlignment_SetBottomMarginPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ShapeTextAlignment_GetLeftMarginPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapeTextAlignment_SetLeftMarginPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ShapeTextAlignment_GetRightMarginPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapeTextAlignment_SetRightMarginPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_bool_value* ShapeTextAlignment_IsAutoMargin(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapeTextAlignment_SetIsAutoMargin(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ShapeTextAlignment_GetNumberOfColumns(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ShapeTextAlignment_SetNumberOfColumns(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ShapeTextAlignment_Equals(void* instance_ptr, void* obj);
   ASPOSE_CELLS_API c_return_int_value* ShapeTextAlignment_GetHashCode(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ShapeTextAlignment( void* instance_ptr);

   /**************Class TextBoxOptions *****************/


   ASPOSE_CELLS_API c_return_bool_value* TextBoxOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TextBoxOptions_GetShapeTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxOptions_SetShapeTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* TextBoxOptions_GetResizeToFitText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxOptions_SetResizeToFitText(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* TextBoxOptions_GetShapeTextDirection(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxOptions_SetShapeTextDirection(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* TextBoxOptions_GetLeftMarginPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxOptions_SetLeftMarginPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* TextBoxOptions_GetRightMarginPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxOptions_SetRightMarginPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* TextBoxOptions_GetTopMarginPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxOptions_SetTopMarginPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* TextBoxOptions_GetBottomMarginPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxOptions_SetBottomMarginPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_bool_value* TextBoxOptions_GetAllowTextToOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxOptions_SetAllowTextToOverflow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextBoxOptions_GetWrapTextInShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextBoxOptions_SetWrapTextInShape(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_TextBoxOptions( void* instance_ptr);

   /**************Class TextOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_TextOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* TextOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* TextOptions_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextOptions_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* TextOptions_GetLanguageCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextOptions_SetLanguageCode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* TextOptions_GetLatinName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextOptions_SetLatinName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* TextOptions_GetFarEastName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextOptions_SetFarEastName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* TextOptions_GetFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextOptions_GetOutline(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextOptions_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextOptions_GetUnderlineColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextOptions_SetUnderlineColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_double_value* TextOptions_GetKerning(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextOptions_SetKerning(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* TextOptions_GetSpacing(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextOptions_SetSpacing(void* instance_ptr, double value);


   ASPOSE_CELLS_API void Delete_TextOptions( void* instance_ptr);

   /**************Class TextParagraph *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_TextParagraph(void* src);

   ASPOSE_CELLS_API c_return_bool_value* TextParagraph_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextParagraph_GetBullet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TextParagraph_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TextParagraph_GetLineSpaceSizeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextParagraph_SetLineSpaceSizeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* TextParagraph_GetLineSpace(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextParagraph_SetLineSpace(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* TextParagraph_GetSpaceAfterSizeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextParagraph_SetSpaceAfterSizeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* TextParagraph_GetSpaceAfter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextParagraph_SetSpaceAfter(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* TextParagraph_GetSpaceBeforeSizeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextParagraph_SetSpaceBeforeSizeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* TextParagraph_GetSpaceBefore(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextParagraph_SetSpaceBefore(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* TextParagraph_GetStops(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* TextParagraph_IsLatinLineBreak(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextParagraph_SetIsLatinLineBreak(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextParagraph_IsEastAsianLineBreak(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextParagraph_SetIsEastAsianLineBreak(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* TextParagraph_IsHangingPunctuation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextParagraph_SetIsHangingPunctuation(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_double_value* TextParagraph_GetRightMargin(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextParagraph_SetRightMargin(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* TextParagraph_GetLeftMargin(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextParagraph_SetLeftMargin(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* TextParagraph_GetFirstLineIndent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextParagraph_SetFirstLineIndent(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* TextParagraph_GetFontAlignType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextParagraph_SetFontAlignType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TextParagraph_GetAlignmentType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextParagraph_SetAlignmentType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* TextParagraph_GetDefaultTabSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextParagraph_SetDefaultTabSize(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* TextParagraph_GetChildren(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TextParagraph_GetStartIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TextParagraph_GetLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextParagraph_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextParagraph_SetWordArtStyle(void* instance_ptr, int style);
   ASPOSE_CELLS_API c_return_ptr_value* TextParagraph_GetTextOptions(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_TextParagraph( void* instance_ptr);

   /**************Class TextParagraphCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* TextParagraphCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TextParagraphCollection_GetCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TextParagraphCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* TextParagraphCollection_GetEnumerator(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_TextParagraphCollection( void* instance_ptr);

   /**************Class TextTabStop *****************/


   ASPOSE_CELLS_API c_return_bool_value* TextTabStop_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TextTabStop_GetTabAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextTabStop_SetTabAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* TextTabStop_GetTabPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextTabStop_SetTabPosition(void* instance_ptr, double value);


   ASPOSE_CELLS_API void Delete_TextTabStop( void* instance_ptr);

   /**************Class TextTabStopCollection *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_TextTabStopCollection();

   ASPOSE_CELLS_API c_return_bool_value* TextTabStopCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TextTabStopCollection_Add(void* instance_ptr, int tabalignment, double tabposition);
   ASPOSE_CELLS_API c_return_ptr_value* TextTabStopCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* TextTabStopCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_TextTabStopCollection( void* instance_ptr);

   /**************Class Axis *****************/


   ASPOSE_CELLS_API c_return_bool_value* Axis_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Axis_GetArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Axis_IsAutomaticMinValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetIsAutomaticMinValue(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Axis_GetMinValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetMinValue(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* Axis_IsAutomaticMaxValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetIsAutomaticMaxValue(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Axis_GetMaxValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetMaxValue(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* Axis_IsAutomaticMajorUnit(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetIsAutomaticMajorUnit(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_double_value* Axis_GetMajorUnit(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetMajorUnit(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_bool_value* Axis_IsAutomaticMinorUnit(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetIsAutomaticMinorUnit(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_double_value* Axis_GetMinorUnit(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetMinorUnit(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* Axis_GetAxisLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Axis_GetMajorTickMark(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetMajorTickMark(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Axis_GetMinorTickMark(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetMinorTickMark(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Axis_GetTickLabelPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetTickLabelPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Axis_GetCrossAt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetCrossAt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Axis_GetCrossType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetCrossType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Axis_GetLogBase(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetLogBase(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_bool_value* Axis_IsLogarithmic(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetIsLogarithmic(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Axis_IsPlotOrderReversed(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetIsPlotOrderReversed(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Axis_GetAxisBetweenCategories(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetAxisBetweenCategories(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Axis_GetTickLabels(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Axis_GetTickLabelSpacing(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetTickLabelSpacing(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Axis_IsAutoTickLabelSpacing(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetIsAutoTickLabelSpacing(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Axis_GetTickMarkSpacing(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetTickMarkSpacing(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Axis_GetDisplayUnit(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetDisplayUnit(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Axis_GetCustomDisplayUnit(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetCustomDisplayUnit(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* Axis_GetDisplayUnitLabel(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Axis_IsDisplayUnitLabelShown(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetIsDisplayUnitLabelShown(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Axis_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Axis_GetCategoryType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetCategoryType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Axis_GetBaseUnitScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetBaseUnitScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Axis_GetMajorUnitScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetMajorUnitScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Axis_GetMinorUnitScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetMinorUnitScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Axis_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Axis_GetMajorGridLines(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Axis_GetMinorGridLines(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Axis_GetHasMultiLevelLabels(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Axis_SetHasMultiLevelLabels(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Axis_GetAxisTexts(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Axis_GetBins(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_Axis( void* instance_ptr);

   /**************Class AxisBins *****************/


   ASPOSE_CELLS_API c_return_bool_value* AxisBins_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* AxisBins_IsByCategory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AxisBins_SetIsByCategory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* AxisBins_IsAutomatic(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AxisBins_SetIsAutomatic(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_double_value* AxisBins_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AxisBins_SetWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* AxisBins_GetCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AxisBins_SetCount(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* AxisBins_GetOverflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AxisBins_SetOverflow(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* AxisBins_GetUnderflow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* AxisBins_SetUnderflow(void* instance_ptr, double value);


   ASPOSE_CELLS_API void Delete_AxisBins( void* instance_ptr);

   /**************Class Chart *****************/


   ASPOSE_CELLS_API c_return_bool_value* Chart_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Chart_GetStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetChartObject(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Chart_GetHidePivotFieldButtons(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetHidePivotFieldButtons(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetPivotOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Chart_GetPivotSource(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetPivotSource(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Chart_IsCellReferedByChart(void* instance_ptr, int sheetindex, int rowindex, int columnindex);
   ASPOSE_CELLS_API c_return_bool_value* Chart_IsChartDataChanged(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Chart_GetPlotBy(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_RefreshPivotData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Chart_GetPlotEmptyCellsType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetPlotEmptyCellsType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Chart_GetPlotVisibleCellsOnly(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetPlotVisibleCellsOnly(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Chart_GetDisplayNaAsBlank(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetDisplayNaAsBlank(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* Chart_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Chart_GetSizeWithWindow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetSizeWithWindow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetShapes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Chart_GetPrintSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetPrintSize(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* Chart_ChangeTemplate(void* instance_ptr, void* data, int data_length);
   ASPOSE_CELLS_API c_return_int_value* Chart_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* Chart_Move(void* instance_ptr, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetNSeries(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetFilteredNSeries(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetSubTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetPlotArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetChartArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetCategoryAxis(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetValueAxis(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetSecondValueAxis(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetSecondCategoryAxis(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetSeriesAxis(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetLegend(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetChartDataTable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Chart_GetShowLegend(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetShowLegend(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Chart_IsRectangularCornered(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetIsRectangularCornered(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Chart_GetShowDataTable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetShowDataTable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Chart_GetFirstSliceAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetFirstSliceAngle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Chart_GetGapWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetGapWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Chart_GetGapDepth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetGapDepth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* Chart_Calculate(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_Calculate_ChartCalculateOptions(void* instance_ptr, void* calculateoptions);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetFloor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetWalls(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetBackWall(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetSideWall(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Chart_GetWallsAndGridlines2D(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetWallsAndGridlines2D(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Chart_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetRotationAngle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Chart_GetElevation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetElevation(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Chart_GetRightAngleAxes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetRightAngleAxes(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Chart_GetAutoScaling(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetAutoScaling(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Chart_GetHeightPercent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetHeightPercent(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Chart_GetPerspective(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetPerspective(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Chart_GetIs3D(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Chart_GetDepthPercent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetDepthPercent(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* Chart_ToImage_String(void* instance_ptr, char* imagefile);
   ASPOSE_CELLS_API c_return_void_value* Chart_ToImage_String_ImageType(void* instance_ptr, char* imagefile, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* Chart_ToImage_String_Integer(void* instance_ptr, char* imagefile, int jpegquality);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_ToImage_Integer(void* instance_ptr, int jpegquality);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_ToImage_ImageType(void* instance_ptr, int imagetype);
   ASPOSE_CELLS_API c_return_void_value* Chart_ToPdf_String(void* instance_ptr, char* filename);
   ASPOSE_CELLS_API c_return_void_value* Chart_ToPdf_String_Floating_Floating_PageLayoutAlignmentType_PageLayoutAlignmentType(void* instance_ptr, char* filename, float desiredpagewidth, float desiredpageheight, int halignmenttype, int valignmenttype);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_ToPdf(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_ToPdf_Floating_Floating_PageLayoutAlignmentType_PageLayoutAlignmentType(void* instance_ptr, float desiredpagewidth, float desiredpageheight, int halignmenttype, int valignmenttype);
   ASPOSE_CELLS_API c_return_void_value* Chart_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* imagefile, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetActualSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Chart_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetPageSetup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Chart_HasAxis(void* instance_ptr, int aixstype, bool isprimary);
   ASPOSE_CELLS_API c_return_bool_value* Chart_SwitchRowColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Chart_GetChartDataRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Chart_SetChartDataRange(void* instance_ptr, char* area, bool isvertical);
   ASPOSE_CELLS_API c_return_ptr_value* Chart_GetLine(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_Chart( void* instance_ptr);

   /**************Class ChartArea *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ChartArea(void* src);

   ASPOSE_CELLS_API c_return_bool_value* ChartArea_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartArea_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartArea_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartArea_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartArea_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartArea_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartArea_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartArea_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartArea_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ChartArea_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ChartArea_IsInnerMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartArea_SetIsInnerMode(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ChartArea_GetBackgroundMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartArea_SetBackgroundMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ChartArea_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartArea_SetShadow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ChartArea_GetShapeProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ChartArea_IsDefaultPosBeSet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartArea_GetDefaultX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartArea_GetDefaultY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartArea_GetDefaultWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartArea_GetDefaultHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartArea_GetBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartArea_GetArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartArea_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ChartArea_GetAutoScaleFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartArea_SetAutoScaleFont(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ChartArea_IsAutomaticSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartArea_SetIsAutomaticSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* ChartArea_SetPositionAuto(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ChartArea( void* instance_ptr);

   /**************Class ChartCalculateOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ChartCalculateOptions();

   ASPOSE_CELLS_API c_return_bool_value* ChartCalculateOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ChartCalculateOptions_GetUpdateAllPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartCalculateOptions_SetUpdateAllPoints(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_ChartCalculateOptions( void* instance_ptr);

   /**************Class ChartCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ChartCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartCollection_AddFloatingChart(void* instance_ptr, int type_, int left, int top, int width, int height);
   ASPOSE_CELLS_API c_return_int_value* ChartCollection_Add_ChartType_Integer_Integer_Integer_Integer(void* instance_ptr, int type_, int upperleftrow, int upperleftcolumn, int lowerrightrow, int lowerrightcolumn);
   ASPOSE_CELLS_API c_return_int_value* ChartCollection_Add_Stream_String_Boolean_Integer_Integer_Integer_Integer(void* instance_ptr, void* data, int data_length, char* datarange, bool isvertical, int toprow, int leftcolumn, int rightrow, int bottomcolumn);
   ASPOSE_CELLS_API c_return_int_value* ChartCollection_Add_ChartType_String_Boolean_Integer_Integer_Integer_Integer(void* instance_ptr, int type_, char* datarange, bool isvertical, int toprow, int leftcolumn, int rightrow, int bottomcolumn);
   ASPOSE_CELLS_API c_return_ptr_value* ChartCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* ChartCollection_Get_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_void_value* ChartCollection_RemoveAt(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* ChartCollection_Clear(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ChartCollection( void* instance_ptr);

   /**************Class ChartDataTable *****************/


   ASPOSE_CELLS_API c_return_bool_value* ChartDataTable_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartDataTable_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ChartDataTable_GetAutoScaleFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartDataTable_SetAutoScaleFont(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ChartDataTable_GetBackgroundMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartDataTable_SetBackgroundMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ChartDataTable_GetHasHorizontalBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartDataTable_SetHasHorizontalBorder(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ChartDataTable_GetHasVerticalBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartDataTable_SetHasVerticalBorder(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ChartDataTable_GetHasOutlineBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartDataTable_SetHasOutlineBorder(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ChartDataTable_GetShowLegendKey(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartDataTable_SetShowLegendKey(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ChartDataTable_GetBorder(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ChartDataTable( void* instance_ptr);

   /**************Class ChartFrame *****************/


   ASPOSE_CELLS_API c_return_bool_value* ChartFrame_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ChartFrame_IsInnerMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartFrame_SetIsInnerMode(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ChartFrame_GetBackgroundMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartFrame_SetBackgroundMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ChartFrame_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartFrame_SetShadow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ChartFrame_GetShapeProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ChartFrame_IsDefaultPosBeSet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartFrame_GetDefaultX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartFrame_GetDefaultY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartFrame_GetDefaultWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartFrame_GetDefaultHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartFrame_GetBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartFrame_GetArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartFrame_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartFrame_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ChartFrame_GetAutoScaleFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartFrame_SetAutoScaleFont(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ChartFrame_IsAutomaticSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartFrame_SetIsAutomaticSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ChartFrame_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartFrame_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartFrame_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartFrame_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartFrame_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartFrame_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartFrame_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartFrame_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* ChartFrame_SetPositionAuto(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ChartFrame( void* instance_ptr);

   /**************Class ChartGlobalizationSettings *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ChartGlobalizationSettings();

   ASPOSE_CELLS_API c_return_bool_value* ChartGlobalizationSettings_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ChartGlobalizationSettings_GetSeriesName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ChartGlobalizationSettings_GetChartTitleName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ChartGlobalizationSettings_GetLegendIncreaseName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ChartGlobalizationSettings_GetLegendDecreaseName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ChartGlobalizationSettings_GetLegendTotalName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ChartGlobalizationSettings_GetAxisTitleName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ChartGlobalizationSettings_GetOtherName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ChartGlobalizationSettings_GetAxisUnitName(void* instance_ptr, int type_);


   ASPOSE_CELLS_API void Delete_ChartGlobalizationSettings( void* instance_ptr);

   /**************Class ChartPoint *****************/


   ASPOSE_CELLS_API c_return_bool_value* ChartPoint_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartPoint_GetExplosion(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartPoint_SetExplosion(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ChartPoint_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartPoint_SetShadow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ChartPoint_GetBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartPoint_GetArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartPoint_GetMarker(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartPoint_GetDataLabels(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartPoint_Get_YValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartPoint_SetYValue(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* ChartPoint_GetYValueType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartPoint_GetXValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartPoint_SetXValue(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* ChartPoint_GetXValueType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartPoint_GetShapeProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ChartPoint_IsInSecondaryPlot(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartPoint_SetIsInSecondaryPlot(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ChartPoint_GetShapeX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartPoint_GetShapeY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartPoint_GetShapeWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartPoint_GetShapeHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartPoint_GetShapeXPx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartPoint_GetShapeYPx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartPoint_GetShapeWidthPx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartPoint_GetShapeHeightPx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartPoint_GetBorderWidthPx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartPoint_GetRadiusPx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartPoint_GetDoughnutInnerRadius(void* instance_ptr);
   ASPOSE_CELLS_API c_return_float_value* ChartPoint_GetStartAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_float_value* ChartPoint_GetEndAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_float_value* ChartPoint_GetArcStartPointXPx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_float_value* ChartPoint_GetArcStartPointYPx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_float_value* ChartPoint_GetArcEndPointXPx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_float_value* ChartPoint_GetArcEndPointYPx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_float_value* ChartPoint_GetInnerArcStartPointXPx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_float_value* ChartPoint_GetInnerArcStartPointYPx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_float_value* ChartPoint_GetInnerArcEndPointXPx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_float_value* ChartPoint_GetInnerArcEndPointYPx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartPoint_GetTopPointCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_float_value* ChartPoint_GetTopPointXPx(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_float_value* ChartPoint_GetTopPointYPx(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* ChartPoint_GetBottomPointCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_float_value* ChartPoint_GetBottomPointXPx(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_float_value* ChartPoint_GetBottomPointYPx(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* ChartPoint_GetOnCategoryAxisPointCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_float_value* ChartPoint_GetOnCategoryAxisPointXPx(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_float_value* ChartPoint_GetOnCategoryAxisPointYPx(void* instance_ptr, int index);


   ASPOSE_CELLS_API void Delete_ChartPoint( void* instance_ptr);

   /**************Class ChartPointCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ChartPointCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartPointCollection_GetEnumerator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartPointCollection_Clear(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartPointCollection_RemoveAt(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* ChartPointCollection_GetCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartPointCollection_Get(void* instance_ptr, int index);


   ASPOSE_CELLS_API void Delete_ChartPointCollection( void* instance_ptr);

   /**************Class ChartTextFrame *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ChartTextFrame(void* src);

   ASPOSE_CELLS_API c_return_bool_value* ChartTextFrame_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ChartTextFrame_IsDeleted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartTextFrame_SetIsDeleted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ChartTextFrame_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartTextFrame_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartTextFrame_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartTextFrame_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartTextFrame_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartTextFrame_SetRotationAngle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ChartTextFrame_IsAutomaticRotation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartTextFrame_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_int_value* ChartTextFrame_GetReadingOrder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartTextFrame_SetReadingOrder(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ChartTextFrame_IsResizeShapeToFitText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartTextFrame_SetIsResizeShapeToFitText(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ChartTextFrame_IsAutoText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartTextFrame_SetIsAutoText(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* ChartTextFrame_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartTextFrame_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ChartTextFrame_GetLinkedSource(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartTextFrame_SetLinkedSource(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* ChartTextFrame_GetDirectionType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartTextFrame_SetDirectionType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ChartTextFrame_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartTextFrame_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ChartTextFrame_IsInnerMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartTextFrame_SetIsInnerMode(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ChartTextFrame_GetBackgroundMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartTextFrame_SetBackgroundMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ChartTextFrame_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartTextFrame_SetShadow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ChartTextFrame_GetShapeProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ChartTextFrame_IsDefaultPosBeSet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartTextFrame_GetDefaultX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartTextFrame_GetDefaultY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartTextFrame_GetDefaultWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ChartTextFrame_GetDefaultHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartTextFrame_GetBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartTextFrame_GetArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartTextFrame_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ChartTextFrame_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ChartTextFrame_GetAutoScaleFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartTextFrame_SetAutoScaleFont(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ChartTextFrame_IsAutomaticSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartTextFrame_SetIsAutomaticSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ChartTextFrame_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartTextFrame_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartTextFrame_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartTextFrame_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartTextFrame_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartTextFrame_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ChartTextFrame_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartTextFrame_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* ChartTextFrame_SetPositionAuto(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ChartTextFrame( void* instance_ptr);

   /**************Class DataLabels *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_DataLabels(void* src);

   ASPOSE_CELLS_API c_return_bool_value* DataLabels_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DataLabels_GetBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DataLabels_GetArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* DataLabels_IsAutoText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetIsAutoText(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* DataLabels_GetDirectionType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetDirectionType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* DataLabels_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* DataLabels_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetIsTextWrapped(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* DataLabels_GetBackgroundMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetBackgroundMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* DataLabels_GetShowValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetShowValue(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DataLabels_GetShowCellRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetShowCellRange(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DataLabels_GetShowPercentage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetShowPercentage(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DataLabels_GetShowBubbleSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetShowBubbleSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DataLabels_GetShowCategoryName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetShowCategoryName(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DataLabels_GetShowSeriesName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetShowSeriesName(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DataLabels_GetShowLegendKey(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetShowLegendKey(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* DataLabels_Get_NumberFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetNumberFormat(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* DataLabels_GetNumber(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetNumber(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* DataLabels_GetNumberFormatLinked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetNumberFormatLinked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_ApplyFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DataLabels_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DataLabels_GetSeparatorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetSeparatorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* DataLabels_GetSeparatorValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetSeparatorValue(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* DataLabels_GetPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* DataLabels_IsNeverOverlap(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetIsNeverOverlap(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* DataLabels_GetShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* DataLabels_IsInnerMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetIsInnerMode(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DataLabels_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetShadow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* DataLabels_GetShapeProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* DataLabels_IsDefaultPosBeSet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DataLabels_GetDefaultX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DataLabels_GetDefaultY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DataLabels_GetDefaultWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DataLabels_GetDefaultHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DataLabels_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* DataLabels_GetAutoScaleFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetAutoScaleFont(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DataLabels_IsAutomaticSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetIsAutomaticSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* DataLabels_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DataLabels_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DataLabels_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DataLabels_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetPositionAuto(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* DataLabels_IsDeleted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetIsDeleted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* DataLabels_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DataLabels_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DataLabels_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetRotationAngle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* DataLabels_IsAutomaticRotation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DataLabels_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_int_value* DataLabels_GetReadingOrder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetReadingOrder(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* DataLabels_IsResizeShapeToFitText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetIsResizeShapeToFitText(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* DataLabels_GetLinkedSource(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataLabels_SetLinkedSource(void* instance_ptr, char* value);


   ASPOSE_CELLS_API void Delete_DataLabels( void* instance_ptr);

   /**************Class DisplayUnitLabel *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_DisplayUnitLabel(void* src);

   ASPOSE_CELLS_API c_return_bool_value* DisplayUnitLabel_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* DisplayUnitLabel_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DisplayUnitLabel_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* DisplayUnitLabel_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* DisplayUnitLabel_GetAutoScaleFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DisplayUnitLabel_SetAutoScaleFont(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DisplayUnitLabel_IsInnerMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DisplayUnitLabel_SetIsInnerMode(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* DisplayUnitLabel_GetBackgroundMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DisplayUnitLabel_SetBackgroundMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* DisplayUnitLabel_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DisplayUnitLabel_SetShadow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* DisplayUnitLabel_GetShapeProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* DisplayUnitLabel_IsDefaultPosBeSet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DisplayUnitLabel_GetDefaultX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DisplayUnitLabel_GetDefaultY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DisplayUnitLabel_GetDefaultWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DisplayUnitLabel_GetDefaultHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DisplayUnitLabel_GetBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DisplayUnitLabel_GetArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DisplayUnitLabel_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* DisplayUnitLabel_IsAutomaticSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DisplayUnitLabel_SetIsAutomaticSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* DisplayUnitLabel_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DisplayUnitLabel_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DisplayUnitLabel_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DisplayUnitLabel_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DisplayUnitLabel_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DisplayUnitLabel_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DisplayUnitLabel_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DisplayUnitLabel_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* DisplayUnitLabel_SetPositionAuto(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* DisplayUnitLabel_IsDeleted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DisplayUnitLabel_SetIsDeleted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* DisplayUnitLabel_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DisplayUnitLabel_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DisplayUnitLabel_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DisplayUnitLabel_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DisplayUnitLabel_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DisplayUnitLabel_SetRotationAngle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* DisplayUnitLabel_IsAutomaticRotation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DisplayUnitLabel_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_int_value* DisplayUnitLabel_GetReadingOrder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DisplayUnitLabel_SetReadingOrder(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* DisplayUnitLabel_IsResizeShapeToFitText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DisplayUnitLabel_SetIsResizeShapeToFitText(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DisplayUnitLabel_IsAutoText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DisplayUnitLabel_SetIsAutoText(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* DisplayUnitLabel_GetLinkedSource(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DisplayUnitLabel_SetLinkedSource(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* DisplayUnitLabel_GetDirectionType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DisplayUnitLabel_SetDirectionType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* DisplayUnitLabel_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DisplayUnitLabel_SetIsTextWrapped(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_DisplayUnitLabel( void* instance_ptr);

   /**************Class DropBars *****************/


   ASPOSE_CELLS_API c_return_bool_value* DropBars_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DropBars_GetBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DropBars_GetArea(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_DropBars( void* instance_ptr);

   /**************Class ErrorBar *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ErrorBar(void* src);

   ASPOSE_CELLS_API c_return_bool_value* ErrorBar_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ErrorBar_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ErrorBar_GetDisplayType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetDisplayType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ErrorBar_GetAmount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetAmount(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_bool_value* ErrorBar_GetShowMarkerTTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetShowMarkerTTop(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* ErrorBar_GetPlusValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetPlusValue(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ErrorBar_GetMinusValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetMinusValue(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* ErrorBar_GetCompoundType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetCompoundType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ErrorBar_GetDashType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetDashType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ErrorBar_GetCapType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetCapType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ErrorBar_GetJoinType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetJoinType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ErrorBar_GetBeginType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetBeginType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ErrorBar_GetEndType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetEndType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ErrorBar_GetBeginArrowLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetBeginArrowLength(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ErrorBar_GetEndArrowLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetEndArrowLength(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ErrorBar_GetBeginArrowWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetBeginArrowWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ErrorBar_GetEndArrowWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetEndArrowWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ErrorBar_GetThemeColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetThemeColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* ErrorBar_GetColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_double_value* ErrorBar_GetTransparency(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetTransparency(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ErrorBar_GetStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ErrorBar_GetWeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetWeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* ErrorBar_GetWeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetWeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* ErrorBar_GetWeightPx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetWeightPx(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* ErrorBar_GetFormattingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetFormattingType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ErrorBar_IsAutomaticColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ErrorBar_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ErrorBar_IsAuto(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ErrorBar_SetIsAuto(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ErrorBar_GetGradientFill(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ErrorBar( void* instance_ptr);

   /**************Class Floor *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_Floor(void* src);

   ASPOSE_CELLS_API c_return_bool_value* Floor_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Floor_GetBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Floor_SetBorder(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Floor_GetBackgroundColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Floor_SetBackgroundColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Floor_GetForegroundColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Floor_SetForegroundColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* Floor_GetFormatting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Floor_SetFormatting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Floor_GetInvertIfNegative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Floor_SetInvertIfNegative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Floor_GetFillFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Floor_GetTransparency(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Floor_SetTransparency(void* instance_ptr, double value);


   ASPOSE_CELLS_API void Delete_Floor( void* instance_ptr);

   /**************Class Legend *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_Legend(void* src);

   ASPOSE_CELLS_API c_return_bool_value* Legend_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Legend_GetPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Legend_GetLegendEntries(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Legend_GetLegendLabels(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Legend_IsOverLay(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetIsOverLay(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Legend_IsInnerMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetIsInnerMode(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Legend_GetBackgroundMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetBackgroundMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Legend_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetShadow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Legend_GetShapeProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Legend_IsDefaultPosBeSet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Legend_GetDefaultX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Legend_GetDefaultY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Legend_GetDefaultWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Legend_GetDefaultHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Legend_GetBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Legend_GetArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Legend_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Legend_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Legend_GetAutoScaleFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetAutoScaleFont(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Legend_IsAutomaticSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetIsAutomaticSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Legend_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Legend_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Legend_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Legend_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetPositionAuto(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Legend_IsDeleted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetIsDeleted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Legend_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Legend_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Legend_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetRotationAngle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Legend_IsAutomaticRotation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Legend_Characters(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_int_value* Legend_GetReadingOrder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetReadingOrder(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Legend_IsResizeShapeToFitText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetIsResizeShapeToFitText(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Legend_IsAutoText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetIsAutoText(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* Legend_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Legend_GetLinkedSource(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetLinkedSource(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* Legend_GetDirectionType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetDirectionType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Legend_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Legend_SetIsTextWrapped(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_Legend( void* instance_ptr);

   /**************Class LegendEntry *****************/


   ASPOSE_CELLS_API c_return_bool_value* LegendEntry_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* LegendEntry_IsDeleted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LegendEntry_SetIsDeleted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* LegendEntry_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* LegendEntry_IsTextNoFill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LegendEntry_SetIsTextNoFill(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* LegendEntry_GetAutoScaleFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LegendEntry_SetAutoScaleFont(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* LegendEntry_GetBackgroundMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* LegendEntry_SetBackgroundMode(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_LegendEntry( void* instance_ptr);

   /**************Class LegendEntryCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* LegendEntryCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* LegendEntryCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* LegendEntryCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_LegendEntryCollection( void* instance_ptr);

   /**************Class Marker *****************/


   ASPOSE_CELLS_API c_return_bool_value* Marker_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Marker_GetBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Marker_GetArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Marker_GetMarkerStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Marker_SetMarkerStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Marker_GetMarkerSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Marker_SetMarkerSize(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Marker_GetMarkerSizePx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Marker_SetMarkerSizePx(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Marker_GetForegroundColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Marker_SetForegroundColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* Marker_GetForegroundColorSetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Marker_SetForegroundColorSetType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Marker_GetBackgroundColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Marker_SetBackgroundColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* Marker_GetBackgroundColorSetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Marker_SetBackgroundColorSetType(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_Marker( void* instance_ptr);

   /**************Class PivotOptions *****************/


   ASPOSE_CELLS_API c_return_bool_value* PivotOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PivotOptions_GetDropZoneFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotOptions_SetDropZoneFilter(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotOptions_GetDropZoneCategories(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotOptions_SetDropZoneCategories(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotOptions_GetDropZoneData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotOptions_SetDropZoneData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotOptions_GetDropZoneSeries(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotOptions_SetDropZoneSeries(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotOptions_GetDropZonesVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotOptions_SetDropZonesVisible(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_PivotOptions( void* instance_ptr);

   /**************Class PlotArea *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PlotArea(void* src);

   ASPOSE_CELLS_API c_return_bool_value* PlotArea_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PlotArea_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PlotArea_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PlotArea_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PlotArea_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PlotArea_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PlotArea_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PlotArea_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PlotArea_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PlotArea_GetInnerX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PlotArea_SetInnerX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PlotArea_GetInnerY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PlotArea_SetInnerY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PlotArea_GetInnerHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PlotArea_SetInnerHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PlotArea_GetInnerWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PlotArea_SetInnerWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* PlotArea_SetPositionAuto(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PlotArea_IsAutomaticSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PlotArea_SetIsAutomaticSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PlotArea_IsInnerMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PlotArea_SetIsInnerMode(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* PlotArea_GetBackgroundMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PlotArea_SetBackgroundMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* PlotArea_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PlotArea_SetShadow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* PlotArea_GetShapeProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PlotArea_IsDefaultPosBeSet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PlotArea_GetDefaultX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PlotArea_GetDefaultY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PlotArea_GetDefaultWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PlotArea_GetDefaultHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PlotArea_GetBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PlotArea_GetArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PlotArea_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PlotArea_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PlotArea_GetAutoScaleFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PlotArea_SetAutoScaleFont(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_PlotArea( void* instance_ptr);

   /**************Class Series *****************/


   ASPOSE_CELLS_API c_return_bool_value* Series_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Series_IsFiltered(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetIsFiltered(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Series_GetLayoutProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_Move(void* instance_ptr, int count);
   ASPOSE_CELLS_API c_return_ptr_value* Series_GetPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Series_GetArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Series_GetBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Series_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Series_GetDisplayName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Series_GetCountOfDataValues(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Series_IsVerticalValues(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Series_GetValues(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetValues(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Series_GetValuesFormatCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetValuesFormatCode(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Series_GetXValuesFormatCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetXValuesFormatCode(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Series_GetXValues(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetXValues(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Series_GetBubbleSizes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetBubbleSizes(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* Series_GetTrendLines(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Series_GetSmooth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetSmooth(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Series_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetShadow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Series_GetHas3DEffect(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetHas3DEffect(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Series_GetBar3DShapeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetBar3DShapeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Series_GetDataLabels(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Series_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Series_GetMarker(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Series_GetPlotOnSecondAxis(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetPlotOnSecondAxis(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Series_GetXErrorBar(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Series_GetYErrorBar(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Series_GetHasHiLoLines(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetHasHiLoLines(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Series_GetHiLoLines(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Series_GetHasSeriesLines(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetHasSeriesLines(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Series_GetSeriesLines(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Series_GetHasDropLines(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetHasDropLines(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Series_GetDropLines(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Series_GetHasUpDownBars(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetHasUpDownBars(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Series_GetUpBars(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Series_GetDownBars(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Series_IsColorVaried(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetIsColorVaried(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Series_GetGapWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetGapWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Series_GetFirstSliceAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetFirstSliceAngle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Series_GetOverlap(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetOverlap(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Series_GetSecondPlotSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetSecondPlotSize(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Series_GetSplitType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetSplitType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Series_GetSplitValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetSplitValue(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_bool_value* Series_IsAutoSplit(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Series_GetBubbleScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetBubbleScale(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Series_GetSizeRepresents(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetSizeRepresents(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Series_GetShowNegativeBubbles(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetShowNegativeBubbles(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Series_GetDoughnutHoleSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetDoughnutHoleSize(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Series_GetExplosion(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetExplosion(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Series_GetHasRadarAxisLabels(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetHasRadarAxisLabels(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Series_GetHasLeaderLines(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Series_SetHasLeaderLines(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Series_GetLeaderLines(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Series_GetLegendEntry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Series_GetShapeProperties(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_Series( void* instance_ptr);

   /**************Class SeriesCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* SeriesCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SeriesCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* SeriesCollection_GetSeriesByOrder(void* instance_ptr, int order);
   ASPOSE_CELLS_API c_return_void_value* SeriesCollection_RemoveAt(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_string_value* SeriesCollection_GetCategoryData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SeriesCollection_SetCategoryData(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* SeriesCollection_GetSecondCategoryData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SeriesCollection_SetSecondCategoryData(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* SeriesCollection_SwapSeries(void* instance_ptr, int sourceindex, int destindex);
   ASPOSE_CELLS_API c_return_void_value* SeriesCollection_SetSeriesNames(void* instance_ptr, int startindex, char* area, bool isvertical);
   ASPOSE_CELLS_API c_return_int_value* SeriesCollection_AddR1C1(void* instance_ptr, char* area, bool isvertical);
   ASPOSE_CELLS_API c_return_int_value* SeriesCollection_Add_String_Boolean(void* instance_ptr, char* area, bool isvertical);
   ASPOSE_CELLS_API c_return_int_value* SeriesCollection_Add_String_Boolean_Boolean(void* instance_ptr, char* area, bool isvertical, bool checklabels);
   ASPOSE_CELLS_API c_return_bool_value* SeriesCollection_IsColorVaried(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SeriesCollection_SetIsColorVaried(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* SeriesCollection_Clear(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SeriesCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_SeriesCollection( void* instance_ptr);

   /**************Class SeriesLayoutProperties *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_SeriesLayoutProperties();

   ASPOSE_CELLS_API c_return_bool_value* SeriesLayoutProperties_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* SeriesLayoutProperties_GetShowConnectorLines(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SeriesLayoutProperties_SetShowConnectorLines(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SeriesLayoutProperties_GetShowMeanLine(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SeriesLayoutProperties_SetShowMeanLine(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SeriesLayoutProperties_GetShowOutlierPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SeriesLayoutProperties_SetShowOutlierPoints(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SeriesLayoutProperties_GetShowMeanMarker(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SeriesLayoutProperties_SetShowMeanMarker(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SeriesLayoutProperties_GetShowInnerPoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SeriesLayoutProperties_SetShowInnerPoints(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* SeriesLayoutProperties_GetSubtotals(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SeriesLayoutProperties_SetSubtotals(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_int_value* SeriesLayoutProperties_GetQuartileCalculation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SeriesLayoutProperties_SetQuartileCalculation(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SeriesLayoutProperties_GetMapLabelLayout(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SeriesLayoutProperties_SetMapLabelLayout(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* SeriesLayoutProperties_IsIntervalLeftClosed(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SeriesLayoutProperties_SetIsIntervalLeftClosed(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* SeriesLayoutProperties_GetMapChartRegionType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SeriesLayoutProperties_SetMapChartRegionType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SeriesLayoutProperties_GetMapChartProjectionType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SeriesLayoutProperties_SetMapChartProjectionType(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_SeriesLayoutProperties( void* instance_ptr);

   /**************Class Sparkline *****************/


   ASPOSE_CELLS_API c_return_bool_value* Sparkline_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Sparkline_GetDataRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Sparkline_SetDataRange(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* Sparkline_GetRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Sparkline_GetColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Sparkline_ToImage_String_ImageOrPrintOptions(void* instance_ptr, char* filename, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* Sparkline_ToImage_ImageOrPrintOptions(void* instance_ptr, void* options);


   ASPOSE_CELLS_API void Delete_Sparkline( void* instance_ptr);

   /**************Class SparklineCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* SparklineCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SparklineCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* SparklineCollection_Add(void* instance_ptr, char* datarange, int row, int column);
   ASPOSE_CELLS_API c_return_void_value* SparklineCollection_Remove(void* instance_ptr, void* o);
   ASPOSE_CELLS_API c_return_int_value* SparklineCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_SparklineCollection( void* instance_ptr);

   /**************Class SparklineGroup *****************/


   ASPOSE_CELLS_API c_return_bool_value* SparklineGroup_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_ResetRanges(void* instance_ptr, char* datarange, bool isvertical, void* locationrange);
   ASPOSE_CELLS_API c_return_int_value* SparklineGroup_GetPresetStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetPresetStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* SparklineGroup_GetSparklines(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SparklineGroup_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SparklineGroup_GetPlotEmptyCellsType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetPlotEmptyCellsType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* SparklineGroup_GetDisplayHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetDisplayHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SparklineGroup_GetShowHighPoint(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetShowHighPoint(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* SparklineGroup_GetHighPointColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetHighPointColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* SparklineGroup_GetShowLowPoint(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetShowLowPoint(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* SparklineGroup_GetLowPointColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetLowPointColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* SparklineGroup_GetShowNegativePoints(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetShowNegativePoints(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* SparklineGroup_GetNegativePointsColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetNegativePointsColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* SparklineGroup_GetShowFirstPoint(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetShowFirstPoint(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* SparklineGroup_GetFirstPointColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetFirstPointColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* SparklineGroup_GetShowLastPoint(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetShowLastPoint(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* SparklineGroup_GetLastPointColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetLastPointColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* SparklineGroup_GetShowMarkers(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetShowMarkers(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* SparklineGroup_GetMarkersColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetMarkersColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* SparklineGroup_GetSeriesColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetSeriesColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* SparklineGroup_GetPlotRightToLeft(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetPlotRightToLeft(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_double_value* SparklineGroup_GetLineWeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetLineWeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* SparklineGroup_GetHorizontalAxisColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetHorizontalAxisColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* SparklineGroup_GetShowHorizontalAxis(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetShowHorizontalAxis(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* SparklineGroup_GetHorizontalAxisDateRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetHorizontalAxisDateRange(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* SparklineGroup_GetVerticalAxisMaxValueType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetVerticalAxisMaxValueType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* SparklineGroup_GetVerticalAxisMaxValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetVerticalAxisMaxValue(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* SparklineGroup_GetVerticalAxisMinValueType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetVerticalAxisMinValueType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* SparklineGroup_GetVerticalAxisMinValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroup_SetVerticalAxisMinValue(void* instance_ptr, double value);


   ASPOSE_CELLS_API void Delete_SparklineGroup( void* instance_ptr);

   /**************Class SparklineGroupCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* SparklineGroupCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SparklineGroupCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* SparklineGroupCollection_Add_SparklineType(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_int_value* SparklineGroupCollection_Add_SparklineType_String_Boolean_CellArea(void* instance_ptr, int type_, char* datarange, bool isvertical, void* locationrange);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroupCollection_ClearSparklines(void* instance_ptr, void* cellarea);
   ASPOSE_CELLS_API c_return_void_value* SparklineGroupCollection_ClearSparklineGroups(void* instance_ptr, void* cellarea);
   ASPOSE_CELLS_API c_return_int_value* SparklineGroupCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_SparklineGroupCollection( void* instance_ptr);

   /**************Class TickLabelItem *****************/


   ASPOSE_CELLS_API c_return_bool_value* TickLabelItem_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* TickLabelItem_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* TickLabelItem_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* TickLabelItem_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* TickLabelItem_GetHeight(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_TickLabelItem( void* instance_ptr);

   /**************Class TickLabels *****************/


   ASPOSE_CELLS_API c_return_bool_value* TickLabels_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TickLabels_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* TickLabels_GetAutoScaleFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TickLabels_SetAutoScaleFont(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* TickLabels_GetBackgroundMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TickLabels_SetBackgroundMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TickLabels_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TickLabels_SetRotationAngle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* TickLabels_IsAutomaticRotation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TickLabels_SetIsAutomaticRotation(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* TickLabels_Get_NumberFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TickLabels_SetNumberFormat(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* TickLabels_GetNumber(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TickLabels_SetNumber(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* TickLabels_GetNumberFormatLinked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TickLabels_SetNumberFormatLinked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* TickLabels_GetDisplayNumberFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TickLabels_GetOffset(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TickLabels_SetOffset(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TickLabels_GetReadingOrder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TickLabels_SetReadingOrder(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TickLabels_GetDirectionType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TickLabels_SetDirectionType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* TickLabels_GetTickLabelItems(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TickLabels_GetAlignmentType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TickLabels_SetAlignmentType(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_TickLabels( void* instance_ptr);

   /**************Class Title *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_Title(void* src);

   ASPOSE_CELLS_API c_return_bool_value* Title_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Title_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Title_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Title_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Title_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Title_GetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Title_SetX(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Title_GetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Title_SetY(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Title_GetOverLay(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Title_SetOverLay(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Title_Characters(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Title_Characters_Integer_Integer(void* instance_ptr, int startindex, int length);
   ASPOSE_CELLS_API c_return_bool_value* Title_IsInnerMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Title_SetIsInnerMode(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Title_GetBackgroundMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Title_SetBackgroundMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Title_GetShadow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Title_SetShadow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Title_GetShapeProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Title_IsDefaultPosBeSet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Title_GetDefaultX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Title_GetDefaultY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Title_GetDefaultWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Title_GetDefaultHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Title_GetBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Title_GetArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Title_GetTextOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Title_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Title_GetAutoScaleFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Title_SetAutoScaleFont(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Title_IsAutomaticSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Title_SetIsAutomaticSize(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Title_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Title_SetHeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Title_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Title_SetWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* Title_SetPositionAuto(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Title_IsDeleted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Title_SetIsDeleted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Title_GetTextHorizontalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Title_SetTextHorizontalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Title_GetTextVerticalAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Title_SetTextVerticalAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Title_GetRotationAngle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Title_SetRotationAngle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Title_IsAutomaticRotation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Title_GetReadingOrder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Title_SetReadingOrder(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Title_IsResizeShapeToFitText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Title_SetIsResizeShapeToFitText(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Title_IsAutoText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Title_SetIsAutoText(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* Title_GetLinkedSource(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Title_SetLinkedSource(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* Title_GetDirectionType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Title_SetDirectionType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Title_IsTextWrapped(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Title_SetIsTextWrapped(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_Title( void* instance_ptr);

   /**************Class Trendline *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_Trendline(void* src);

   ASPOSE_CELLS_API c_return_bool_value* Trendline_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Trendline_IsNameAuto(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetIsNameAuto(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Trendline_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Trendline_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* Trendline_GetOrder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetOrder(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Trendline_GetPeriod(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetPeriod(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Trendline_GetForward(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetForward(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Trendline_GetBackward(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetBackward(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_bool_value* Trendline_GetDisplayEquation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetDisplayEquation(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Trendline_GetDisplayRSquared(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetDisplayRSquared(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_double_value* Trendline_GetIntercept(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetIntercept(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* Trendline_GetDataLabels(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Trendline_GetLegendEntry(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Trendline_GetCompoundType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetCompoundType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Trendline_GetDashType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetDashType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Trendline_GetCapType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetCapType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Trendline_GetJoinType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetJoinType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Trendline_GetBeginType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetBeginType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Trendline_GetEndType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetEndType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Trendline_GetBeginArrowLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetBeginArrowLength(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Trendline_GetEndArrowLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetEndArrowLength(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Trendline_GetBeginArrowWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetBeginArrowWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Trendline_GetEndArrowWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetEndArrowWidth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* Trendline_GetThemeColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetThemeColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Trendline_GetColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_double_value* Trendline_GetTransparency(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetTransparency(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Trendline_GetStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetStyle(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Trendline_GetWeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetWeight(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Trendline_GetWeightPt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetWeightPt(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_double_value* Trendline_GetWeightPx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetWeightPx(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Trendline_GetFormattingType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetFormattingType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Trendline_IsAutomaticColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* Trendline_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Trendline_IsAuto(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Trendline_SetIsAuto(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Trendline_GetGradientFill(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_Trendline( void* instance_ptr);

   /**************Class TrendlineCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* TrendlineCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TrendlineCollection_Add_TrendlineType(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_int_value* TrendlineCollection_Add_TrendlineType_String(void* instance_ptr, int type_, char* name);
   ASPOSE_CELLS_API c_return_ptr_value* TrendlineCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* TrendlineCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_TrendlineCollection( void* instance_ptr);

   /**************Class Walls *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_Walls(void* src);

   ASPOSE_CELLS_API c_return_bool_value* Walls_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Walls_GetCenterX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Walls_GetCenterY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Walls_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Walls_GetDepth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Walls_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Walls_GetCenterXPx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Walls_GetCenterYPx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Walls_GetWidthPx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Walls_GetDepthPx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Walls_GetHeightPx(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Walls_GetCubePointCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_float_value* Walls_GetCubePointXPx(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_float_value* Walls_GetCubePointYPx(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* Walls_GetBackgroundColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Walls_SetBackgroundColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* Walls_GetForegroundColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Walls_SetForegroundColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* Walls_GetFormatting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Walls_SetFormatting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Walls_GetInvertIfNegative(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Walls_SetInvertIfNegative(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* Walls_GetFillFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* Walls_GetTransparency(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Walls_SetTransparency(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_ptr_value* Walls_GetBorder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Walls_SetBorder(void* instance_ptr, void* value);


   ASPOSE_CELLS_API void Delete_Walls( void* instance_ptr);

   /**************Class BuiltInDocumentPropertyCollection *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_BuiltInDocumentPropertyCollection(void* src);

   ASPOSE_CELLS_API c_return_bool_value* BuiltInDocumentPropertyCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* BuiltInDocumentPropertyCollection_Get_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_ptr_value* BuiltInDocumentPropertyCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_string_value* BuiltInDocumentPropertyCollection_GetLanguage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetLanguage(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* BuiltInDocumentPropertyCollection_GetAuthor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetAuthor(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* BuiltInDocumentPropertyCollection_GetComments(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetComments(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* BuiltInDocumentPropertyCollection_GetCategory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetCategory(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* BuiltInDocumentPropertyCollection_GetContentType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetContentType(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* BuiltInDocumentPropertyCollection_GetContentStatus(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetContentStatus(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* BuiltInDocumentPropertyCollection_GetCompany(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetCompany(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* BuiltInDocumentPropertyCollection_GetHyperlinkBase(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetHyperlinkBase(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* BuiltInDocumentPropertyCollection_GetCreatedTime(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetCreatedTime(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* BuiltInDocumentPropertyCollection_GetCreatedUniversalTime(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetCreatedUniversalTime(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* BuiltInDocumentPropertyCollection_GetKeywords(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetKeywords(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* BuiltInDocumentPropertyCollection_GetLastPrinted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetLastPrinted(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* BuiltInDocumentPropertyCollection_GetLastPrintedUniversalTime(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetLastPrintedUniversalTime(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* BuiltInDocumentPropertyCollection_GetLastSavedBy(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetLastSavedBy(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* BuiltInDocumentPropertyCollection_GetLastSavedTime(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetLastSavedTime(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* BuiltInDocumentPropertyCollection_GetLastSavedUniversalTime(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetLastSavedUniversalTime(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* BuiltInDocumentPropertyCollection_GetManager(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetManager(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* BuiltInDocumentPropertyCollection_GetNameOfApplication(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetNameOfApplication(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* BuiltInDocumentPropertyCollection_GetPages(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetPages(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* BuiltInDocumentPropertyCollection_GetRevisionNumber(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetRevisionNumber(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* BuiltInDocumentPropertyCollection_GetSubject(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetSubject(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* BuiltInDocumentPropertyCollection_GetTemplate(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetTemplate(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* BuiltInDocumentPropertyCollection_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_double_value* BuiltInDocumentPropertyCollection_GetTotalEditingTime(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetTotalEditingTime(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_string_value* BuiltInDocumentPropertyCollection_GetVersion(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetVersion(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* BuiltInDocumentPropertyCollection_GetDocumentVersion(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetDocumentVersion(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* BuiltInDocumentPropertyCollection_GetScaleCrop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetScaleCrop(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* BuiltInDocumentPropertyCollection_GetLinksUpToDate(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetLinksUpToDate(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* BuiltInDocumentPropertyCollection_GetWords(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_SetWords(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* BuiltInDocumentPropertyCollection_Contains(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_int_value* BuiltInDocumentPropertyCollection_IndexOf(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_Remove(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_void_value* BuiltInDocumentPropertyCollection_RemoveAt(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* BuiltInDocumentPropertyCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_BuiltInDocumentPropertyCollection( void* instance_ptr);

   /**************Class ContentTypeProperty *****************/


   ASPOSE_CELLS_API c_return_bool_value* ContentTypeProperty_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ContentTypeProperty_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ContentTypeProperty_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ContentTypeProperty_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ContentTypeProperty_SetValue(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ContentTypeProperty_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ContentTypeProperty_SetType(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* ContentTypeProperty_IsNillable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ContentTypeProperty_SetIsNillable(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_ContentTypeProperty( void* instance_ptr);

   /**************Class ContentTypePropertyCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ContentTypePropertyCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ContentTypePropertyCollection_Add_String_String(void* instance_ptr, char* name, char* value);
   ASPOSE_CELLS_API c_return_int_value* ContentTypePropertyCollection_Add_String_String_String(void* instance_ptr, char* name, char* value, char* type_);
   ASPOSE_CELLS_API c_return_ptr_value* ContentTypePropertyCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* ContentTypePropertyCollection_Get_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_int_value* ContentTypePropertyCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ContentTypePropertyCollection( void* instance_ptr);

   /**************Class CustomDocumentPropertyCollection *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_CustomDocumentPropertyCollection(void* src);

   ASPOSE_CELLS_API c_return_bool_value* CustomDocumentPropertyCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomDocumentPropertyCollection_Add_String_String(void* instance_ptr, char* name, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* CustomDocumentPropertyCollection_Add_String_Integer(void* instance_ptr, char* name, int value);
   ASPOSE_CELLS_API c_return_ptr_value* CustomDocumentPropertyCollection_Add_String_Date(void* instance_ptr, char* name, void* value);
   ASPOSE_CELLS_API c_return_ptr_value* CustomDocumentPropertyCollection_Add_String_Boolean(void* instance_ptr, char* name, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* CustomDocumentPropertyCollection_Add_String_Double(void* instance_ptr, char* name, double value);
   ASPOSE_CELLS_API c_return_ptr_value* CustomDocumentPropertyCollection_AddLinkToContent(void* instance_ptr, char* name, char* source);
   ASPOSE_CELLS_API c_return_void_value* CustomDocumentPropertyCollection_UpdateLinkedPropertyValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomDocumentPropertyCollection_UpdateLinkedRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomDocumentPropertyCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_bool_value* CustomDocumentPropertyCollection_Contains(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_int_value* CustomDocumentPropertyCollection_IndexOf(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_void_value* CustomDocumentPropertyCollection_Remove(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_void_value* CustomDocumentPropertyCollection_RemoveAt(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* CustomDocumentPropertyCollection_Get_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_int_value* CustomDocumentPropertyCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_CustomDocumentPropertyCollection( void* instance_ptr);

   /**************Class CustomProperty *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_CustomProperty();

   ASPOSE_CELLS_API c_return_bool_value* CustomProperty_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* CustomProperty_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomProperty_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* CustomProperty_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomProperty_SetValue(void* instance_ptr, char* value);


   ASPOSE_CELLS_API void Delete_CustomProperty( void* instance_ptr);

   /**************Class CustomPropertyCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* CustomPropertyCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CustomPropertyCollection_Add(void* instance_ptr, char* name, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* CustomPropertyCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* CustomPropertyCollection_Get_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_int_value* CustomPropertyCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_CustomPropertyCollection( void* instance_ptr);

   /**************Class DocumentProperty *****************/


   ASPOSE_CELLS_API c_return_bool_value* DocumentProperty_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* DocumentProperty_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DocumentProperty_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DocumentProperty_SetValue(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* DocumentProperty_IsLinkedToContent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* DocumentProperty_GetSource(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DocumentProperty_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* DocumentProperty_IsGeneratedName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* DocumentProperty_ToString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DocumentProperty_ToInt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* DocumentProperty_ToDouble(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DocumentProperty_ToDateTime(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* DocumentProperty_ToBool(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_DocumentProperty( void* instance_ptr);

   /**************Class DocumentPropertyCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* DocumentPropertyCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DocumentPropertyCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_bool_value* DocumentPropertyCollection_Contains(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_int_value* DocumentPropertyCollection_IndexOf(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_void_value* DocumentPropertyCollection_Remove(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_void_value* DocumentPropertyCollection_RemoveAt(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* DocumentPropertyCollection_Get_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_int_value* DocumentPropertyCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_DocumentPropertyCollection( void* instance_ptr);

   /**************Class ConnectionParameter *****************/


   ASPOSE_CELLS_API c_return_bool_value* ConnectionParameter_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ConnectionParameter_GetSqlType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ConnectionParameter_SetSqlType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ConnectionParameter_GetRefreshOnChange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ConnectionParameter_SetRefreshOnChange(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* ConnectionParameter_GetPrompt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ConnectionParameter_SetPrompt(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* ConnectionParameter_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ConnectionParameter_SetType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* ConnectionParameter_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ConnectionParameter_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ConnectionParameter_GetCellReference(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ConnectionParameter_SetCellReference(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* ConnectionParameter_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ConnectionParameter_SetValue(void* instance_ptr, void* value);


   ASPOSE_CELLS_API void Delete_ConnectionParameter( void* instance_ptr);

   /**************Class ConnectionParameterCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ConnectionParameterCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ConnectionParameterCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* ConnectionParameterCollection_Set(void* instance_ptr, void* value, int index);
   ASPOSE_CELLS_API c_return_ptr_value* ConnectionParameterCollection_Get_String(void* instance_ptr, char* connparamname);
   ASPOSE_CELLS_API c_return_int_value* ConnectionParameterCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ConnectionParameterCollection( void* instance_ptr);

   /**************Class DataModelConnection *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_DataModelConnection(void* src);

   ASPOSE_CELLS_API c_return_bool_value* DataModelConnection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DataModelConnection_GetClassType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* DataModelConnection_GetCommand(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataModelConnection_SetCommand(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* DataModelConnection_GetCommandType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataModelConnection_SetCommandType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* DataModelConnection_GetConnectionString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataModelConnection_SetConnectionString(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* DataModelConnection_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DataModelConnection_GetSourceType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataModelConnection_SetSourceType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* DataModelConnection_GetSSOId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataModelConnection_SetSSOId(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* DataModelConnection_GetSavePassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataModelConnection_SetSavePassword(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DataModelConnection_GetSaveData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataModelConnection_SetSaveData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DataModelConnection_GetRefreshOnLoad(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataModelConnection_SetRefreshOnLoad(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* DataModelConnection_GetReconnectionMethodType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataModelConnection_SetReconnectionMethodType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* DataModelConnection_GetOnlyUseConnectionFile(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataModelConnection_SetOnlyUseConnectionFile(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* DataModelConnection_GetOdcFile(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataModelConnection_SetOdcFile(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* DataModelConnection_GetSourceFile(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataModelConnection_SetSourceFile(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* DataModelConnection_IsNew(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataModelConnection_SetIsNew(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* DataModelConnection_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataModelConnection_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* DataModelConnection_GetKeepAlive(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataModelConnection_SetKeepAlive(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* DataModelConnection_GetRefreshInternal(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataModelConnection_SetRefreshInternal(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* DataModelConnection_GetConnectionDescription(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataModelConnection_SetConnectionDescription(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* DataModelConnection_IsDeleted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataModelConnection_SetIsDeleted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* DataModelConnection_GetCredentialsMethodType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataModelConnection_SetCredentialsMethodType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* DataModelConnection_GetBackgroundRefresh(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataModelConnection_SetBackgroundRefresh(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* DataModelConnection_GetParameters(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DataModelConnection_GetPowerQueryFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* DataModelConnection_GetConnectionFile(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* DataModelConnection_GetSecondCommand(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DataModelConnection_SetSecondCommand(void* instance_ptr, char* value);


   ASPOSE_CELLS_API void Delete_DataModelConnection( void* instance_ptr);

   /**************Class DBConnection *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_DBConnection(void* src);

   ASPOSE_CELLS_API c_return_bool_value* DBConnection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DBConnection_GetClassType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* DBConnection_GetConnectionString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DBConnection_SetConnectionString(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* DBConnection_GetPowerQueryFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DBConnection_GetCommandType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DBConnection_SetCommandType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* DBConnection_GetCommand(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DBConnection_SetCommand(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* DBConnection_GetSecondCommand(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DBConnection_SetSecondCommand(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* DBConnection_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DBConnection_GetSourceType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DBConnection_SetSourceType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* DBConnection_GetSSOId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DBConnection_SetSSOId(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* DBConnection_GetSavePassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DBConnection_SetSavePassword(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DBConnection_GetSaveData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DBConnection_SetSaveData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DBConnection_GetRefreshOnLoad(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DBConnection_SetRefreshOnLoad(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* DBConnection_GetReconnectionMethodType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DBConnection_SetReconnectionMethodType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* DBConnection_GetOnlyUseConnectionFile(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DBConnection_SetOnlyUseConnectionFile(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* DBConnection_GetOdcFile(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DBConnection_SetOdcFile(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* DBConnection_GetSourceFile(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DBConnection_SetSourceFile(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* DBConnection_IsNew(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DBConnection_SetIsNew(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* DBConnection_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DBConnection_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* DBConnection_GetKeepAlive(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DBConnection_SetKeepAlive(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* DBConnection_GetRefreshInternal(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DBConnection_SetRefreshInternal(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* DBConnection_GetConnectionDescription(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DBConnection_SetConnectionDescription(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* DBConnection_IsDeleted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DBConnection_SetIsDeleted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* DBConnection_GetCredentialsMethodType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DBConnection_SetCredentialsMethodType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* DBConnection_GetBackgroundRefresh(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DBConnection_SetBackgroundRefresh(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* DBConnection_GetParameters(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* DBConnection_GetConnectionFile(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_DBConnection( void* instance_ptr);

   /**************Class ExternalConnection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ExternalConnection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ExternalConnection_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ExternalConnection_GetSourceType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalConnection_SetSourceType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* ExternalConnection_GetSSOId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalConnection_SetSSOId(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* ExternalConnection_GetSavePassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalConnection_SetSavePassword(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ExternalConnection_GetSaveData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalConnection_SetSaveData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ExternalConnection_GetRefreshOnLoad(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalConnection_SetRefreshOnLoad(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ExternalConnection_GetReconnectionMethodType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalConnection_SetReconnectionMethodType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ExternalConnection_GetOnlyUseConnectionFile(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalConnection_SetOnlyUseConnectionFile(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* ExternalConnection_GetOdcFile(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalConnection_SetOdcFile(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ExternalConnection_GetSourceFile(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalConnection_SetSourceFile(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* ExternalConnection_IsNew(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalConnection_SetIsNew(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* ExternalConnection_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalConnection_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* ExternalConnection_GetKeepAlive(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalConnection_SetKeepAlive(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ExternalConnection_GetRefreshInternal(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalConnection_SetRefreshInternal(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* ExternalConnection_GetConnectionDescription(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalConnection_SetConnectionDescription(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* ExternalConnection_IsDeleted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalConnection_SetIsDeleted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ExternalConnection_GetCredentialsMethodType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalConnection_SetCredentialsMethodType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ExternalConnection_GetBackgroundRefresh(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalConnection_SetBackgroundRefresh(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ExternalConnection_GetParameters(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ExternalConnection_GetClassType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ExternalConnection_GetPowerQueryFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ExternalConnection_GetConnectionFile(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ExternalConnection_GetCommand(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalConnection_SetCommand(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* ExternalConnection_GetCommandType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalConnection_SetCommandType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* ExternalConnection_GetConnectionString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalConnection_SetConnectionString(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ExternalConnection_GetSecondCommand(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalConnection_SetSecondCommand(void* instance_ptr, char* value);


   ASPOSE_CELLS_API void Delete_ExternalConnection( void* instance_ptr);

   /**************Class ExternalConnectionCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ExternalConnectionCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ExternalConnectionCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* ExternalConnectionCollection_Set(void* instance_ptr, void* value, int index);
   ASPOSE_CELLS_API c_return_ptr_value* ExternalConnectionCollection_Get_String(void* instance_ptr, char* connectionname);
   ASPOSE_CELLS_API c_return_ptr_value* ExternalConnectionCollection_GetExternalConnectionById(void* instance_ptr, int connid);
   ASPOSE_CELLS_API c_return_int_value* ExternalConnectionCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ExternalConnectionCollection( void* instance_ptr);

   /**************Class WebQueryConnection *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_WebQueryConnection(void* src);

   ASPOSE_CELLS_API c_return_bool_value* WebQueryConnection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* WebQueryConnection_GetClassType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* WebQueryConnection_IsXml(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetIsXml(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WebQueryConnection_IsXl97(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetIsXl97(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WebQueryConnection_IsXl2000(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetIsXl2000(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* WebQueryConnection_GetUrl(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetUrl(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* WebQueryConnection_GetConnectionFile(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* WebQueryConnection_IsTextDates(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetIsTextDates(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WebQueryConnection_IsXmlSourceData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetIsXmlSourceData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* WebQueryConnection_GetPost(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetPost(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* WebQueryConnection_IsParsePre(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetIsParsePre(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WebQueryConnection_IsHtmlTables(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetIsHtmlTables(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* WebQueryConnection_GetHtmlFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetHtmlFormat(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* WebQueryConnection_IsSameSettings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetIsSameSettings(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* WebQueryConnection_GetEditWebPage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetEditWebPage(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* WebQueryConnection_IsConsecutive(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetIsConsecutive(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* WebQueryConnection_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* WebQueryConnection_GetSourceType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetSourceType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* WebQueryConnection_GetSSOId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetSSOId(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* WebQueryConnection_GetSavePassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetSavePassword(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WebQueryConnection_GetSaveData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetSaveData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WebQueryConnection_GetRefreshOnLoad(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetRefreshOnLoad(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* WebQueryConnection_GetReconnectionMethodType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetReconnectionMethodType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* WebQueryConnection_GetOnlyUseConnectionFile(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetOnlyUseConnectionFile(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* WebQueryConnection_GetOdcFile(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetOdcFile(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* WebQueryConnection_GetSourceFile(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetSourceFile(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* WebQueryConnection_IsNew(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetIsNew(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* WebQueryConnection_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* WebQueryConnection_GetKeepAlive(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetKeepAlive(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* WebQueryConnection_GetRefreshInternal(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetRefreshInternal(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* WebQueryConnection_GetConnectionDescription(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetConnectionDescription(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* WebQueryConnection_IsDeleted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetIsDeleted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* WebQueryConnection_GetCredentialsMethodType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetCredentialsMethodType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* WebQueryConnection_GetBackgroundRefresh(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetBackgroundRefresh(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* WebQueryConnection_GetParameters(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebQueryConnection_GetPowerQueryFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* WebQueryConnection_GetCommand(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetCommand(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* WebQueryConnection_GetCommandType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetCommandType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* WebQueryConnection_GetConnectionString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetConnectionString(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* WebQueryConnection_GetSecondCommand(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebQueryConnection_SetSecondCommand(void* instance_ptr, char* value);


   ASPOSE_CELLS_API void Delete_WebQueryConnection( void* instance_ptr);

   /**************Class ConversionUtility *****************/


   ASPOSE_CELLS_API c_return_bool_value* ConversionUtility_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ConversionUtility_Convert_String_String(char* source, char* saveas);
   ASPOSE_CELLS_API c_return_void_value* ConversionUtility_Convert_String_LoadOptions_String_SaveOptions(char* source, void* loadoptions, char* saveas, void* saveoptions);


   ASPOSE_CELLS_API void Delete_ConversionUtility( void* instance_ptr);

   /**************Class ExportRangeToJsonOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ExportRangeToJsonOptions();

   ASPOSE_CELLS_API c_return_bool_value* ExportRangeToJsonOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ExportRangeToJsonOptions_GetHasHeaderRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExportRangeToJsonOptions_SetHasHeaderRow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ExportRangeToJsonOptions_GetExportAsString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExportRangeToJsonOptions_SetExportAsString(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ExportRangeToJsonOptions_GetExportEmptyCells(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExportRangeToJsonOptions_SetExportEmptyCells(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* ExportRangeToJsonOptions_GetIndent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExportRangeToJsonOptions_SetIndent(void* instance_ptr, char* value);


   ASPOSE_CELLS_API void Delete_ExportRangeToJsonOptions( void* instance_ptr);

   /**************Class JsonLayoutOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_JsonLayoutOptions();

   ASPOSE_CELLS_API c_return_bool_value* JsonLayoutOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* JsonLayoutOptions_GetArrayAsTable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLayoutOptions_SetArrayAsTable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* JsonLayoutOptions_GetIgnoreNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLayoutOptions_SetIgnoreNull(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* JsonLayoutOptions_GetIgnoreTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLayoutOptions_SetIgnoreTitle(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* JsonLayoutOptions_GetConvertNumericOrDate(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLayoutOptions_SetConvertNumericOrDate(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* JsonLayoutOptions_Get_NumberFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLayoutOptions_SetNumberFormat(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* JsonLayoutOptions_Get_DateFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLayoutOptions_SetDateFormat(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* JsonLayoutOptions_GetTitleStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLayoutOptions_SetTitleStyle(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* JsonLayoutOptions_GetKeptSchema(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* JsonLayoutOptions_SetKeptSchema(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_JsonLayoutOptions( void* instance_ptr);

   /**************Class JsonUtility *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_JsonUtility();

   ASPOSE_CELLS_API c_return_bool_value* JsonUtility_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* JsonUtility_ImportData(char* json, void* cells, int row, int column, void* option);
   ASPOSE_CELLS_API c_return_string_value* JsonUtility_ExportRangeToJson(void* range_, void* options);


   ASPOSE_CELLS_API void Delete_JsonUtility( void* instance_ptr);

   /**************Class CustomPiovtFieldGroupItem *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_CustomPiovtFieldGroupItem(char* name, void* itemindexes, int itemindexes_length);

   ASPOSE_CELLS_API c_return_bool_value* CustomPiovtFieldGroupItem_IsNull(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_CustomPiovtFieldGroupItem( void* instance_ptr);

   /**************Class PivotArea *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PivotArea(void* table);

   ASPOSE_CELLS_API c_return_bool_value* PivotArea_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotArea_GetFilters(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotArea_Select(void* instance_ptr, int axistype, int fieldposition, int selectiontype);
   ASPOSE_CELLS_API c_return_void_value* PivotArea_SelectField_PivotFieldType_String(void* instance_ptr, int axistype, char* fieldname);
   ASPOSE_CELLS_API c_return_void_value* PivotArea_SelectField_PivotFieldType_PivotField(void* instance_ptr, int axistype, void* field);
   ASPOSE_CELLS_API c_return_bool_value* PivotArea_GetOnlyData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotArea_SetOnlyData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotArea_GetOnlyLabel(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotArea_SetOnlyLabel(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotArea_IsRowGrandIncluded(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotArea_SetIsRowGrandIncluded(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotArea_IsColumnGrandIncluded(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotArea_SetIsColumnGrandIncluded(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* PivotArea_GetAxisType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotArea_SetAxisType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PivotArea_GetRuleType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotArea_SetRuleType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* PivotArea_IsOutline(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotArea_SetIsOutline(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* PivotArea_GetCellAreas(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PivotArea( void* instance_ptr);

   /**************Class PivotAreaCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* PivotAreaCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotAreaCollection_Add_PivotArea(void* instance_ptr, void* pivotarea);
   ASPOSE_CELLS_API c_return_void_value* PivotAreaCollection_RemoveAt(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* PivotAreaCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* PivotAreaCollection_Add_CellArea(void* instance_ptr, void* cellarea);
   ASPOSE_CELLS_API c_return_int_value* PivotAreaCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PivotAreaCollection( void* instance_ptr);

   /**************Class PivotAreaFilter *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PivotAreaFilter();

   ASPOSE_CELLS_API c_return_bool_value* PivotAreaFilter_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PivotAreaFilter_IsSubtotalSet(void* instance_ptr, int subtotaltype);
   ASPOSE_CELLS_API c_return_void_value* PivotAreaFilter_SetSubtotals(void* instance_ptr, int subtotaltype, bool shown);
   ASPOSE_CELLS_API c_return_bool_value* PivotAreaFilter_GetSelected(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotAreaFilter_SetSelected(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_PivotAreaFilter( void* instance_ptr);

   /**************Class PivotAreaFilterCollection *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PivotAreaFilterCollection();

   ASPOSE_CELLS_API c_return_bool_value* PivotAreaFilterCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotAreaFilterCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* PivotAreaFilterCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PivotAreaFilterCollection( void* instance_ptr);

   /**************Class PivotConditionalFormat *****************/


   ASPOSE_CELLS_API c_return_bool_value* PivotConditionalFormat_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotConditionalFormat_GetCellAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotConditionalFormat_GetPivotAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotConditionalFormat_AddCellArea(void* instance_ptr, void* ca);
   ASPOSE_CELLS_API c_return_void_value* PivotConditionalFormat_ApplyTo(void* instance_ptr, int row, int column, int scope);
   ASPOSE_CELLS_API c_return_void_value* PivotConditionalFormat_AddFieldArea_PivotFieldType_String(void* instance_ptr, int axistype, char* fieldname);
   ASPOSE_CELLS_API c_return_void_value* PivotConditionalFormat_AddFieldArea_PivotFieldType_PivotField(void* instance_ptr, int axistype, void* field);
   ASPOSE_CELLS_API c_return_ptr_value* PivotConditionalFormat_GetFormatConditions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotConditionalFormat_GetScopeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotConditionalFormat_SetScopeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PivotConditionalFormat_GetRuleType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotConditionalFormat_SetRuleType(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_PivotConditionalFormat( void* instance_ptr);

   /**************Class PivotConditionalFormatCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* PivotConditionalFormatCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotConditionalFormatCollection_Add(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotConditionalFormatCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* PivotConditionalFormatCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PivotConditionalFormatCollection( void* instance_ptr);

   /**************Class PivotDateTimeRangeGroupSettings *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PivotDateTimeRangeGroupSettings(void* src);

   ASPOSE_CELLS_API c_return_bool_value* PivotDateTimeRangeGroupSettings_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotDateTimeRangeGroupSettings_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotDateTimeRangeGroupSettings_GetStart(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotDateTimeRangeGroupSettings_GetEnd(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* PivotDateTimeRangeGroupSettings_GetInterval(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotDateTimeRangeGroupSettings_GetGroupByTypes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PivotDateTimeRangeGroupSettings_IsGroupedBy(void* instance_ptr, int type_);


   ASPOSE_CELLS_API void Delete_PivotDateTimeRangeGroupSettings( void* instance_ptr);

   /**************Class PivotDiscreteGroupSettings *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PivotDiscreteGroupSettings(void* src);

   ASPOSE_CELLS_API c_return_bool_value* PivotDiscreteGroupSettings_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotDiscreteGroupSettings_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotDiscreteGroupSettings_GetItems(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PivotDiscreteGroupSettings( void* instance_ptr);

   /**************Class PivotField *****************/


   ASPOSE_CELLS_API c_return_bool_value* PivotField_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotField_GetPivotItems(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotField_GetGroupSettings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_InitPivotItems(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_GroupBy_Double_Boolean(void* instance_ptr, double interval, bool newfield);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_GroupBy_Date_Date_PivotGroupByTypeArray_Double_Boolean(void* instance_ptr, void* start, void* end, void* groups, int groups_length, double interval, bool firstasnewfield);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_GroupBy_Double_Double_Double_Boolean(void* instance_ptr, double start, double end, double interval, bool newfield);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_GroupBy_CustomPiovtFieldGroupItemArray_Boolean(void* instance_ptr, void* customgroupitems, int customgroupitems_length, bool newfield);
   ASPOSE_CELLS_API c_return_void_value* PivotField_Ungroup(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotField_GetPivotFilterByType(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_ptr_value* PivotField_GetFilters(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_ClearFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotField_FilterTop10(void* instance_ptr, int valuefieldindex, int type_, bool istop, int itemcount);
   ASPOSE_CELLS_API c_return_ptr_value* PivotField_FilterByValue(void* instance_ptr, int valuefieldindex, int type_, double value1, double value2);
   ASPOSE_CELLS_API c_return_ptr_value* PivotField_FilterByLabel(void* instance_ptr, int type_, char* label1, char* label2);
   ASPOSE_CELLS_API c_return_ptr_value* PivotField_FilterByDate(void* instance_ptr, int type_, void* datetime1, void* datetime2);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_IsCalculatedField(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotField_GetFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_IsValueFields(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotField_GetBaseIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetBaseIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PivotField_GetPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotField_GetRegionType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotField_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* PivotField_GetDisplayName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetDisplayName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetSubtotals(void* instance_ptr, int subtotaltype, bool shown);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_GetSubtotals(void* instance_ptr, int subtotaltype);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_IsAutoSubtotals(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetIsAutoSubtotals(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_GetDragToColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetDragToColumn(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_GetDragToHide(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetDragToHide(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_GetDragToRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetDragToRow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_GetDragToPage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetDragToPage(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_GetDragToData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetDragToData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_IsMultipleItemSelectionAllowed(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetIsMultipleItemSelectionAllowed(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_IsRepeatItemLabels(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetIsRepeatItemLabels(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_IsIncludeNewItemsInFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetIsIncludeNewItemsInFilter(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_IsInsertPageBreaksBetweenItems(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetIsInsertPageBreaksBetweenItems(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_GetShowAllItems(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetShowAllItems(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SortBy_SortOrder_Integer(void* instance_ptr, int sorttype, int fieldsortedby);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SortBy_SortOrder_Integer_PivotLineType_String(void* instance_ptr, int sorttype, int fieldsortedby, int datatype, char* cellname);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_GetNonAutoSortDefault(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetNonAutoSortDefault(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_IsAutoSort(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetIsAutoSort(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_IsAscendSort(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetIsAscendSort(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* PivotField_GetSortSetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotField_GetAutoSortField(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetAutoSortField(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_IsAutoShow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetIsAutoShow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_IsAscendShow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetIsAscendShow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* PivotField_GetAutoShowCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetAutoShowCount(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PivotField_GetAutoShowField(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetAutoShowField(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PivotField_GetFunction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetFunction(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* PivotField_ShowValuesAs(void* instance_ptr, int displayformat, int basefield, int baseitempositiontype, int baseitem);
   ASPOSE_CELLS_API c_return_ptr_value* PivotField_GetShowValuesSetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotField_GetCurrentPageItem(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetCurrentPageItem(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PivotField_GetNumber(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetNumber(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_GetInsertBlankRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetInsertBlankRow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_GetShowSubtotalAtTop(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetShowSubtotalAtTop(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_GetShowInOutlineForm(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetShowInOutlineForm(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* PivotField_Get_NumberFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetNumberFormat(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_IsHiddenItem(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* PivotField_HideItem_Integer_Boolean(void* instance_ptr, int index, bool ishidden);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_IsHiddenItemDetail(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* PivotField_HideItemDetail(void* instance_ptr, int index, bool ishiddendetail);
   ASPOSE_CELLS_API c_return_void_value* PivotField_HideDetail(void* instance_ptr, bool ishiddendetail);
   ASPOSE_CELLS_API c_return_void_value* PivotField_HideItem_String_Boolean(void* instance_ptr, char* itemvalue, bool ishidden);
   ASPOSE_CELLS_API c_return_ptr_value* PivotField_GetItems(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotField_GetOriginalItems(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotField_GetItemCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_AddCalculatedItem(void* instance_ptr, char* name, char* formula);
   ASPOSE_CELLS_API c_return_bool_value* PivotField_GetShowCompact(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotField_SetShowCompact(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_PivotField( void* instance_ptr);

   /**************Class PivotFieldCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* PivotFieldCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotFieldCollection_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotFieldCollection_GetCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotFieldCollection_GetEnumerator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotFieldCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* PivotFieldCollection_Get_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_int_value* PivotFieldCollection_AddByBaseIndex(void* instance_ptr, int basefieldindex);
   ASPOSE_CELLS_API c_return_int_value* PivotFieldCollection_Add(void* instance_ptr, void* pivotfield);
   ASPOSE_CELLS_API c_return_void_value* PivotFieldCollection_Clear(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotFieldCollection_Move(void* instance_ptr, int currpos, int destpos);


   ASPOSE_CELLS_API void Delete_PivotFieldCollection( void* instance_ptr);

   /**************Class PivotFieldGroupSettings *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PivotFieldGroupSettings();

   ASPOSE_CELLS_API c_return_bool_value* PivotFieldGroupSettings_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotFieldGroupSettings_GetType(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PivotFieldGroupSettings( void* instance_ptr);

   /**************Class PivotFieldSortSetting *****************/


   ASPOSE_CELLS_API c_return_bool_value* PivotFieldSortSetting_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotFieldSortSetting_GetSortType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PivotFieldSortSetting_IsSortByLabels(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotFieldSortSetting_GetFieldIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotFieldSortSetting_GetLineTypeSortedBy(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PivotFieldSortSetting_IsSimpleSort(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotFieldSortSetting_GetCell(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PivotFieldSortSetting( void* instance_ptr);

   /**************Class PivotFilter *****************/


   ASPOSE_CELLS_API c_return_bool_value* PivotFilter_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PivotFilter_GetUseWholeDay(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotFilter_SetUseWholeDay(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* PivotFilter_GetFilterType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotFilter_GetFieldIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotFilter_GetTop10Value(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotFilter_GetLabels(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotFilter_GetNumberValues(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotFilter_GetDateTimeValues(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotFilter_GetFilterCategory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotFilter_GetValue1(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotFilter_SetValue1(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* PivotFilter_GetValue2(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotFilter_SetValue2(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* PivotFilter_GetValueFieldIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotFilter_SetValueFieldIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PivotFilter_GetMeasureCubeFieldIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotFilter_GetMemberPropertyFieldIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotFilter_SetMemberPropertyFieldIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* PivotFilter_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotFilter_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* PivotFilter_GetEvaluationOrder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotFilter_SetEvaluationOrder(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_PivotFilter( void* instance_ptr);

   /**************Class PivotFilterCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* PivotFilterCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotFilterCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* PivotFilterCollection_AddTop10Filter(void* instance_ptr, int basefieldindex, int valuefieldindex, int type_, bool istop, int itemcount);
   ASPOSE_CELLS_API c_return_ptr_value* PivotFilterCollection_AddValueFilter(void* instance_ptr, int basefieldindex, int valuefieldindex, int type_, double value1, double value2);
   ASPOSE_CELLS_API c_return_ptr_value* PivotFilterCollection_AddLabelFilter(void* instance_ptr, int basefieldindex, int type_, char* label1, char* label2);
   ASPOSE_CELLS_API c_return_ptr_value* PivotFilterCollection_AddDateFilter(void* instance_ptr, int basefieldindex, int type_, void* datetime1, void* datetime2);
   ASPOSE_CELLS_API c_return_void_value* PivotFilterCollection_ClearFilter(void* instance_ptr, int fieldindex);
   ASPOSE_CELLS_API c_return_int_value* PivotFilterCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PivotFilterCollection( void* instance_ptr);

   /**************Class PivotFormatCondition *****************/


   ASPOSE_CELLS_API c_return_bool_value* PivotFormatCondition_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotFormatCondition_AddDataAreaCondition_String(void* instance_ptr, char* fieldname);
   ASPOSE_CELLS_API c_return_void_value* PivotFormatCondition_AddDataAreaCondition_PivotField(void* instance_ptr, void* datafield);
   ASPOSE_CELLS_API c_return_void_value* PivotFormatCondition_AddRowAreaCondition_String(void* instance_ptr, char* fieldname);
   ASPOSE_CELLS_API c_return_void_value* PivotFormatCondition_AddRowAreaCondition_PivotField(void* instance_ptr, void* rowfield);
   ASPOSE_CELLS_API c_return_void_value* PivotFormatCondition_AddColumnAreaCondition_String(void* instance_ptr, char* fieldname);
   ASPOSE_CELLS_API c_return_void_value* PivotFormatCondition_AddColumnAreaCondition_PivotField(void* instance_ptr, void* columnfield);
   ASPOSE_CELLS_API c_return_void_value* PivotFormatCondition_SetConditionalAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotFormatCondition_GetScopeType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotFormatCondition_SetScopeType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PivotFormatCondition_GetRuleType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotFormatCondition_SetRuleType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* PivotFormatCondition_GetFormatConditions(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PivotFormatCondition( void* instance_ptr);

   /**************Class PivotFormatConditionCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* PivotFormatConditionCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotFormatConditionCollection_Add(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotFormatConditionCollection_GetCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotFormatConditionCollection_RemoveAt(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* PivotFormatConditionCollection_Get(void* instance_ptr, int index);


   ASPOSE_CELLS_API void Delete_PivotFormatConditionCollection( void* instance_ptr);

   /**************Class PivotItem *****************/


   ASPOSE_CELLS_API c_return_bool_value* PivotItem_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PivotItem_IsHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotItem_SetIsHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* PivotItem_GetPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotItem_SetPosition(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PivotItem_GetPositionInSameParentNode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotItem_SetPositionInSameParentNode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* PivotItem_Move(void* instance_ptr, int count, bool issameparent);
   ASPOSE_CELLS_API c_return_bool_value* PivotItem_IsDetailHidden(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotItem_SetIsDetailHidden(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotItem_IsCalculatedItem(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotItem_GetFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PivotItem_IsMissing(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotItem_GetStringValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* PivotItem_GetDoubleValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotItem_GetDateTimeValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotItem_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotItem_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotItem_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* PivotItem_GetIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotItem_SetIndex(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_PivotItem( void* instance_ptr);

   /**************Class PivotItemCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* PivotItemCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotItemCollection_GetEnumerator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotItemCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* PivotItemCollection_Get_String(void* instance_ptr, char* itemvalue);
   ASPOSE_CELLS_API c_return_int_value* PivotItemCollection_GetCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotItemCollection_SwapItem(void* instance_ptr, int index1, int index2);


   ASPOSE_CELLS_API void Delete_PivotItemCollection( void* instance_ptr);

   /**************Class PivotNumbericRangeGroupSettings *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PivotNumbericRangeGroupSettings(void* src);

   ASPOSE_CELLS_API c_return_bool_value* PivotNumbericRangeGroupSettings_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotNumbericRangeGroupSettings_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* PivotNumbericRangeGroupSettings_GetStart(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* PivotNumbericRangeGroupSettings_GetEnd(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* PivotNumbericRangeGroupSettings_GetInterval(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PivotNumbericRangeGroupSettings( void* instance_ptr);

   /**************Class PivotPageFields *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PivotPageFields();

   ASPOSE_CELLS_API c_return_bool_value* PivotPageFields_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotPageFields_AddPageField(void* instance_ptr, void* pageitems, int pageitems_length);
   ASPOSE_CELLS_API c_return_int_value* PivotPageFields_GetPageFieldCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotPageFields_AddIdentify(void* instance_ptr, int rangeindex, void* pageitemindex, int pageitemindex_length);


   ASPOSE_CELLS_API void Delete_PivotPageFields( void* instance_ptr);

   /**************Class PivotShowValuesSetting *****************/


   ASPOSE_CELLS_API c_return_bool_value* PivotShowValuesSetting_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotShowValuesSetting_GetCalculationType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotShowValuesSetting_SetCalculationType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PivotShowValuesSetting_GetBaseFieldIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotShowValuesSetting_SetBaseFieldIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PivotShowValuesSetting_GetBaseItemPositionType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotShowValuesSetting_SetBaseItemPositionType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PivotShowValuesSetting_GetBaseItemIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotShowValuesSetting_SetBaseItemIndex(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_PivotShowValuesSetting( void* instance_ptr);

   /**************Class PivotTable *****************/


   ASPOSE_CELLS_API c_return_bool_value* PivotTable_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_Dispose(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_IsExcel2003Compatible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetIsExcel2003Compatible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* PivotTable_GetRefreshedByWho(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetRefreshDate(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotTable_GetPivotTableStyleName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetPivotTableStyleName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* PivotTable_GetPivotTableStyleType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetPivotTableStyleType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_CopyStyle(void* instance_ptr, void* pivottable);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_ShowReportFilterPage(void* instance_ptr, void* pagefield);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_ShowReportFilterPageByName(void* instance_ptr, char* fieldname);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_ShowReportFilterPageByIndex(void* instance_ptr, int posindex);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_RemoveField_PivotFieldType_String(void* instance_ptr, int fieldtype, char* fieldname);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_RemoveField_PivotFieldType_Integer(void* instance_ptr, int fieldtype, int basefieldindex);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_RemoveField_PivotFieldType_PivotField(void* instance_ptr, int fieldtype, void* pivotfield);
   ASPOSE_CELLS_API c_return_int_value* PivotTable_AddFieldToArea_PivotFieldType_String(void* instance_ptr, int fieldtype, char* fieldname);
   ASPOSE_CELLS_API c_return_int_value* PivotTable_AddFieldToArea_PivotFieldType_Integer(void* instance_ptr, int fieldtype, int basefieldindex);
   ASPOSE_CELLS_API c_return_int_value* PivotTable_AddFieldToArea_PivotFieldType_PivotField(void* instance_ptr, int fieldtype, void* pivotfield);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_AddCalculatedField_String_String_Boolean(void* instance_ptr, char* name, char* formula, bool dragtodataarea);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_AddCalculatedField_String_String(void* instance_ptr, char* name, char* formula);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetFields(void* instance_ptr, int fieldtype);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetColumnFields(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetRowFields(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetPageFields(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetDataFields(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetDataField(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetBaseFields(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetPivotFilters(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetColumnRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetRowRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetDataBodyRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetTableRange1(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetTableRange2(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_MoveTo_Integer_Integer(void* instance_ptr, int row, int column);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_MoveTo_String(void* instance_ptr, char* destcellname);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_IsGridDropZones(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetIsGridDropZones(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetShowColumnGrandTotals(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetShowColumnGrandTotals(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetShowRowGrandTotals(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetShowRowGrandTotals(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetDisplayNullString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetDisplayNullString(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* PivotTable_GetNullString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetNullString(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetDisplayErrorString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetDisplayErrorString(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* PivotTable_GetDataFieldHeaderName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetDataFieldHeaderName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* PivotTable_GetErrorString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetErrorString(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_IsAutoFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetIsAutoFormat(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetAutofitColumnWidthOnUpdate(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetAutofitColumnWidthOnUpdate(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* PivotTable_GetAutoFormatType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetAutoFormatType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetHasBlankRows(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetHasBlankRows(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetMergeLabels(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetMergeLabels(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetPreserveFormatting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetPreserveFormatting(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetShowDrill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetShowDrill(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetEnableDrilldown(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetEnableDrilldown(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetEnableFieldDialog(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetEnableFieldDialog(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetEnableFieldList(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetEnableFieldList(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetEnableWizard(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetEnableWizard(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetSubtotalHiddenPageItems(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetSubtotalHiddenPageItems(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* PivotTable_GetGrandTotalName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetGrandTotalName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetManualUpdate(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetManualUpdate(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetAllowMultipleFiltersPerField(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetAllowMultipleFiltersPerField(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* PivotTable_GetMissingItemsLimit(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetMissingItemsLimit(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetEnableDataValueEditing(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetEnableDataValueEditing(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetShowDataTips(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetShowDataTips(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetShowMemberPropertyTips(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetShowMemberPropertyTips(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetShowValuesRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetShowValuesRow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetShowEmptyCol(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetShowEmptyCol(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetShowEmptyRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetShowEmptyRow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetFieldListSortAscending(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetFieldListSortAscending(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetPrintDrill(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetPrintDrill(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* PivotTable_GetAltTextTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetAltTextTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* PivotTable_GetAltTextDescription(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetAltTextDescription(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* PivotTable_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* PivotTable_GetColumnHeaderCaption(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetColumnHeaderCaption(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* PivotTable_GetIndent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetIndent(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* PivotTable_GetRowHeaderCaption(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetRowHeaderCaption(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetShowRowHeaderCaption(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetShowRowHeaderCaption(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetCustomListSort(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetCustomListSort(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetConditionalFormats(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotTable_GetPageFieldOrder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetPageFieldOrder(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* PivotTable_GetPageFieldWrapCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetPageFieldWrapCount(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* PivotTable_GetTag(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetTag(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetSaveData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetSaveData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetRefreshDataOnOpeningFile(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetRefreshDataOnOpeningFile(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* PivotTable_GetSourceType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetSourceDataConnections(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetNamesOfSourceDataConnections(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetDataSource(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetDataSource(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_ChangeDataSource(void* instance_ptr, void* source, int source_length);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetSource(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetSource_Boolean(void* instance_ptr, bool isoriginal);
   ASPOSE_CELLS_API c_return_int_value* PivotTable_RefreshData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotTable_RefreshData_PivotTableRefreshOption(void* instance_ptr, void* option);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_CalculateData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_CalculateData_PivotTableCalculateOption(void* instance_ptr, void* option);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_ClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_CalculateRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_FormatAll(void* instance_ptr, void* style);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_FormatRow(void* instance_ptr, int row, void* style);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_Format_PivotArea_Style(void* instance_ptr, void* pivotarea, void* style);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_Format_CellArea_Style(void* instance_ptr, void* ca, void* style);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_Format_Integer_Integer_Style(void* instance_ptr, int row, int column, void* style);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_SelectArea(void* instance_ptr, void* ca);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_ShowDetail(void* instance_ptr, int rowoffset, int columnoffset, bool newsheet, int destrow, int destcolumn);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetPivotFormats(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetRepeatItemsOnEachPrintedPage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetRepeatItemsOnEachPrintedPage(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetPrintTitles(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetPrintTitles(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetDisplayImmediateItems(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetDisplayImmediateItems(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_IsSelected(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetIsSelected(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetShowPivotStyleRowHeader(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetShowPivotStyleRowHeader(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetShowPivotStyleColumnHeader(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetShowPivotStyleColumnHeader(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetShowPivotStyleRowStripes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetShowPivotStyleRowStripes(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetShowPivotStyleColumnStripes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetShowPivotStyleColumnStripes(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTable_GetShowPivotStyleLastColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_SetShowPivotStyleLastColumn(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetHorizontalPageBreaks(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_ShowInCompactForm(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_ShowInOutlineForm(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTable_ShowInTabularForm(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetCellByDisplayName(void* instance_ptr, char* displayname);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTable_GetChildren(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PivotTable( void* instance_ptr);

   /**************Class PivotTableCalculateOption *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PivotTableCalculateOption();

   ASPOSE_CELLS_API c_return_bool_value* PivotTableCalculateOption_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PivotTableCalculateOption_GetRefreshData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTableCalculateOption_SetRefreshData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PivotTableCalculateOption_GetRefreshCharts(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTableCalculateOption_SetRefreshCharts(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* PivotTableCalculateOption_GetReserveMissingPivotItemType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTableCalculateOption_SetReserveMissingPivotItemType(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_PivotTableCalculateOption( void* instance_ptr);

   /**************Class PivotTableCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* PivotTableCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTableCollection_Dispose(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotTableCollection_Add_String_String_String(void* instance_ptr, char* sourcedata, char* destcellname, char* tablename);
   ASPOSE_CELLS_API c_return_int_value* PivotTableCollection_Add_String_String_String_Boolean(void* instance_ptr, char* sourcedata, char* destcellname, char* tablename, bool usesamesource);
   ASPOSE_CELLS_API c_return_int_value* PivotTableCollection_Add_String_Integer_Integer_String(void* instance_ptr, char* sourcedata, int row, int column, char* tablename);
   ASPOSE_CELLS_API c_return_int_value* PivotTableCollection_Add_String_Integer_Integer_String_Boolean(void* instance_ptr, char* sourcedata, int row, int column, char* tablename, bool usesamesource);
   ASPOSE_CELLS_API c_return_int_value* PivotTableCollection_Add_String_Integer_Integer_String_Boolean_Boolean(void* instance_ptr, char* sourcedata, int row, int column, char* tablename, bool usesamesource, bool isxlsclassic);
   ASPOSE_CELLS_API c_return_int_value* PivotTableCollection_Add_String_String_String_Boolean_Boolean(void* instance_ptr, char* sourcedata, char* cell, char* tablename, bool usesamesource, bool isxlsclassic);
   ASPOSE_CELLS_API c_return_int_value* PivotTableCollection_Add_PivotTable_String_String(void* instance_ptr, void* pivottable, char* destcellname, char* tablename);
   ASPOSE_CELLS_API c_return_int_value* PivotTableCollection_Add_PivotTable_Integer_Integer_String(void* instance_ptr, void* pivottable, int row, int column, char* tablename);
   ASPOSE_CELLS_API c_return_int_value* PivotTableCollection_Add_U16StringArray_Boolean_PivotPageFields_String_String(void* instance_ptr, void* sourcedata, int sourcedata_length, bool isautopage, void* pagefields, char* destcellname, char* tablename);
   ASPOSE_CELLS_API c_return_int_value* PivotTableCollection_Add_U16StringArray_Boolean_PivotPageFields_Integer_Integer_String(void* instance_ptr, void* sourcedata, int sourcedata_length, bool isautopage, void* pagefields, int row, int column, char* tablename);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTableCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTableCollection_Get_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTableCollection_Get_Integer_Integer(void* instance_ptr, int row, int column);
   ASPOSE_CELLS_API c_return_void_value* PivotTableCollection_Clear(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTableCollection_Remove_PivotTable(void* instance_ptr, void* pivottable);
   ASPOSE_CELLS_API c_return_void_value* PivotTableCollection_Remove_PivotTable_Boolean(void* instance_ptr, void* pivottable, bool keepdata);
   ASPOSE_CELLS_API c_return_void_value* PivotTableCollection_RemoveAt_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* PivotTableCollection_RemoveAt_Integer_Boolean(void* instance_ptr, int index, bool keepdata);
   ASPOSE_CELLS_API c_return_int_value* PivotTableCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PivotTableCollection( void* instance_ptr);

   /**************Class PivotTableFormat *****************/


   ASPOSE_CELLS_API c_return_bool_value* PivotTableFormat_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTableFormat_GetPivotArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTableFormat_GetStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTableFormat_SetStyle(void* instance_ptr, void* style);


   ASPOSE_CELLS_API void Delete_PivotTableFormat( void* instance_ptr);

   /**************Class PivotTableFormatCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* PivotTableFormatCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTableFormatCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* PivotTableFormatCollection_Add(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotTableFormatCollection_FormatArea(void* instance_ptr, int axistype, int fieldposition, int subtotaltype, int selectiontype, bool isgrandrow, bool isgrandcolumn, void* style);
   ASPOSE_CELLS_API c_return_int_value* PivotTableFormatCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PivotTableFormatCollection( void* instance_ptr);

   /**************Class PivotTableRefreshOption *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PivotTableRefreshOption();

   ASPOSE_CELLS_API c_return_bool_value* PivotTableRefreshOption_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PivotTableRefreshOption_GetReserveMissingPivotItemType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotTableRefreshOption_SetReserveMissingPivotItemType(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_PivotTableRefreshOption( void* instance_ptr);

   /**************Class CustomXmlPart *****************/


   ASPOSE_CELLS_API c_return_bool_value* CustomXmlPart_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlPart_GetData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlPart_SetData(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlPart_GetSchemaData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlPart_SetSchemaData(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_string_value* CustomXmlPart_GetID(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CustomXmlPart_SetID(void* instance_ptr, char* value);


   ASPOSE_CELLS_API void Delete_CustomXmlPart( void* instance_ptr);

   /**************Class CustomXmlPartCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* CustomXmlPartCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlPartCollection_Add(void* instance_ptr, void* data, int data_length, void* shemadata, int shemadata_length);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlPartCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* CustomXmlPartCollection_SelectByID(void* instance_ptr, char* id);
   ASPOSE_CELLS_API c_return_int_value* CustomXmlPartCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_CustomXmlPartCollection( void* instance_ptr);

   /**************Class SmartTag *****************/


   ASPOSE_CELLS_API c_return_bool_value* SmartTag_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* SmartTag_GetDeleted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartTag_SetDeleted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* SmartTag_GetProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartTag_SetProperties(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* SmartTag_GetUri(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* SmartTag_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartTag_SetLink(void* instance_ptr, char* uri, char* name);


   ASPOSE_CELLS_API void Delete_SmartTag( void* instance_ptr);

   /**************Class SmartTagCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* SmartTagCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SmartTagCollection_GetRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SmartTagCollection_GetColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SmartTagCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* SmartTagCollection_Add(void* instance_ptr, char* uri, char* name);
   ASPOSE_CELLS_API c_return_int_value* SmartTagCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_SmartTagCollection( void* instance_ptr);

   /**************Class SmartTagOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_SmartTagOptions();

   ASPOSE_CELLS_API c_return_bool_value* SmartTagOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* SmartTagOptions_GetEmbedSmartTags(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartTagOptions_SetEmbedSmartTags(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* SmartTagOptions_GetShowType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartTagOptions_SetShowType(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_SmartTagOptions( void* instance_ptr);

   /**************Class SmartTagProperty *****************/


   ASPOSE_CELLS_API c_return_bool_value* SmartTagProperty_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* SmartTagProperty_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartTagProperty_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* SmartTagProperty_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SmartTagProperty_SetValue(void* instance_ptr, char* value);


   ASPOSE_CELLS_API void Delete_SmartTagProperty( void* instance_ptr);

   /**************Class SmartTagPropertyCollection *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_SmartTagPropertyCollection();

   ASPOSE_CELLS_API c_return_bool_value* SmartTagPropertyCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SmartTagPropertyCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* SmartTagPropertyCollection_Get_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_int_value* SmartTagPropertyCollection_Add(void* instance_ptr, char* name, char* value);
   ASPOSE_CELLS_API c_return_int_value* SmartTagPropertyCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_SmartTagPropertyCollection( void* instance_ptr);

   /**************Class SmartTagSetting *****************/


   ASPOSE_CELLS_API c_return_bool_value* SmartTagSetting_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SmartTagSetting_Add_Integer_Integer(void* instance_ptr, int row, int column);
   ASPOSE_CELLS_API c_return_int_value* SmartTagSetting_Add_String(void* instance_ptr, char* cellname);
   ASPOSE_CELLS_API c_return_ptr_value* SmartTagSetting_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* SmartTagSetting_Get_Integer_Integer(void* instance_ptr, int row, int column);
   ASPOSE_CELLS_API c_return_ptr_value* SmartTagSetting_Get_String(void* instance_ptr, char* cellname);
   ASPOSE_CELLS_API c_return_int_value* SmartTagSetting_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_SmartTagSetting( void* instance_ptr);

   /**************Class DataMashup *****************/


   ASPOSE_CELLS_API c_return_bool_value* DataMashup_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DataMashup_GetPowerQueryFormulas(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_DataMashup( void* instance_ptr);

   /**************Class PowerQueryFormula *****************/


   ASPOSE_CELLS_API c_return_bool_value* PowerQueryFormula_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PowerQueryFormula_GetGroupName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PowerQueryFormula_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PowerQueryFormula_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* PowerQueryFormula_GetDescription(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PowerQueryFormula_SetDescription(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* PowerQueryFormula_GetPowerQueryFormulaItems(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PowerQueryFormula_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PowerQueryFormula_GetFormulaDefinition(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PowerQueryFormula( void* instance_ptr);

   /**************Class PowerQueryFormulaCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* PowerQueryFormulaCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PowerQueryFormulaCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* PowerQueryFormulaCollection_Get_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_int_value* PowerQueryFormulaCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PowerQueryFormulaCollection( void* instance_ptr);

   /**************Class PowerQueryFormulaFunction *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PowerQueryFormulaFunction(void* src);

   ASPOSE_CELLS_API c_return_bool_value* PowerQueryFormulaFunction_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PowerQueryFormulaFunction_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PowerQueryFormulaFunction_GetF(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PowerQueryFormulaFunction_SetF(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* PowerQueryFormulaFunction_GetGroupName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PowerQueryFormulaFunction_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PowerQueryFormulaFunction_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* PowerQueryFormulaFunction_GetDescription(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PowerQueryFormulaFunction_SetDescription(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* PowerQueryFormulaFunction_GetPowerQueryFormulaItems(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PowerQueryFormulaFunction_GetFormulaDefinition(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PowerQueryFormulaFunction( void* instance_ptr);

   /**************Class PowerQueryFormulaItem *****************/


   ASPOSE_CELLS_API c_return_bool_value* PowerQueryFormulaItem_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PowerQueryFormulaItem_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PowerQueryFormulaItem_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PowerQueryFormulaItem_SetValue(void* instance_ptr, char* value);


   ASPOSE_CELLS_API void Delete_PowerQueryFormulaItem( void* instance_ptr);

   /**************Class PowerQueryFormulaItemCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* PowerQueryFormulaItemCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PowerQueryFormulaItemCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* PowerQueryFormulaItemCollection_Get_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_int_value* PowerQueryFormulaItemCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PowerQueryFormulaItemCollection( void* instance_ptr);

   /**************Class PowerQueryFormulaParameter *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PowerQueryFormulaParameter(void* src);

   ASPOSE_CELLS_API c_return_bool_value* PowerQueryFormulaParameter_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PowerQueryFormulaParameter_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PowerQueryFormulaParameter_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PowerQueryFormulaParameter_SetValue(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* PowerQueryFormulaParameter_GetFormulaDefinition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PowerQueryFormulaParameter_GetGroupName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PowerQueryFormulaParameter_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PowerQueryFormulaParameter_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* PowerQueryFormulaParameter_GetDescription(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PowerQueryFormulaParameter_SetDescription(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* PowerQueryFormulaParameter_GetPowerQueryFormulaItems(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PowerQueryFormulaParameter( void* instance_ptr);

   /**************Class PowerQueryFormulaParameterCollection *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PowerQueryFormulaParameterCollection();

   ASPOSE_CELLS_API c_return_bool_value* PowerQueryFormulaParameterCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PowerQueryFormulaParameterCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* PowerQueryFormulaParameterCollection_Get_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_int_value* PowerQueryFormulaParameterCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PowerQueryFormulaParameterCollection( void* instance_ptr);

   /**************Class DataModel *****************/


   ASPOSE_CELLS_API c_return_bool_value* DataModel_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DataModel_GetRelationships(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DataModel_GetTables(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_DataModel( void* instance_ptr);

   /**************Class DataModelRelationship *****************/


   ASPOSE_CELLS_API c_return_bool_value* DataModelRelationship_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* DataModelRelationship_GetForeignKeyTable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* DataModelRelationship_GetPrimaryKeyTable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* DataModelRelationship_GetForeignKeyColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* DataModelRelationship_GetPrimaryKeyColumn(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_DataModelRelationship( void* instance_ptr);

   /**************Class DataModelRelationshipCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* DataModelRelationshipCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DataModelRelationshipCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* DataModelRelationshipCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_DataModelRelationshipCollection( void* instance_ptr);

   /**************Class DataModelTable *****************/


   ASPOSE_CELLS_API c_return_bool_value* DataModelTable_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* DataModelTable_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* DataModelTable_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* DataModelTable_GetConnectionName(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_DataModelTable( void* instance_ptr);

   /**************Class DataModelTableCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* DataModelTableCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DataModelTableCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* DataModelTableCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_DataModelTableCollection( void* instance_ptr);

   /**************Class DbfLoadOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_DbfLoadOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_DbfLoadOptions_LoadOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* DbfLoadOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DbfLoadOptions_GetLoadFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* DbfLoadOptions_GetPassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfLoadOptions_SetPassword(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* DbfLoadOptions_GetParsingFormulaOnOpen(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfLoadOptions_SetParsingFormulaOnOpen(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DbfLoadOptions_GetParsingPivotCachedRecords(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfLoadOptions_SetParsingPivotCachedRecords(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* DbfLoadOptions_SetPaperSize(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_int_value* DbfLoadOptions_GetLanguageCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfLoadOptions_SetLanguageCode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DbfLoadOptions_GetRegion(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfLoadOptions_SetRegion(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* DbfLoadOptions_GetDefaultStyleSettings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DbfLoadOptions_GetInterruptMonitor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfLoadOptions_SetInterruptMonitor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* DbfLoadOptions_GetIgnoreNotPrinted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfLoadOptions_SetIgnoreNotPrinted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DbfLoadOptions_GetCheckDataValid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfLoadOptions_SetCheckDataValid(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DbfLoadOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfLoadOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DbfLoadOptions_GetKeepUnparsedData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfLoadOptions_SetKeepUnparsedData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* DbfLoadOptions_GetLoadFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfLoadOptions_SetLoadFilter(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* DbfLoadOptions_GetMemorySetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfLoadOptions_SetMemorySetting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* DbfLoadOptions_GetAutoFitterOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfLoadOptions_SetAutoFitterOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* DbfLoadOptions_GetAutoFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfLoadOptions_SetAutoFilter(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* DbfLoadOptions_GetFontConfigs(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfLoadOptions_SetFontConfigs(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* DbfLoadOptions_GetIgnoreUselessShapes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfLoadOptions_SetIgnoreUselessShapes(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DbfLoadOptions_GetPreservePaddingSpacesInFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfLoadOptions_SetPreservePaddingSpacesInFormula(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_DbfLoadOptions( void* instance_ptr);

   /**************Class DifLoadOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_DifLoadOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_DifLoadOptions_LoadOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* DifLoadOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DifLoadOptions_GetLoadFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* DifLoadOptions_GetPassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifLoadOptions_SetPassword(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* DifLoadOptions_GetParsingFormulaOnOpen(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifLoadOptions_SetParsingFormulaOnOpen(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DifLoadOptions_GetParsingPivotCachedRecords(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifLoadOptions_SetParsingPivotCachedRecords(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* DifLoadOptions_SetPaperSize(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_int_value* DifLoadOptions_GetLanguageCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifLoadOptions_SetLanguageCode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* DifLoadOptions_GetRegion(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifLoadOptions_SetRegion(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* DifLoadOptions_GetDefaultStyleSettings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DifLoadOptions_GetInterruptMonitor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifLoadOptions_SetInterruptMonitor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* DifLoadOptions_GetIgnoreNotPrinted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifLoadOptions_SetIgnoreNotPrinted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DifLoadOptions_GetCheckDataValid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifLoadOptions_SetCheckDataValid(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DifLoadOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifLoadOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DifLoadOptions_GetKeepUnparsedData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifLoadOptions_SetKeepUnparsedData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* DifLoadOptions_GetLoadFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifLoadOptions_SetLoadFilter(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* DifLoadOptions_GetMemorySetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifLoadOptions_SetMemorySetting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* DifLoadOptions_GetAutoFitterOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifLoadOptions_SetAutoFitterOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* DifLoadOptions_GetAutoFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifLoadOptions_SetAutoFilter(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* DifLoadOptions_GetFontConfigs(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifLoadOptions_SetFontConfigs(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* DifLoadOptions_GetIgnoreUselessShapes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifLoadOptions_SetIgnoreUselessShapes(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DifLoadOptions_GetPreservePaddingSpacesInFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DifLoadOptions_SetPreservePaddingSpacesInFormula(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_DifLoadOptions( void* instance_ptr);

   /**************Class DbfSaveOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_DbfSaveOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_DbfSaveOptions_SaveOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* DbfSaveOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* DbfSaveOptions_GetExportAsString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfSaveOptions_SetExportAsString(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* DbfSaveOptions_GetSaveFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* DbfSaveOptions_GetClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfSaveOptions_SetClearData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* DbfSaveOptions_GetCachedFileFolder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfSaveOptions_SetCachedFileFolder(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* DbfSaveOptions_GetValidateMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfSaveOptions_SetValidateMergedAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DbfSaveOptions_GetMergeAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfSaveOptions_SetMergeAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DbfSaveOptions_GetCreateDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfSaveOptions_SetCreateDirectory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DbfSaveOptions_GetSortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfSaveOptions_SetSortNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DbfSaveOptions_GetSortExternalNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfSaveOptions_SetSortExternalNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DbfSaveOptions_GetRefreshChartCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfSaveOptions_SetRefreshChartCache(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DbfSaveOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfSaveOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DbfSaveOptions_GetUpdateSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfSaveOptions_SetUpdateSmartArt(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* DbfSaveOptions_GetEncryptDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DbfSaveOptions_SetEncryptDocumentProperties(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_DbfSaveOptions( void* instance_ptr);

   /**************Class EbookSaveOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_EbookSaveOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_EbookSaveOptions_SaveFormat(int saveformat);
   ASPOSE_CELLS_API c_return_ptr_value* New_EbookSaveOptions_HtmlSaveOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetIgnoreInvisibleShapes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetIgnoreInvisibleShapes(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* EbookSaveOptions_GetPageTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetPageTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* EbookSaveOptions_GetAttachedFilesDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetAttachedFilesDirectory(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* EbookSaveOptions_GetAttachedFilesUrlPrefix(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetAttachedFilesUrlPrefix(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* EbookSaveOptions_GetDefaultFontName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetDefaultFontName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetAddGenericFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetAddGenericFont(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetWorksheetScalable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetWorksheetScalable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_IsExportComments(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetIsExportComments(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* EbookSaveOptions_GetExportCommentsType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExportCommentsType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetDisableDownlevelRevealedComments(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetDisableDownlevelRevealedComments(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_IsExpImageToTempDir(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetIsExpImageToTempDir(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetImageScalable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetImageScalable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetWidthScalable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetWidthScalable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetExportSingleTab(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExportSingleTab(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetExportImagesAsBase64(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExportImagesAsBase64(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetExportActiveWorksheetOnly(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExportActiveWorksheetOnly(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetExportPrintAreaOnly(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExportPrintAreaOnly(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* EbookSaveOptions_GetExportArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExportArea(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetParseHtmlTagInCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetParseHtmlTagInCell(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* EbookSaveOptions_GetHtmlCrossStringType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetHtmlCrossStringType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* EbookSaveOptions_GetHiddenColDisplayType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetHiddenColDisplayType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* EbookSaveOptions_GetHiddenRowDisplayType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetHiddenRowDisplayType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* EbookSaveOptions_GetEncoding(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetEncoding(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* EbookSaveOptions_GetImageOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetSaveAsSingleFile(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetSaveAsSingleFile(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetShowAllSheets(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetShowAllSheets(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetExportPageHeaders(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExportPageHeaders(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetExportPageFooters(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExportPageFooters(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetExportHiddenWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExportHiddenWorksheet(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetPresentationPreference(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetPresentationPreference(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* EbookSaveOptions_GetCellCssPrefix(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetCellCssPrefix(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* EbookSaveOptions_GetTableCssId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetTableCssId(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_IsFullPathLink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetIsFullPathLink(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetExportWorksheetCSSSeparately(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExportWorksheetCSSSeparately(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetExportSimilarBorderStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExportSimilarBorderStyle(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* EbookSaveOptions_GetMergeEmptyTdType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetMergeEmptyTdType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetExportCellCoordinate(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExportCellCoordinate(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetExportExtraHeadings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExportExtraHeadings(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetExportRowColumnHeadings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExportRowColumnHeadings(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetExportFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExportFormula(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetAddTooltipText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetAddTooltipText(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetExportGridLines(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExportGridLines(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetExportBogusRowData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExportBogusRowData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetExcludeUnusedStyles(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExcludeUnusedStyles(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetExportDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExportDocumentProperties(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetExportWorksheetProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExportWorksheetProperties(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetExportWorkbookProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExportWorkbookProperties(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetExportFrameScriptsAndProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExportFrameScriptsAndProperties(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* EbookSaveOptions_GetExportDataOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetExportDataOptions(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* EbookSaveOptions_GetLinkTargetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetLinkTargetType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_IsIECompatible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetIsIECompatible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetFormatDataIgnoreColumnWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetFormatDataIgnoreColumnWidth(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetCalculateFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetCalculateFormula(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_IsJsBrowserCompatible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetIsJsBrowserCompatible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_IsMobileCompatible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetIsMobileCompatible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* EbookSaveOptions_GetCssStyles(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetCssStyles(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetHideOverflowWrappedText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetHideOverflowWrappedText(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_IsBorderCollapsed(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetIsBorderCollapsed(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetEncodeEntityAsCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetEncodeEntityAsCode(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* EbookSaveOptions_GetOfficeMathOutputMode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetOfficeMathOutputMode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* EbookSaveOptions_GetCellNameAttribute(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetCellNameAttribute(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetDisableCss(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetDisableCss(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetEnableCssCustomProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetEnableCssCustomProperties(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* EbookSaveOptions_GetHtmlVersion(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetHtmlVersion(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* EbookSaveOptions_GetSaveFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetClearData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* EbookSaveOptions_GetCachedFileFolder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetCachedFileFolder(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetValidateMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetValidateMergedAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetMergeAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetMergeAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetCreateDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetCreateDirectory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetSortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetSortNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetSortExternalNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetSortExternalNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetRefreshChartCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetRefreshChartCache(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetUpdateSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetUpdateSmartArt(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* EbookSaveOptions_GetEncryptDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* EbookSaveOptions_SetEncryptDocumentProperties(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_EbookSaveOptions( void* instance_ptr);

   /**************Class SqlScriptColumnTypeMap *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_SqlScriptColumnTypeMap();

   ASPOSE_CELLS_API c_return_bool_value* SqlScriptColumnTypeMap_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* SqlScriptColumnTypeMap_GetStringType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* SqlScriptColumnTypeMap_GetNumbericType(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_SqlScriptColumnTypeMap( void* instance_ptr);

   /**************Class SqlScriptSaveOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_SqlScriptSaveOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_SqlScriptSaveOptions_SaveOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* SqlScriptSaveOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* SqlScriptSaveOptions_GetCheckIfTableExists(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetCheckIfTableExists(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* SqlScriptSaveOptions_GetColumnTypeMap(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetColumnTypeMap(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* SqlScriptSaveOptions_GetCheckAllDataForColumnType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetCheckAllDataForColumnType(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SqlScriptSaveOptions_GetAddBlankLineBetweenRows(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetAddBlankLineBetweenRows(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_char_value* SqlScriptSaveOptions_GetSeparator(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetSeparator(void* instance_ptr, char value);
   ASPOSE_CELLS_API c_return_int_value* SqlScriptSaveOptions_GetOperatorType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetOperatorType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* SqlScriptSaveOptions_GetPrimaryKey(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetPrimaryKey(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* SqlScriptSaveOptions_GetCreateTable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetCreateTable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* SqlScriptSaveOptions_GetIdName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetIdName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* SqlScriptSaveOptions_GetStartId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetStartId(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* SqlScriptSaveOptions_GetTableName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetTableName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* SqlScriptSaveOptions_GetExportAsString(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetExportAsString(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* SqlScriptSaveOptions_GetSheetIndexes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetSheetIndexes(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_ptr_value* SqlScriptSaveOptions_GetExportArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetExportArea(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* SqlScriptSaveOptions_GetHasHeaderRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetHasHeaderRow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* SqlScriptSaveOptions_GetSaveFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* SqlScriptSaveOptions_GetClearData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetClearData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* SqlScriptSaveOptions_GetCachedFileFolder(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetCachedFileFolder(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* SqlScriptSaveOptions_GetValidateMergedAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetValidateMergedAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SqlScriptSaveOptions_GetMergeAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetMergeAreas(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SqlScriptSaveOptions_GetCreateDirectory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetCreateDirectory(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SqlScriptSaveOptions_GetSortNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetSortNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SqlScriptSaveOptions_GetSortExternalNames(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetSortExternalNames(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SqlScriptSaveOptions_GetRefreshChartCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetRefreshChartCache(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SqlScriptSaveOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SqlScriptSaveOptions_GetUpdateSmartArt(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetUpdateSmartArt(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* SqlScriptSaveOptions_GetEncryptDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SqlScriptSaveOptions_SetEncryptDocumentProperties(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_SqlScriptSaveOptions( void* instance_ptr);

   /**************Class DigitalSignature *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_DigitalSignature_Stream_String_String_Date(void* rawdata, int rawdata_length, char* password, char* comments, void* signtime);
   ASPOSE_CELLS_API c_return_ptr_value* New_DigitalSignature_String_String_String_Date(char* filename, char* password, char* comments, void* signtime);

   ASPOSE_CELLS_API c_return_bool_value* DigitalSignature_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* DigitalSignature_GetComments(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DigitalSignature_SetComments(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* DigitalSignature_GetSignTime(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DigitalSignature_SetSignTime(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_void_value* DigitalSignature_GetId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* DigitalSignature_SetId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* DigitalSignature_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DigitalSignature_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* DigitalSignature_GetImage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DigitalSignature_SetImage(void* instance_ptr, void* value, int value_length);
   ASPOSE_CELLS_API c_return_void_value* DigitalSignature_GetProviderId(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_void_value* DigitalSignature_SetProviderId(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* DigitalSignature_IsValid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DigitalSignature_GetXAdESType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DigitalSignature_SetXAdESType(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_DigitalSignature( void* instance_ptr);

   /**************Class DigitalSignatureCollection *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_DigitalSignatureCollection();

   ASPOSE_CELLS_API c_return_bool_value* DigitalSignatureCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DigitalSignatureCollection_Add(void* instance_ptr, void* digitalsignature);
   ASPOSE_CELLS_API c_return_ptr_value* DigitalSignatureCollection_GetEnumerator(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_DigitalSignatureCollection( void* instance_ptr);

   /**************Class DrawObject *****************/


   ASPOSE_CELLS_API c_return_bool_value* DrawObject_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DrawObject_GetCell(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DrawObject_GetShape(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* DrawObject_GetImageBytes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DrawObject_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DrawObject_GetCurrentPage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DrawObject_GetTotalPages(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* DrawObject_GetSheetIndex(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_DrawObject( void* instance_ptr);

   /**************Class DrawObjectEventHandler *****************/


   ASPOSE_CELLS_API c_return_void_value* DrawObjectEventHandler_Draw(void* instance_ptr, void* drawobject, float x, float y, float width, float height);


   ASPOSE_CELLS_API void Delete_DrawObjectEventHandler( void* instance_ptr);

   /**************Class ImageOrPrintOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_ImageOrPrintOptions();

   ASPOSE_CELLS_API c_return_bool_value* ImageOrPrintOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetPrintWithStatusDialog(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImageOrPrintOptions_GetPrintWithStatusDialog(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ImageOrPrintOptions_GetHorizontalResolution(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetHorizontalResolution(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ImageOrPrintOptions_GetVerticalResolution(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetVerticalResolution(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ImageOrPrintOptions_GetTiffCompression(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetTiffCompression(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ImageOrPrintOptions_GetTiffColorDepth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetTiffColorDepth(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ImageOrPrintOptions_GetTiffBinarizationMethod(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetTiffBinarizationMethod(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ImageOrPrintOptions_GetPrintingPage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetPrintingPage(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ImageOrPrintOptions_GetQuality(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetQuality(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ImageOrPrintOptions_GetImageType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetImageType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* ImageOrPrintOptions_GetOnePagePerSheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetOnePagePerSheet(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImageOrPrintOptions_GetAllColumnsInOnePagePerSheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetAllColumnsInOnePagePerSheet(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ImageOrPrintOptions_GetDrawObjectEventHandler(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetDrawObjectEventHandler(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* ImageOrPrintOptions_GetEmbededImageNameInSvg(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetEmbededImageNameInSvg(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* ImageOrPrintOptions_GetSVGFitToViewPort(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetSVGFitToViewPort(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* ImageOrPrintOptions_GetSvgCssPrefix(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetSvgCssPrefix(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* ImageOrPrintOptions_GetOnlyArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetOnlyArea(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImageOrPrintOptions_GetTransparent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetTransparent(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetIsFontSubstitutionCharGranularity(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImageOrPrintOptions_IsFontSubstitutionCharGranularity(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetPageIndex(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ImageOrPrintOptions_GetPageIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetPageCount(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ImageOrPrintOptions_GetPageCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetDesiredSize(void* instance_ptr, int desiredwidth, int desiredheight, bool keepaspectratio);
   ASPOSE_CELLS_API c_return_bool_value* ImageOrPrintOptions_IsOptimized(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetIsOptimized(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* ImageOrPrintOptions_GetDefaultFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetDefaultFont(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* ImageOrPrintOptions_GetCheckWorkbookDefaultFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetCheckWorkbookDefaultFont(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ImageOrPrintOptions_GetOutputBlankPageWhenNothingToPrint(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetOutputBlankPageWhenNothingToPrint(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* ImageOrPrintOptions_GetGridlineType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetGridlineType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ImageOrPrintOptions_GetTextCrossType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetTextCrossType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* ImageOrPrintOptions_GetDefaultEditLanguage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetDefaultEditLanguage(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ImageOrPrintOptions_GetSheetSet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetSheetSet(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* ImageOrPrintOptions_GetEmfRenderSetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ImageOrPrintOptions_SetEmfRenderSetting(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_ImageOrPrintOptions( void* instance_ptr);

   /**************Class PageEndSavingArgs *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PageEndSavingArgs(void* src);

   ASPOSE_CELLS_API c_return_bool_value* PageEndSavingArgs_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PageEndSavingArgs_GetHasMorePages(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageEndSavingArgs_SetHasMorePages(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* PageEndSavingArgs_GetPageIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PageEndSavingArgs_GetPageCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PageEndSavingArgs( void* instance_ptr);

   /**************Class PageSavingArgs *****************/


   ASPOSE_CELLS_API c_return_bool_value* PageSavingArgs_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PageSavingArgs_GetPageIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PageSavingArgs_GetPageCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PageSavingArgs( void* instance_ptr);

   /**************Class PageStartSavingArgs *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PageStartSavingArgs(void* src);

   ASPOSE_CELLS_API c_return_bool_value* PageStartSavingArgs_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PageStartSavingArgs_IsToOutput(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PageStartSavingArgs_SetIsToOutput(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* PageStartSavingArgs_GetPageIndex(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* PageStartSavingArgs_GetPageCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_PageStartSavingArgs( void* instance_ptr);

   /**************Class PdfBookmarkEntry *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PdfBookmarkEntry();

   ASPOSE_CELLS_API c_return_bool_value* PdfBookmarkEntry_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PdfBookmarkEntry_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfBookmarkEntry_SetText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* PdfBookmarkEntry_GetDestination(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfBookmarkEntry_SetDestination(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* PdfBookmarkEntry_GetDestinationName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfBookmarkEntry_SetDestinationName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* PdfBookmarkEntry_IsOpen(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfBookmarkEntry_SetIsOpen(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PdfBookmarkEntry_IsCollapse(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfBookmarkEntry_SetIsCollapse(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_PdfBookmarkEntry( void* instance_ptr);

   /**************Class RenderingFont *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_RenderingFont(char* fontname, float fontsize);

   ASPOSE_CELLS_API c_return_bool_value* RenderingFont_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* RenderingFont_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_float_value* RenderingFont_GetSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RenderingFont_GetBold(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RenderingFont_SetBold(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* RenderingFont_GetItalic(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RenderingFont_SetItalic(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* RenderingFont_GetColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RenderingFont_SetColor(void* instance_ptr, void* value);


   ASPOSE_CELLS_API void Delete_RenderingFont( void* instance_ptr);

   /**************Class RenderingWatermark *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_RenderingWatermark_String_RenderingFont(char* text, void* renderingfont);
   ASPOSE_CELLS_API c_return_ptr_value* New_RenderingWatermark_Stream(void* imagedata, int imagedata_length);

   ASPOSE_CELLS_API c_return_bool_value* RenderingWatermark_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_float_value* RenderingWatermark_GetRotation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RenderingWatermark_SetRotation(void* instance_ptr, float value);
   ASPOSE_CELLS_API c_return_int_value* RenderingWatermark_GetScaleToPagePercent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RenderingWatermark_SetScaleToPagePercent(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_float_value* RenderingWatermark_GetOpacity(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RenderingWatermark_SetOpacity(void* instance_ptr, float value);
   ASPOSE_CELLS_API c_return_bool_value* RenderingWatermark_IsBackground(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RenderingWatermark_SetIsBackground(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* RenderingWatermark_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RenderingWatermark_GetFont(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RenderingWatermark_GetImage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RenderingWatermark_GetHAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RenderingWatermark_SetHAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* RenderingWatermark_GetVAlignment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RenderingWatermark_SetVAlignment(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_float_value* RenderingWatermark_GetOffsetX(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RenderingWatermark_SetOffsetX(void* instance_ptr, float value);
   ASPOSE_CELLS_API c_return_float_value* RenderingWatermark_GetOffsetY(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RenderingWatermark_SetOffsetY(void* instance_ptr, float value);


   ASPOSE_CELLS_API void Delete_RenderingWatermark( void* instance_ptr);

   /**************Class SheetPrintingPreview *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_SheetPrintingPreview(void* sheet, void* options);

   ASPOSE_CELLS_API c_return_bool_value* SheetPrintingPreview_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SheetPrintingPreview_GetEvaluatedPageCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_SheetPrintingPreview( void* instance_ptr);

   /**************Class SheetRender *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_SheetRender(void* worksheet, void* options);

   ASPOSE_CELLS_API c_return_bool_value* SheetRender_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SheetRender_GetPageCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_double_value* SheetRender_GetPageScale(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SheetRender_GetPageSizeInch(void* instance_ptr, int pageindex);
   ASPOSE_CELLS_API c_return_void_value* SheetRender_ToImage_Integer_String(void* instance_ptr, int pageindex, char* filename);
   ASPOSE_CELLS_API c_return_ptr_value* SheetRender_ToImage_Integer(void* instance_ptr, int pageindex);
   ASPOSE_CELLS_API c_return_ptr_value* SheetRender_ToTiff(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SheetRender_ToTiff_String(void* instance_ptr, char* filename);
   ASPOSE_CELLS_API c_return_void_value* SheetRender_Dispose(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_SheetRender( void* instance_ptr);

   /**************Class SheetSet *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_SheetSet_int32_tArray(void* sheetindexes, int sheetindexes_length);
   ASPOSE_CELLS_API c_return_ptr_value* New_SheetSet_U16StringArray(void* sheetnames, int sheetnames_length);

   ASPOSE_CELLS_API c_return_bool_value* SheetSet_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SheetSet_GetActive();
   ASPOSE_CELLS_API c_return_ptr_value* SheetSet_GetVisible();
   ASPOSE_CELLS_API c_return_ptr_value* SheetSet_GetAll();


   ASPOSE_CELLS_API void Delete_SheetSet( void* instance_ptr);

   /**************Class WorkbookPrintingPreview *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_WorkbookPrintingPreview(void* workbook, void* options);

   ASPOSE_CELLS_API c_return_bool_value* WorkbookPrintingPreview_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* WorkbookPrintingPreview_GetEvaluatedPageCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_WorkbookPrintingPreview( void* instance_ptr);

   /**************Class WorkbookRender *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_WorkbookRender(void* workbook, void* options);

   ASPOSE_CELLS_API c_return_bool_value* WorkbookRender_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* WorkbookRender_GetPageCount(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WorkbookRender_GetPageSizeInch(void* instance_ptr, int pageindex);
   ASPOSE_CELLS_API c_return_ptr_value* WorkbookRender_ToImage(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookRender_ToImage_String(void* instance_ptr, char* filename);
   ASPOSE_CELLS_API c_return_void_value* WorkbookRender_ToImage_Integer_String(void* instance_ptr, int pageindex, char* filename);
   ASPOSE_CELLS_API c_return_ptr_value* WorkbookRender_ToImage_Integer(void* instance_ptr, int pageindex);
   ASPOSE_CELLS_API c_return_void_value* WorkbookRender_Dispose(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_WorkbookRender( void* instance_ptr);

   /**************Class HighlightChangesOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_HighlightChangesOptions(bool highlightonscreen, bool listonnewsheet);

   ASPOSE_CELLS_API c_return_bool_value* HighlightChangesOptions_IsNull(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_HighlightChangesOptions( void* instance_ptr);

   /**************Class Revision *****************/


   ASPOSE_CELLS_API c_return_bool_value* Revision_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Revision_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Revision_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Revision_GetType(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_Revision( void* instance_ptr);

   /**************Class RevisionAutoFormat *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_RevisionAutoFormat(void* src);

   ASPOSE_CELLS_API c_return_bool_value* RevisionAutoFormat_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionAutoFormat_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionAutoFormat_GetCellArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionAutoFormat_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionAutoFormat_GetId(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_RevisionAutoFormat( void* instance_ptr);

   /**************Class RevisionCellChange *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_RevisionCellChange(void* src);

   ASPOSE_CELLS_API c_return_bool_value* RevisionCellChange_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionCellChange_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* RevisionCellChange_GetCellName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionCellChange_GetRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionCellChange_GetColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RevisionCellChange_IsNewFormatted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RevisionCellChange_IsOldFormatted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* RevisionCellChange_GetOldFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionCellChange_GetOldValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionCellChange_GetNewValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* RevisionCellChange_GetNewFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionCellChange_GetNewStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionCellChange_GetOldStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionCellChange_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionCellChange_GetId(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_RevisionCellChange( void* instance_ptr);

   /**************Class RevisionCellComment *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_RevisionCellComment(void* src);

   ASPOSE_CELLS_API c_return_bool_value* RevisionCellComment_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionCellComment_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionCellComment_GetRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionCellComment_GetColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* RevisionCellComment_GetCellName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RevisionCellComment_SetCellName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* RevisionCellComment_GetActionType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RevisionCellComment_IsOldComment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionCellComment_GetOldLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionCellComment_GetNewLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionCellComment_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionCellComment_GetId(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_RevisionCellComment( void* instance_ptr);

   /**************Class RevisionCellMove *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_RevisionCellMove(void* src);

   ASPOSE_CELLS_API c_return_bool_value* RevisionCellMove_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionCellMove_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionCellMove_GetSourceArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionCellMove_GetDestinationArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionCellMove_GetSourceWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionCellMove_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionCellMove_GetId(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_RevisionCellMove( void* instance_ptr);

   /**************Class RevisionCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* RevisionCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* RevisionCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_RevisionCollection( void* instance_ptr);

   /**************Class RevisionCustomView *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_RevisionCustomView(void* src);

   ASPOSE_CELLS_API c_return_bool_value* RevisionCustomView_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionCustomView_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionCustomView_GetActionType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RevisionCustomView_GetGuid(void* instance_ptr, void* uuid);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionCustomView_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionCustomView_GetId(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_RevisionCustomView( void* instance_ptr);

   /**************Class RevisionDefinedName *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_RevisionDefinedName(void* src);

   ASPOSE_CELLS_API c_return_bool_value* RevisionDefinedName_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionDefinedName_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* RevisionDefinedName_GetText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* RevisionDefinedName_GetOldFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* RevisionDefinedName_GetNewFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionDefinedName_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionDefinedName_GetId(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_RevisionDefinedName( void* instance_ptr);

   /**************Class RevisionFormat *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_RevisionFormat(void* src);

   ASPOSE_CELLS_API c_return_bool_value* RevisionFormat_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionFormat_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionFormat_GetAreas(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionFormat_GetStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionFormat_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionFormat_GetId(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_RevisionFormat( void* instance_ptr);

   /**************Class RevisionHeader *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_RevisionHeader();

   ASPOSE_CELLS_API c_return_bool_value* RevisionHeader_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionHeader_GetSavedTime(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RevisionHeader_SetSavedTime(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* RevisionHeader_Get_UserName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RevisionHeader_SetUserName(void* instance_ptr, char* value);


   ASPOSE_CELLS_API void Delete_RevisionHeader( void* instance_ptr);

   /**************Class RevisionInsertDelete *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_RevisionInsertDelete(void* src);

   ASPOSE_CELLS_API c_return_bool_value* RevisionInsertDelete_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionInsertDelete_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionInsertDelete_GetCellArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionInsertDelete_GetActionType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionInsertDelete_GetRevisions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionInsertDelete_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionInsertDelete_GetId(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_RevisionInsertDelete( void* instance_ptr);

   /**************Class RevisionInsertSheet *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_RevisionInsertSheet(void* src);

   ASPOSE_CELLS_API c_return_bool_value* RevisionInsertSheet_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionInsertSheet_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionInsertSheet_GetActionType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* RevisionInsertSheet_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionInsertSheet_GetSheetPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionInsertSheet_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionInsertSheet_GetId(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_RevisionInsertSheet( void* instance_ptr);

   /**************Class RevisionLog *****************/


   ASPOSE_CELLS_API c_return_bool_value* RevisionLog_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionLog_GetMetadataTable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionLog_GetRevisions(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_RevisionLog( void* instance_ptr);

   /**************Class RevisionLogCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* RevisionLogCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionLogCollection_GetDaysPreservingHistory(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RevisionLogCollection_SetDaysPreservingHistory(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionLogCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* RevisionLogCollection_HighlightChanges(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_int_value* RevisionLogCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_RevisionLogCollection( void* instance_ptr);

   /**************Class RevisionMergeConflict *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_RevisionMergeConflict(void* src);

   ASPOSE_CELLS_API c_return_bool_value* RevisionMergeConflict_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionMergeConflict_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionMergeConflict_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionMergeConflict_GetId(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_RevisionMergeConflict( void* instance_ptr);

   /**************Class RevisionQueryTable *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_RevisionQueryTable(void* src);

   ASPOSE_CELLS_API c_return_bool_value* RevisionQueryTable_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionQueryTable_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionQueryTable_GetCellArea(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionQueryTable_GetFieldId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionQueryTable_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionQueryTable_GetId(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_RevisionQueryTable( void* instance_ptr);

   /**************Class RevisionRenameSheet *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_RevisionRenameSheet(void* src);

   ASPOSE_CELLS_API c_return_bool_value* RevisionRenameSheet_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionRenameSheet_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* RevisionRenameSheet_GetOldName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* RevisionRenameSheet_GetNewName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* RevisionRenameSheet_GetWorksheet(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* RevisionRenameSheet_GetId(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_RevisionRenameSheet( void* instance_ptr);

   /**************Class ListColumn *****************/


   ASPOSE_CELLS_API c_return_bool_value* ListColumn_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ListColumn_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListColumn_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* ListColumn_GetTotalsCalculation(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListColumn_SetTotalsCalculation(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* ListColumn_GetRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ListColumn_GetCustomTotalsRowFormula(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* ListColumn_SetCustomTotalsRowFormula(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* ListColumn_GetFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListColumn_SetFormula(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ListColumn_GetCustomCalculatedFormula(void* instance_ptr, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_void_value* ListColumn_SetCustomCalculatedFormula(void* instance_ptr, char* formula, bool isr1c1, bool islocal);
   ASPOSE_CELLS_API c_return_string_value* ListColumn_GetTotalsRowLabel(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListColumn_SetTotalsRowLabel(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* ListColumn_GetDataStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListColumn_SetDataStyle(void* instance_ptr, void* style);


   ASPOSE_CELLS_API void Delete_ListColumn( void* instance_ptr);

   /**************Class ListColumnCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ListColumnCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListColumnCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* ListColumnCollection_Get_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_int_value* ListColumnCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ListColumnCollection( void* instance_ptr);

   /**************Class ListObject *****************/


   ASPOSE_CELLS_API c_return_bool_value* ListObject_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ListObject_GetStartRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ListObject_GetStartColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ListObject_GetEndRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ListObject_GetEndColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListObject_GetListColumns(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListObject_Resize(void* instance_ptr, int startrow, int startcolumn, int endrow, int endcolumn, bool hasheaders);
   ASPOSE_CELLS_API c_return_void_value* ListObject_PutCellValue_Integer_Integer_Object(void* instance_ptr, int rowoffset, int columnoffset, void* value);
   ASPOSE_CELLS_API c_return_void_value* ListObject_PutCellValue_Integer_Integer_Object_Boolean(void* instance_ptr, int rowoffset, int columnoffset, void* value, bool istotalsrowlabel);
   ASPOSE_CELLS_API c_return_void_value* ListObject_PutCellFormula_Integer_Integer_String(void* instance_ptr, int rowoffset, int columnoffset, char* formula);
   ASPOSE_CELLS_API c_return_void_value* ListObject_PutCellFormula_Integer_Integer_String_Boolean(void* instance_ptr, int rowoffset, int columnoffset, char* formula, bool istotalsrowformula);
   ASPOSE_CELLS_API c_return_bool_value* ListObject_GetShowHeaderRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListObject_SetShowHeaderRow(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ListObject_GetShowTotals(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListObject_SetShowTotals(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* ListObject_GetDataRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListObject_UpdateColumnName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListObject_GetQueryTable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ListObject_GetDataSourceType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListObject_Filter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListObject_GetAutoFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ListObject_GetDisplayName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListObject_SetDisplayName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ListObject_GetComment(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListObject_SetComment(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* ListObject_GetShowTableStyleFirstColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListObject_SetShowTableStyleFirstColumn(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ListObject_GetShowTableStyleLastColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListObject_SetShowTableStyleLastColumn(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ListObject_GetShowTableStyleRowStripes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListObject_SetShowTableStyleRowStripes(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* ListObject_GetShowTableStyleColumnStripes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListObject_SetShowTableStyleColumnStripes(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* ListObject_ApplyStyleToRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListObject_ConvertToRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListObject_ConvertToRange_TableToRangeOptions(void* instance_ptr, void* options);
   ASPOSE_CELLS_API c_return_int_value* ListObject_GetTableStyleType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListObject_SetTableStyleType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* ListObject_GetTableStyleName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListObject_SetTableStyleName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* ListObject_GetXmlMap(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* ListObject_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListObject_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* ListObject_GetAlternativeDescription(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ListObject_SetAlternativeDescription(void* instance_ptr, char* value);


   ASPOSE_CELLS_API void Delete_ListObject( void* instance_ptr);

   /**************Class ListObjectCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* ListObjectCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* ListObjectCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* ListObjectCollection_Get_String(void* instance_ptr, char* tablename);
   ASPOSE_CELLS_API c_return_int_value* ListObjectCollection_Add_Integer_Integer_Integer_Integer_Boolean(void* instance_ptr, int startrow, int startcolumn, int endrow, int endcolumn, bool hasheaders);
   ASPOSE_CELLS_API c_return_int_value* ListObjectCollection_Add_String_String_Boolean(void* instance_ptr, char* startcell, char* endcell, bool hasheaders);
   ASPOSE_CELLS_API c_return_void_value* ListObjectCollection_UpdateColumnName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* ListObjectCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_ListObjectCollection( void* instance_ptr);

   /**************Class TableStyle *****************/


   ASPOSE_CELLS_API c_return_bool_value* TableStyle_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* TableStyle_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TableStyle_GetTableStyleElements(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_TableStyle( void* instance_ptr);

   /**************Class TableStyleCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* TableStyleCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* TableStyleCollection_GetDefaultTableStyleName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TableStyleCollection_SetDefaultTableStyleName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* TableStyleCollection_GetDefaultPivotStyleName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TableStyleCollection_SetDefaultPivotStyleName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* TableStyleCollection_AddTableStyle(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_int_value* TableStyleCollection_AddPivotTableStyle(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_ptr_value* TableStyleCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* TableStyleCollection_Get_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_ptr_value* TableStyleCollection_GetBuiltinTableStyle(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_int_value* TableStyleCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_TableStyleCollection( void* instance_ptr);

   /**************Class TableStyleElement *****************/


   ASPOSE_CELLS_API c_return_bool_value* TableStyleElement_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TableStyleElement_GetSize(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TableStyleElement_SetSize(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* TableStyleElement_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TableStyleElement_GetElementStyle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TableStyleElement_SetElementStyle(void* instance_ptr, void* style);


   ASPOSE_CELLS_API void Delete_TableStyleElement( void* instance_ptr);

   /**************Class TableStyleElementCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* TableStyleElementCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TableStyleElementCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* TableStyleElementCollection_Get_TableStyleElementType(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_int_value* TableStyleElementCollection_Add(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_int_value* TableStyleElementCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_TableStyleElementCollection( void* instance_ptr);

   /**************Class TableToRangeOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_TableToRangeOptions();

   ASPOSE_CELLS_API c_return_bool_value* TableToRangeOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* TableToRangeOptions_GetLastRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TableToRangeOptions_SetLastRow(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_TableToRangeOptions( void* instance_ptr);

   /**************Class MetadataOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_MetadataOptions(int metadatatype);

   ASPOSE_CELLS_API c_return_bool_value* MetadataOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* MetadataOptions_GetMetadataType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* MetadataOptions_GetPassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MetadataOptions_SetPassword(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* MetadataOptions_GetKeyLength(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* MetadataOptions_SetKeyLength(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_MetadataOptions( void* instance_ptr);

   /**************Class WorkbookMetadata *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_WorkbookMetadata_String_MetadataOptions(char* filename, void* options);
   ASPOSE_CELLS_API c_return_ptr_value* New_WorkbookMetadata_Stream_MetadataOptions(void* stream, int stream_length, void* options);

   ASPOSE_CELLS_API c_return_bool_value* WorkbookMetadata_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WorkbookMetadata_GetOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WorkbookMetadata_GetBuiltInDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WorkbookMetadata_GetCustomDocumentProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WorkbookMetadata_Save_String(void* instance_ptr, char* filename);
   ASPOSE_CELLS_API c_return_void_value* WorkbookMetadata_Save_Stream(void* instance_ptr, void* stream, int stream_length);


   ASPOSE_CELLS_API void Delete_WorkbookMetadata( void* instance_ptr);

   /**************Class NumbersLoadOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_NumbersLoadOptions();
   ASPOSE_CELLS_API c_return_ptr_value* New_NumbersLoadOptions_LoadOptions(void* src);

   ASPOSE_CELLS_API c_return_bool_value* NumbersLoadOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* NumbersLoadOptions_GetLoadTableType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NumbersLoadOptions_SetLoadTableType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* NumbersLoadOptions_GetLoadFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* NumbersLoadOptions_GetPassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NumbersLoadOptions_SetPassword(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* NumbersLoadOptions_GetParsingFormulaOnOpen(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NumbersLoadOptions_SetParsingFormulaOnOpen(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* NumbersLoadOptions_GetParsingPivotCachedRecords(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NumbersLoadOptions_SetParsingPivotCachedRecords(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* NumbersLoadOptions_SetPaperSize(void* instance_ptr, int type_);
   ASPOSE_CELLS_API c_return_int_value* NumbersLoadOptions_GetLanguageCode(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NumbersLoadOptions_SetLanguageCode(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* NumbersLoadOptions_GetRegion(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NumbersLoadOptions_SetRegion(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* NumbersLoadOptions_GetDefaultStyleSettings(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* NumbersLoadOptions_GetInterruptMonitor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NumbersLoadOptions_SetInterruptMonitor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* NumbersLoadOptions_GetIgnoreNotPrinted(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NumbersLoadOptions_SetIgnoreNotPrinted(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* NumbersLoadOptions_GetCheckDataValid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NumbersLoadOptions_SetCheckDataValid(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* NumbersLoadOptions_GetCheckExcelRestriction(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NumbersLoadOptions_SetCheckExcelRestriction(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* NumbersLoadOptions_GetKeepUnparsedData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NumbersLoadOptions_SetKeepUnparsedData(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* NumbersLoadOptions_GetLoadFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NumbersLoadOptions_SetLoadFilter(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* NumbersLoadOptions_GetMemorySetting(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NumbersLoadOptions_SetMemorySetting(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* NumbersLoadOptions_GetAutoFitterOptions(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NumbersLoadOptions_SetAutoFitterOptions(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* NumbersLoadOptions_GetAutoFilter(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NumbersLoadOptions_SetAutoFilter(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* NumbersLoadOptions_GetFontConfigs(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NumbersLoadOptions_SetFontConfigs(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_bool_value* NumbersLoadOptions_GetIgnoreUselessShapes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NumbersLoadOptions_SetIgnoreUselessShapes(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* NumbersLoadOptions_GetPreservePaddingSpacesInFormula(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* NumbersLoadOptions_SetPreservePaddingSpacesInFormula(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_NumbersLoadOptions( void* instance_ptr);

   /**************Class OdsCellField *****************/


   ASPOSE_CELLS_API c_return_bool_value* OdsCellField_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* OdsCellField_GetCustomFormat(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsCellField_SetCustomFormat(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* OdsCellField_GetFieldType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsCellField_SetFieldType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OdsCellField_GetRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsCellField_SetRow(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OdsCellField_GetColumn(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsCellField_SetColumn(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_OdsCellField( void* instance_ptr);

   /**************Class OdsCellFieldCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* OdsCellFieldCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* OdsCellFieldCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* OdsCellFieldCollection_Get_Integer_Integer(void* instance_ptr, int row, int column);
   ASPOSE_CELLS_API c_return_int_value* OdsCellFieldCollection_Add(void* instance_ptr, int row, int column, int fieldtype, char* format);
   ASPOSE_CELLS_API c_return_void_value* OdsCellFieldCollection_UpdateFieldsValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* OdsCellFieldCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_OdsCellFieldCollection( void* instance_ptr);

   /**************Class OdsPageBackground *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_OdsPageBackground();

   ASPOSE_CELLS_API c_return_bool_value* OdsPageBackground_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* OdsPageBackground_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsPageBackground_SetType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_ptr_value* OdsPageBackground_GetColor(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsPageBackground_SetColor(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_int_value* OdsPageBackground_GetGraphicType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsPageBackground_SetGraphicType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* OdsPageBackground_GetGraphicPositionType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsPageBackground_SetGraphicPositionType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* OdsPageBackground_IsLink(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* OdsPageBackground_GetLinkedGraphic(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsPageBackground_SetLinkedGraphic(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* OdsPageBackground_GetGraphicData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* OdsPageBackground_SetGraphicData(void* instance_ptr, void* value, int value_length);


   ASPOSE_CELLS_API void Delete_OdsPageBackground( void* instance_ptr);

   /**************Class PdfSecurityOptions *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PdfSecurityOptions();

   ASPOSE_CELLS_API c_return_bool_value* PdfSecurityOptions_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PdfSecurityOptions_GetUserPassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSecurityOptions_SetUserPassword(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* PdfSecurityOptions_GetOwnerPassword(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSecurityOptions_SetOwnerPassword(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSecurityOptions_GetPrintPermission(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSecurityOptions_SetPrintPermission(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSecurityOptions_GetModifyDocumentPermission(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSecurityOptions_SetModifyDocumentPermission(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSecurityOptions_GetAnnotationsPermission(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSecurityOptions_SetAnnotationsPermission(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSecurityOptions_GetFillFormsPermission(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSecurityOptions_SetFillFormsPermission(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSecurityOptions_GetExtractContentPermission(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSecurityOptions_SetExtractContentPermission(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSecurityOptions_GetAccessibilityExtractContent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSecurityOptions_SetAccessibilityExtractContent(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSecurityOptions_GetAssembleDocumentPermission(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSecurityOptions_SetAssembleDocumentPermission(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* PdfSecurityOptions_GetFullQualityPrintPermission(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PdfSecurityOptions_SetFullQualityPrintPermission(void* instance_ptr, bool value);


   ASPOSE_CELLS_API void Delete_PdfSecurityOptions( void* instance_ptr);

   /**************Class PivotGlobalizationSettings *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_PivotGlobalizationSettings();

   ASPOSE_CELLS_API c_return_bool_value* PivotGlobalizationSettings_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotGlobalizationSettings_GetTextOfTotal(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotGlobalizationSettings_GetTextOfGrandTotal(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotGlobalizationSettings_GetTextOfMultipleItems(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotGlobalizationSettings_GetTextOfAll(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotGlobalizationSettings_GetTextOfProtectedName(void* instance_ptr, char* protectedname);
   ASPOSE_CELLS_API c_return_string_value* PivotGlobalizationSettings_GetTextOfColumnLabels(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotGlobalizationSettings_GetTextOfRowLabels(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotGlobalizationSettings_GetTextOfEmptyData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotGlobalizationSettings_GetTextOfDataFieldHeader(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotGlobalizationSettings_GetShortTextOf12Months(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* PivotGlobalizationSettings_GetTextOf4Quaters(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotGlobalizationSettings_GetTextOfYears(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotGlobalizationSettings_GetTextOfQuarters(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotGlobalizationSettings_GetTextOfMonths(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotGlobalizationSettings_GetTextOfDays(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotGlobalizationSettings_GetTextOfHours(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotGlobalizationSettings_GetTextOfMinutes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotGlobalizationSettings_GetTextOfSeconds(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotGlobalizationSettings_GetTextOfRange(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* PivotGlobalizationSettings_GetTextOfSubTotal(void* instance_ptr, int subtotaltype);


   ASPOSE_CELLS_API void Delete_PivotGlobalizationSettings( void* instance_ptr);

   /**************Class Slicer *****************/


   ASPOSE_CELLS_API c_return_bool_value* Slicer_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_AddPivotConnection(void* instance_ptr, void* pivot);
   ASPOSE_CELLS_API c_return_void_value* Slicer_RemovePivotConnection(void* instance_ptr, void* pivot);
   ASPOSE_CELLS_API c_return_string_value* Slicer_GetTitle(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_SetTitle(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Slicer_GetAlternativeText(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_SetAlternativeText(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Slicer_IsPrintable(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_SetIsPrintable(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Slicer_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Slicer_GetPlacement(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_SetPlacement(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* Slicer_GetLockedAspectRatio(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_SetLockedAspectRatio(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* Slicer_GetLockedPosition(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_SetLockedPosition(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_void_value* Slicer_Refresh(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Slicer_GetSlicerCache(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* Slicer_GetParent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* Slicer_GetStyleType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_SetStyleType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* Slicer_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Slicer_GetCaption(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_SetCaption(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* Slicer_GetCaptionVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_SetCaptionVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_int_value* Slicer_GetNumberOfColumns(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_SetNumberOfColumns(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Slicer_GetLeftPixel(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_SetLeftPixel(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Slicer_GetTopPixel(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_SetTopPixel(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Slicer_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_SetWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Slicer_GetWidthPixel(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_SetWidthPixel(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Slicer_GetHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_SetHeight(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Slicer_GetHeightPixel(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_SetHeightPixel(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Slicer_GetColumnWidthPixel(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_SetColumnWidthPixel(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Slicer_GetColumnWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_SetColumnWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* Slicer_GetRowHeightPixel(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_SetRowHeightPixel(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_double_value* Slicer_GetRowHeight(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Slicer_SetRowHeight(void* instance_ptr, double value);


   ASPOSE_CELLS_API void Delete_Slicer( void* instance_ptr);

   /**************Class SlicerCache *****************/


   ASPOSE_CELLS_API c_return_bool_value* SlicerCache_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SlicerCache_GetCrossFilterType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SlicerCache_SetCrossFilterType(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_bool_value* SlicerCache_GetList(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SlicerCache_GetSlicerCacheItems(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* SlicerCache_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* SlicerCache_GetSourceName(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_SlicerCache( void* instance_ptr);

   /**************Class SlicerCacheItem *****************/


   ASPOSE_CELLS_API c_return_bool_value* SlicerCacheItem_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* SlicerCacheItem_GetSelected(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* SlicerCacheItem_SetSelected(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_string_value* SlicerCacheItem_GetValue(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_SlicerCacheItem( void* instance_ptr);

   /**************Class SlicerCacheItemCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* SlicerCacheItemCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SlicerCacheItemCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* SlicerCacheItemCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_SlicerCacheItemCollection( void* instance_ptr);

   /**************Class SlicerCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* SlicerCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* SlicerCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* SlicerCollection_Get_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_void_value* SlicerCollection_Remove(void* instance_ptr, void* slicer);
   ASPOSE_CELLS_API c_return_void_value* SlicerCollection_RemoveAt(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* SlicerCollection_Clear(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* SlicerCollection_Add_PivotTable_String_String(void* instance_ptr, void* pivot, char* destcellname, char* basefieldname);
   ASPOSE_CELLS_API c_return_int_value* SlicerCollection_Add_PivotTable_Integer_Integer_String(void* instance_ptr, void* pivot, int row, int column, char* basefieldname);
   ASPOSE_CELLS_API c_return_int_value* SlicerCollection_Add_PivotTable_Integer_Integer_Integer(void* instance_ptr, void* pivot, int row, int column, int basefieldindex);
   ASPOSE_CELLS_API c_return_int_value* SlicerCollection_Add_PivotTable_String_Integer(void* instance_ptr, void* pivot, char* destcellname, int basefieldindex);
   ASPOSE_CELLS_API c_return_int_value* SlicerCollection_Add_PivotTable_Integer_Integer_PivotField(void* instance_ptr, void* pivot, int row, int column, void* basefield);
   ASPOSE_CELLS_API c_return_int_value* SlicerCollection_Add_PivotTable_String_PivotField(void* instance_ptr, void* pivot, char* destcellname, void* basefield);
   ASPOSE_CELLS_API c_return_int_value* SlicerCollection_Add_ListObject_Integer_String(void* instance_ptr, void* table, int index, char* destcellname);
   ASPOSE_CELLS_API c_return_int_value* SlicerCollection_Add_ListObject_ListColumn_String(void* instance_ptr, void* table, void* listcolumn, char* destcellname);
   ASPOSE_CELLS_API c_return_int_value* SlicerCollection_Add_ListObject_ListColumn_Integer_Integer(void* instance_ptr, void* table, void* listcolumn, int row, int column);
   ASPOSE_CELLS_API c_return_int_value* SlicerCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_SlicerCollection( void* instance_ptr);

   /**************Class Timeline *****************/


   ASPOSE_CELLS_API c_return_bool_value* Timeline_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* Timeline_GetCaption(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Timeline_SetCaption(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* Timeline_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Timeline_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* Timeline_GetLeftPixel(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Timeline_SetLeftPixel(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Timeline_GetTopPixel(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Timeline_SetTopPixel(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Timeline_GetWidthPixel(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Timeline_SetWidthPixel(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_int_value* Timeline_GetHeightPixel(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* Timeline_SetHeightPixel(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_Timeline( void* instance_ptr);

   /**************Class TimelineCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* TimelineCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* TimelineCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* TimelineCollection_Get_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_int_value* TimelineCollection_Add_PivotTable_Integer_Integer_String(void* instance_ptr, void* pivot, int row, int column, char* basefieldname);
   ASPOSE_CELLS_API c_return_int_value* TimelineCollection_Add_PivotTable_String_String(void* instance_ptr, void* pivot, char* destcellname, char* basefieldname);
   ASPOSE_CELLS_API c_return_int_value* TimelineCollection_Add_PivotTable_Integer_Integer_Integer(void* instance_ptr, void* pivot, int row, int column, int basefieldindex);
   ASPOSE_CELLS_API c_return_int_value* TimelineCollection_Add_PivotTable_String_Integer(void* instance_ptr, void* pivot, char* destcellname, int basefieldindex);
   ASPOSE_CELLS_API c_return_int_value* TimelineCollection_Add_PivotTable_Integer_Integer_PivotField(void* instance_ptr, void* pivot, int row, int column, void* basefield);
   ASPOSE_CELLS_API c_return_int_value* TimelineCollection_Add_PivotTable_String_PivotField(void* instance_ptr, void* pivot, char* destcellname, void* basefield);
   ASPOSE_CELLS_API c_return_int_value* TimelineCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_TimelineCollection( void* instance_ptr);

   /**************Class VbaModule *****************/


   ASPOSE_CELLS_API c_return_bool_value* VbaModule_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* VbaModule_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* VbaModule_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_ptr_value* VbaModule_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* VbaModule_GetCodes(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* VbaModule_SetCodes(void* instance_ptr, char* value);


   ASPOSE_CELLS_API void Delete_VbaModule( void* instance_ptr);

   /**************Class VbaModuleCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* VbaModuleCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* VbaModuleCollection_AddDesignerStorage(void* instance_ptr, char* name, void* data, int data_length);
   ASPOSE_CELLS_API c_return_ptr_value* VbaModuleCollection_GetDesignerStorage(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_int_value* VbaModuleCollection_Add_Worksheet(void* instance_ptr, void* sheet);
   ASPOSE_CELLS_API c_return_int_value* VbaModuleCollection_Add_VbaModuleType_String(void* instance_ptr, void* type_, char* name);
   ASPOSE_CELLS_API c_return_int_value* VbaModuleCollection_AddUserForm(void* instance_ptr, char* name, char* codes, void* designerstorage, int designerstorage_length);
   ASPOSE_CELLS_API c_return_ptr_value* VbaModuleCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_void_value* VbaModuleCollection_Remove_Worksheet(void* instance_ptr, void* sheet);
   ASPOSE_CELLS_API c_return_void_value* VbaModuleCollection_Remove_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_ptr_value* VbaModuleCollection_Get_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_int_value* VbaModuleCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_VbaModuleCollection( void* instance_ptr);

   /**************Class VbaModuleType *****************/




   ASPOSE_CELLS_API void Delete_VbaModuleType( void* instance_ptr);

   /**************Class VbaProject *****************/


   ASPOSE_CELLS_API c_return_bool_value* VbaProject_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* VbaProject_Sign(void* instance_ptr, void* digitalsignature);
   ASPOSE_CELLS_API c_return_bool_value* VbaProject_IsValidSigned(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* VbaProject_GetCertRawData(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* VbaProject_GetEncoding(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* VbaProject_SetEncoding(void* instance_ptr, int value);
   ASPOSE_CELLS_API c_return_string_value* VbaProject_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* VbaProject_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* VbaProject_IsSigned(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* VbaProject_Protect(void* instance_ptr, bool islockedforviewing, char* password);
   ASPOSE_CELLS_API c_return_bool_value* VbaProject_IsProtected(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* VbaProject_GetIslockedForViewing(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* VbaProject_Copy(void* instance_ptr, void* source);
   ASPOSE_CELLS_API c_return_ptr_value* VbaProject_GetModules(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* VbaProject_GetReferences(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* VbaProject_ValidatePassword(void* instance_ptr, char* password);


   ASPOSE_CELLS_API void Delete_VbaProject( void* instance_ptr);

   /**************Class VbaProjectReference *****************/


   ASPOSE_CELLS_API c_return_bool_value* VbaProjectReference_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* VbaProjectReference_Copy(void* instance_ptr, void* source);
   ASPOSE_CELLS_API c_return_int_value* VbaProjectReference_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* VbaProjectReference_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* VbaProjectReference_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* VbaProjectReference_GetLibid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* VbaProjectReference_SetLibid(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* VbaProjectReference_GetTwiddledlibid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* VbaProjectReference_SetTwiddledlibid(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* VbaProjectReference_GetExtendedLibid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* VbaProjectReference_SetExtendedLibid(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* VbaProjectReference_GetRelativeLibid(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* VbaProjectReference_SetRelativeLibid(void* instance_ptr, char* value);


   ASPOSE_CELLS_API void Delete_VbaProjectReference( void* instance_ptr);

   /**************Class VbaProjectReferenceCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* VbaProjectReferenceCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* VbaProjectReferenceCollection_Get(void* instance_ptr, int i);
   ASPOSE_CELLS_API c_return_int_value* VbaProjectReferenceCollection_AddRegisteredReference(void* instance_ptr, char* name, char* libid);
   ASPOSE_CELLS_API c_return_int_value* VbaProjectReferenceCollection_AddControlRefrernce(void* instance_ptr, char* name, char* libid, char* twiddledlibid, char* extendedlibid);
   ASPOSE_CELLS_API c_return_int_value* VbaProjectReferenceCollection_AddProjectRefrernce(void* instance_ptr, char* name, char* absolutelibid, char* relativelibid);
   ASPOSE_CELLS_API c_return_void_value* VbaProjectReferenceCollection_Copy(void* instance_ptr, void* source);
   ASPOSE_CELLS_API c_return_int_value* VbaProjectReferenceCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_VbaProjectReferenceCollection( void* instance_ptr);

   /**************Class WebExtension *****************/


   ASPOSE_CELLS_API c_return_bool_value* WebExtension_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* WebExtension_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtension_SetId(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* WebExtension_IsFrozen(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtension_SetIsFrozen(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtension_GetReference(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtension_GetAlterReferences(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtension_GetProperties(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtension_GetBindings(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_WebExtension( void* instance_ptr);

   /**************Class WebExtensionBinding *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_WebExtensionBinding();

   ASPOSE_CELLS_API c_return_bool_value* WebExtensionBinding_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* WebExtensionBinding_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionBinding_SetId(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* WebExtensionBinding_GetType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionBinding_SetType(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* WebExtensionBinding_GetAppref(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionBinding_SetAppref(void* instance_ptr, char* value);


   ASPOSE_CELLS_API void Delete_WebExtensionBinding( void* instance_ptr);

   /**************Class WebExtensionBindingCollection *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_WebExtensionBindingCollection();

   ASPOSE_CELLS_API c_return_bool_value* WebExtensionBindingCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionBindingCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionBindingCollection_Add(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionBindingCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_WebExtensionBindingCollection( void* instance_ptr);

   /**************Class WebExtensionCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* WebExtensionCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionCollection_Add(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionCollection_AddWebVideoPlayer(void* instance_ptr, char* url, bool autoplay, int starttime, int endtime);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionCollection_RemoveAt(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_WebExtensionCollection( void* instance_ptr);

   /**************Class WebExtensionProperty *****************/


   ASPOSE_CELLS_API c_return_bool_value* WebExtensionProperty_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* WebExtensionProperty_GetName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionProperty_SetName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* WebExtensionProperty_GetValue(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionProperty_SetValue(void* instance_ptr, char* value);


   ASPOSE_CELLS_API void Delete_WebExtensionProperty( void* instance_ptr);

   /**************Class WebExtensionPropertyCollection *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_WebExtensionPropertyCollection();

   ASPOSE_CELLS_API c_return_bool_value* WebExtensionPropertyCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionPropertyCollection_Get_Integer(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionPropertyCollection_Get_String(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionPropertyCollection_Add(void* instance_ptr, char* name, char* value);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionPropertyCollection_RemoveAt(void* instance_ptr, char* name);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionPropertyCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_WebExtensionPropertyCollection( void* instance_ptr);

   /**************Class WebExtensionReference *****************/


   ASPOSE_CELLS_API c_return_bool_value* WebExtensionReference_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_string_value* WebExtensionReference_GetId(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionReference_SetId(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* WebExtensionReference_GetVersion(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionReference_SetVersion(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_string_value* WebExtensionReference_GetStoreName(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionReference_SetStoreName(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionReference_GetStoreType(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionReference_SetStoreType(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_WebExtensionReference( void* instance_ptr);

   /**************Class WebExtensionReferenceCollection *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_WebExtensionReferenceCollection();

   ASPOSE_CELLS_API c_return_bool_value* WebExtensionReferenceCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionReferenceCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionReferenceCollection_Add(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionReferenceCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_WebExtensionReferenceCollection( void* instance_ptr);

   /**************Class WebExtensionTaskPane *****************/


   ASPOSE_CELLS_API c_return_bool_value* WebExtensionTaskPane_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionTaskPane_GetWebExtension(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionTaskPane_SetWebExtension(void* instance_ptr, void* value);
   ASPOSE_CELLS_API c_return_string_value* WebExtensionTaskPane_GetDockState(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionTaskPane_SetDockState(void* instance_ptr, char* value);
   ASPOSE_CELLS_API c_return_bool_value* WebExtensionTaskPane_IsVisible(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionTaskPane_SetIsVisible(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_bool_value* WebExtensionTaskPane_IsLocked(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionTaskPane_SetIsLocked(void* instance_ptr, bool value);
   ASPOSE_CELLS_API c_return_double_value* WebExtensionTaskPane_GetWidth(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionTaskPane_SetWidth(void* instance_ptr, double value);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionTaskPane_GetRow(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* WebExtensionTaskPane_SetRow(void* instance_ptr, int value);


   ASPOSE_CELLS_API void Delete_WebExtensionTaskPane( void* instance_ptr);

   /**************Class WebExtensionTaskPaneCollection *****************/


   ASPOSE_CELLS_API c_return_bool_value* WebExtensionTaskPaneCollection_IsNull(void* instance_ptr);
   ASPOSE_CELLS_API c_return_ptr_value* WebExtensionTaskPaneCollection_Get(void* instance_ptr, int index);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionTaskPaneCollection_Add(void* instance_ptr);
   ASPOSE_CELLS_API c_return_int_value* WebExtensionTaskPaneCollection_GetCount(void* instance_ptr);


   ASPOSE_CELLS_API void Delete_WebExtensionTaskPaneCollection( void* instance_ptr);


   /**************Struct Color *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_Color();
   ASPOSE_CELLS_API c_return_int_value* Color_Get_a( void* instance_ptr );
   ASPOSE_CELLS_API void Color_Set_a( void* instance_ptr, uint8_t value );
   ASPOSE_CELLS_API c_return_int_value* Color_Get_r( void* instance_ptr );
   ASPOSE_CELLS_API void Color_Set_r( void* instance_ptr, uint8_t value );
   ASPOSE_CELLS_API c_return_int_value* Color_Get_g( void* instance_ptr );
   ASPOSE_CELLS_API void Color_Set_g( void* instance_ptr, uint8_t value );
   ASPOSE_CELLS_API c_return_int_value* Color_Get_b( void* instance_ptr );
   ASPOSE_CELLS_API void Color_Set_b( void* instance_ptr, uint8_t value );
   ASPOSE_CELLS_API c_return_ptr_value* Color_Black();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Navy();
   ASPOSE_CELLS_API c_return_ptr_value* Color_DarkBlue();
   ASPOSE_CELLS_API c_return_ptr_value* Color_MediumBlue();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Blue();
   ASPOSE_CELLS_API c_return_ptr_value* Color_DarkGreen();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Green();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Teal();
   ASPOSE_CELLS_API c_return_ptr_value* Color_DarkCyan();
   ASPOSE_CELLS_API c_return_ptr_value* Color_DeepSkyBlue();
   ASPOSE_CELLS_API c_return_ptr_value* Color_DarkTurquoise();
   ASPOSE_CELLS_API c_return_ptr_value* Color_MediumSpringGreen();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Lime();
   ASPOSE_CELLS_API c_return_ptr_value* Color_SpringGreen();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Aqua();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Cyan();
   ASPOSE_CELLS_API c_return_ptr_value* Color_MidnightBlue();
   ASPOSE_CELLS_API c_return_ptr_value* Color_DodgerBlue();
   ASPOSE_CELLS_API c_return_ptr_value* Color_LightSeaGreen();
   ASPOSE_CELLS_API c_return_ptr_value* Color_ForestGreen();
   ASPOSE_CELLS_API c_return_ptr_value* Color_SeaGreen();
   ASPOSE_CELLS_API c_return_ptr_value* Color_DarkSlateGray();
   ASPOSE_CELLS_API c_return_ptr_value* Color_LimeGreen();
   ASPOSE_CELLS_API c_return_ptr_value* Color_MediumSeaGreen();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Turquoise();
   ASPOSE_CELLS_API c_return_ptr_value* Color_RoyalBlue();
   ASPOSE_CELLS_API c_return_ptr_value* Color_SteelBlue();
   ASPOSE_CELLS_API c_return_ptr_value* Color_DarkSlateBlue();
   ASPOSE_CELLS_API c_return_ptr_value* Color_MediumTurquoise();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Indigo();
   ASPOSE_CELLS_API c_return_ptr_value* Color_DarkOliveGreen();
   ASPOSE_CELLS_API c_return_ptr_value* Color_CadetBlue();
   ASPOSE_CELLS_API c_return_ptr_value* Color_CornflowerBlue();
   ASPOSE_CELLS_API c_return_ptr_value* Color_MediumAquaMarine();
   ASPOSE_CELLS_API c_return_ptr_value* Color_DimGray();
   ASPOSE_CELLS_API c_return_ptr_value* Color_SlateBlue();
   ASPOSE_CELLS_API c_return_ptr_value* Color_OliveDrab();
   ASPOSE_CELLS_API c_return_ptr_value* Color_SlateGray();
   ASPOSE_CELLS_API c_return_ptr_value* Color_LightSlateGray();
   ASPOSE_CELLS_API c_return_ptr_value* Color_MediumSlateBlue();
   ASPOSE_CELLS_API c_return_ptr_value* Color_LawnGreen();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Chartreuse();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Aquamarine();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Maroon();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Purple();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Olive();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Gray();
   ASPOSE_CELLS_API c_return_ptr_value* Color_SkyBlue();
   ASPOSE_CELLS_API c_return_ptr_value* Color_LightSkyBlue();
   ASPOSE_CELLS_API c_return_ptr_value* Color_BlueViolet();
   ASPOSE_CELLS_API c_return_ptr_value* Color_DarkRed();
   ASPOSE_CELLS_API c_return_ptr_value* Color_DarkMagenta();
   ASPOSE_CELLS_API c_return_ptr_value* Color_SaddleBrown();
   ASPOSE_CELLS_API c_return_ptr_value* Color_DarkSeaGreen();
   ASPOSE_CELLS_API c_return_ptr_value* Color_LightGreen();
   ASPOSE_CELLS_API c_return_ptr_value* Color_MediumPurple();
   ASPOSE_CELLS_API c_return_ptr_value* Color_DarkViolet();
   ASPOSE_CELLS_API c_return_ptr_value* Color_PaleGreen();
   ASPOSE_CELLS_API c_return_ptr_value* Color_DarkOrchid();
   ASPOSE_CELLS_API c_return_ptr_value* Color_YellowGreen();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Sienna();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Brown();
   ASPOSE_CELLS_API c_return_ptr_value* Color_DarkGray();
   ASPOSE_CELLS_API c_return_ptr_value* Color_LightBlue();
   ASPOSE_CELLS_API c_return_ptr_value* Color_GreenYellow();
   ASPOSE_CELLS_API c_return_ptr_value* Color_PaleTurquoise();
   ASPOSE_CELLS_API c_return_ptr_value* Color_LightSteelBlue();
   ASPOSE_CELLS_API c_return_ptr_value* Color_PowderBlue();
   ASPOSE_CELLS_API c_return_ptr_value* Color_FireBrick();
   ASPOSE_CELLS_API c_return_ptr_value* Color_DarkGoldenRod();
   ASPOSE_CELLS_API c_return_ptr_value* Color_MediumOrchid();
   ASPOSE_CELLS_API c_return_ptr_value* Color_RosyBrown();
   ASPOSE_CELLS_API c_return_ptr_value* Color_DarkKhaki();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Silver();
   ASPOSE_CELLS_API c_return_ptr_value* Color_MediumVioletRed();
   ASPOSE_CELLS_API c_return_ptr_value* Color_IndianRed();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Peru();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Chocolate();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Tan();
   ASPOSE_CELLS_API c_return_ptr_value* Color_LightGray();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Thistle();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Orchid();
   ASPOSE_CELLS_API c_return_ptr_value* Color_GoldenRod();
   ASPOSE_CELLS_API c_return_ptr_value* Color_PaleVioletRed();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Crimson();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Gainsboro();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Plum();
   ASPOSE_CELLS_API c_return_ptr_value* Color_BurlyWood();
   ASPOSE_CELLS_API c_return_ptr_value* Color_LightCyan();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Lavender();
   ASPOSE_CELLS_API c_return_ptr_value* Color_DarkSalmon();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Violet();
   ASPOSE_CELLS_API c_return_ptr_value* Color_PaleGoldenRod();
   ASPOSE_CELLS_API c_return_ptr_value* Color_LightCoral();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Khaki();
   ASPOSE_CELLS_API c_return_ptr_value* Color_AliceBlue();
   ASPOSE_CELLS_API c_return_ptr_value* Color_HoneyDew();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Azure();
   ASPOSE_CELLS_API c_return_ptr_value* Color_SandyBrown();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Wheat();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Beige();
   ASPOSE_CELLS_API c_return_ptr_value* Color_WhiteSmoke();
   ASPOSE_CELLS_API c_return_ptr_value* Color_MintCream();
   ASPOSE_CELLS_API c_return_ptr_value* Color_GhostWhite();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Salmon();
   ASPOSE_CELLS_API c_return_ptr_value* Color_AntiqueWhite();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Linen();
   ASPOSE_CELLS_API c_return_ptr_value* Color_LightGoldenRodYellow();
   ASPOSE_CELLS_API c_return_ptr_value* Color_OldLace();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Red();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Fuchsia();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Magenta();
   ASPOSE_CELLS_API c_return_ptr_value* Color_DeepPink();
   ASPOSE_CELLS_API c_return_ptr_value* Color_OrangeRed();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Tomato();
   ASPOSE_CELLS_API c_return_ptr_value* Color_HotPink();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Coral();
   ASPOSE_CELLS_API c_return_ptr_value* Color_DarkOrange();
   ASPOSE_CELLS_API c_return_ptr_value* Color_LightSalmon();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Orange();
   ASPOSE_CELLS_API c_return_ptr_value* Color_LightPink();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Pink();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Gold();
   ASPOSE_CELLS_API c_return_ptr_value* Color_PeachPuff();
   ASPOSE_CELLS_API c_return_ptr_value* Color_NavajoWhite();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Moccasin();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Bisque();
   ASPOSE_CELLS_API c_return_ptr_value* Color_MistyRose();
   ASPOSE_CELLS_API c_return_ptr_value* Color_BlanchedAlmond();
   ASPOSE_CELLS_API c_return_ptr_value* Color_PapayaWhip();
   ASPOSE_CELLS_API c_return_ptr_value* Color_LavenderBlush();
   ASPOSE_CELLS_API c_return_ptr_value* Color_SeaShell();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Cornsilk();
   ASPOSE_CELLS_API c_return_ptr_value* Color_LemonChiffon();
   ASPOSE_CELLS_API c_return_ptr_value* Color_FloralWhite();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Snow();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Yellow();
   ASPOSE_CELLS_API c_return_ptr_value* Color_LightYellow();
   ASPOSE_CELLS_API c_return_ptr_value* Color_Ivory();
   ASPOSE_CELLS_API c_return_ptr_value* Color_White();
   ASPOSE_CELLS_API void Delete_Color( void* instance_ptr);

   /**************Struct Date *****************/

   ASPOSE_CELLS_API c_return_ptr_value* New_Date();
   ASPOSE_CELLS_API c_return_int_value* Date_Get_year( void* instance_ptr );
   ASPOSE_CELLS_API void Date_Set_year( void* instance_ptr, int value );
   ASPOSE_CELLS_API c_return_int_value* Date_Get_month( void* instance_ptr );
   ASPOSE_CELLS_API void Date_Set_month( void* instance_ptr, int value );
   ASPOSE_CELLS_API c_return_int_value* Date_Get_day( void* instance_ptr );
   ASPOSE_CELLS_API void Date_Set_day( void* instance_ptr, int value );
   ASPOSE_CELLS_API c_return_int_value* Date_Get_hour( void* instance_ptr );
   ASPOSE_CELLS_API void Date_Set_hour( void* instance_ptr, int value );
   ASPOSE_CELLS_API c_return_int_value* Date_Get_minute( void* instance_ptr );
   ASPOSE_CELLS_API void Date_Set_minute( void* instance_ptr, int value );
   ASPOSE_CELLS_API c_return_int_value* Date_Get_second( void* instance_ptr );
   ASPOSE_CELLS_API void Date_Set_second( void* instance_ptr, int value );
   ASPOSE_CELLS_API c_return_int_value* Date_Get_millisecond( void* instance_ptr );
   ASPOSE_CELLS_API void Date_Set_millisecond( void* instance_ptr, int value );
   ASPOSE_CELLS_API void Delete_Date( void* instance_ptr);


   /**************Enumerator ReferredAreaEnumerator *****************/
   ASPOSE_CELLS_API c_return_ptr_value* ReferredAreaEnumerator_GetCurrent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ReferredAreaEnumerator_MoveNext(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ReferredAreaEnumerator_Reset(void* instance_ptr);
   ASPOSE_CELLS_API void Delete_ReferredAreaEnumerator(void* instance_ptr);
   /**************Enumerator CellEnumerator *****************/
   ASPOSE_CELLS_API c_return_ptr_value* CellEnumerator_GetCurrent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* CellEnumerator_MoveNext(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* CellEnumerator_Reset(void* instance_ptr);
   ASPOSE_CELLS_API void Delete_CellEnumerator(void* instance_ptr);
   /**************Enumerator ExternalLinkEnumerator *****************/
   ASPOSE_CELLS_API c_return_ptr_value* ExternalLinkEnumerator_GetCurrent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ExternalLinkEnumerator_MoveNext(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ExternalLinkEnumerator_Reset(void* instance_ptr);
   ASPOSE_CELLS_API void Delete_ExternalLinkEnumerator(void* instance_ptr);
   /**************Enumerator RowEnumerator *****************/
   ASPOSE_CELLS_API c_return_ptr_value* RowEnumerator_GetCurrent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* RowEnumerator_MoveNext(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* RowEnumerator_Reset(void* instance_ptr);
   ASPOSE_CELLS_API void Delete_RowEnumerator(void* instance_ptr);
   /**************Enumerator TextParagraphEnumerator *****************/
   ASPOSE_CELLS_API c_return_ptr_value* TextParagraphEnumerator_GetCurrent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* TextParagraphEnumerator_MoveNext(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* TextParagraphEnumerator_Reset(void* instance_ptr);
   ASPOSE_CELLS_API void Delete_TextParagraphEnumerator(void* instance_ptr);
   /**************Enumerator ChartPointEnumerator *****************/
   ASPOSE_CELLS_API c_return_ptr_value* ChartPointEnumerator_GetCurrent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* ChartPointEnumerator_MoveNext(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* ChartPointEnumerator_Reset(void* instance_ptr);
   ASPOSE_CELLS_API void Delete_ChartPointEnumerator(void* instance_ptr);
   /**************Enumerator PivotFieldEnumerator *****************/
   ASPOSE_CELLS_API c_return_ptr_value* PivotFieldEnumerator_GetCurrent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PivotFieldEnumerator_MoveNext(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotFieldEnumerator_Reset(void* instance_ptr);
   ASPOSE_CELLS_API void Delete_PivotFieldEnumerator(void* instance_ptr);
   /**************Enumerator PivotItemEnumerator *****************/
   ASPOSE_CELLS_API c_return_ptr_value* PivotItemEnumerator_GetCurrent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* PivotItemEnumerator_MoveNext(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* PivotItemEnumerator_Reset(void* instance_ptr);
   ASPOSE_CELLS_API void Delete_PivotItemEnumerator(void* instance_ptr);
   /**************Enumerator DigitalSignatureEnumerator *****************/
   ASPOSE_CELLS_API c_return_ptr_value* DigitalSignatureEnumerator_GetCurrent(void* instance_ptr);
   ASPOSE_CELLS_API c_return_bool_value* DigitalSignatureEnumerator_MoveNext(void* instance_ptr);
   ASPOSE_CELLS_API c_return_void_value* DigitalSignatureEnumerator_Reset(void* instance_ptr);
   ASPOSE_CELLS_API void Delete_DigitalSignatureEnumerator(void* instance_ptr);

   /***************************************************************/
   ASPOSE_CELLS_API c_return_void_value* Cell_PutValue_Null(void* instance_ptr);

#ifdef __cplusplus
}
#endif

#endif